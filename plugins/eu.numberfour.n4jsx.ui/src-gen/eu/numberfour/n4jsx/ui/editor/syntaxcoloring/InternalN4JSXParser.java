package eu.numberfour.n4jsx.ui.editor.syntaxcoloring; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import eu.numberfour.n4jsx.services.N4JSXGrammarAccess;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSXParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSXParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSXParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSXParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSXParser.g"; }




    	private N4JSXGrammarAccess grammarAccess;
    	 	
    	public InternalN4JSXParser(TokenStream input, N4JSXGrammarAccess grammarAccess) {
    		this(input);
    		this.grammarAccess = grammarAccess;
    	}
    	
    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleIDLScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIDLScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleIDLScript() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;



            
        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getIDLScriptAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||(LA2_0>=Asterisk && LA2_0<=PlusSign)||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getIDLScriptAccess().getScriptElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryExpression_return retval = new InternalN4JSXParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_4 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_7 = null;

        InternalN4JSXParser.ruleParenExpression_return ParenExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_12 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_13 = null;



            
        try {
            {
            int alt3=14;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_3=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.start):null), (JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_4=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.start):null), (ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_5=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.start):null), (LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_6=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.start):null), (ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_7=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.start):null), (ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_8=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.start):null), (ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_9=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.start):null), (AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_10=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.start):null), (FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_11=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.start):null), (AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_12=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.start):null), (N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_13=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.start):null), (TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PrimaryExpression_return retval = new InternalN4JSXParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_4 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_13 = null;



            
        try {
            {
            int alt4=14;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_3=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.start):null), (JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_4=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.start):null), (ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_5=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.start):null), (LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_6=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.start):null), (ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_7=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.start):null), (ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_8=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.start):null), (ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_9=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.start):null), (AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_10=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.start):null), (FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_11=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.start):null), (AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_12=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.start):null), (N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_13=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.start):null), (TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElement_return ruleJSXElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElement_return retval = new InternalN4JSXParser.ruleJSXElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_3_0_0=null;
        Token SolidusKeyword_3_1_0=null;
        Token GreaterThanSignKeyword_3_1_1=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxElementNameJSXElementNameParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleJSXAttributes_return JSXAttributesParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0_1_0 = null;

        InternalN4JSXParser.ruleJSXClosingElement_return JSXClosingElementParserRuleCall_3_0_2 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_6);
            JsxElementNameJSXElementNameParserRuleCall_1_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.start):null), (JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxElementNameAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_7);
            JSXAttributesParserRuleCall_2=ruleJSXAttributes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.start):null), (JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.stop):null), grammarAccess.getJSXElementAccess().getJSXAttributesParserRuleCall_2()); 
            }
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==GreaterThanSign) ) {
                alt6=1;
            }
            else if ( (LA6_0==Solidus) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_3_0_0=(Token)match(input,GreaterThanSign,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_3_0_0, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0()); 
                    }
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==LessThanSign) ) {
                            int LA5_1 = input.LA(2);

                            if ( ((LA5_1>=Intersection && LA5_1<=Implements)||(LA5_1>=Promisify && LA5_1<=Abstract)||LA5_1==External||(LA5_1>=Private && LA5_1<=Project)||LA5_1==Public||LA5_1==Static||LA5_1==Target||(LA5_1>=Async && LA5_1<=Await)||LA5_1==Union||(LA5_1>=Yield && LA5_1<=This)||LA5_1==From||LA5_1==Type||(LA5_1>=Get && LA5_1<=Let)||(LA5_1>=Out && LA5_1<=Set)||LA5_1==As||LA5_1==Of||LA5_1==RULE_IDENTIFIER) ) {
                                alt5=1;
                            }


                        }
                        else if ( (LA5_0==LeftCurlyBracket) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_8);
                    	    JsxChildrenJSXChildParserRuleCall_3_0_1_0=ruleJSXChild();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxChildrenAssignment_3_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    JSXClosingElementParserRuleCall_3_0_2=ruleJSXClosingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.start):null), (JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.stop):null), grammarAccess.getJSXElementAccess().getJSXClosingElementParserRuleCall_3_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SolidusKeyword_3_1_0=(Token)match(input,Solidus,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_3_1_0, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0()); 
                    }
                    GreaterThanSignKeyword_3_1_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_3_1_1, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleJSXClosingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXClosingElement_return ruleJSXClosingElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXClosingElement_return retval = new InternalN4JSXParser.ruleJSXClosingElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token SolidusKeyword_1=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxClosingNameJSXElementNameParserRuleCall_2_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_10); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getJSXClosingElementAccess().getLessThanSignKeyword_0()); 
            }
            SolidusKeyword_1=(Token)match(input,Solidus,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SolidusKeyword_1, grammarAccess.getJSXClosingElementAccess().getSolidusKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_9);
            JsxClosingNameJSXElementNameParserRuleCall_2_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.start):null), (JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.stop):null), grammarAccess.getJSXClosingElementAccess().getJsxClosingNameAssignment_2()); 
            }

            }


            }

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getJSXClosingElementAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXChild() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXChild();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXChild_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXChild_return ruleJSXChild() throws RecognitionException {
        InternalN4JSXParser.ruleJSXChild_return retval = new InternalN4JSXParser.ruleJSXChild_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXExpression_return JSXExpressionParserRuleCall_1 = null;



            
        try {
            {
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LessThanSign) ) {
                alt7=1;
            }
            else if ( (LA7_0==LeftCurlyBracket) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_0=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.start):null), (JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.stop):null), grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXExpressionParserRuleCall_1=ruleJSXExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXExpressionParserRuleCall_1!=null?((Token)JSXExpressionParserRuleCall_1.start):null), (JSXExpressionParserRuleCall_1!=null?((Token)JSXExpressionParserRuleCall_1.stop):null), grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXExpression_return ruleJSXExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXExpression_return retval = new InternalN4JSXParser.ruleJSXExpression_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_12);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getJSXExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElementName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementName_return ruleJSXElementName() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementName_return retval = new InternalN4JSXParser.ruleJSXElementName_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElementNameExpression_return ExpressionJSXElementNameExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionJSXElementNameExpressionParserRuleCall_0=ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.start):null), (ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementNameExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElementNameExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementNameExpression_return ruleJSXElementNameExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementNameExpression_return retval = new InternalN4JSXParser.ruleJSXElementNameExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_13);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0()); 
            }
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==FullStop) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_13);
            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1=ruleParameterizedPropertyAccessExpressionTail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1()); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleJSXAttributes_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttributes_return ruleJSXAttributes() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttributes_return retval = new InternalN4JSXParser.ruleJSXAttributes_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXAttribute_return JsxAttributesJSXAttributeParserRuleCall_0 = null;



            
        try {
            {
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( ((LA9_0>=Intersection && LA9_0<=With)||(LA9_0>=For && LA9_0<=Var)||(LA9_0>=As && LA9_0<=Of)||LA9_0==LeftCurlyBracket||LA9_0==RULE_IDENTIFIER) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    JsxAttributesJSXAttributeParserRuleCall_0=ruleJSXAttribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.start):null), (JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributesAccess().getJsxAttributesAssignment()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttribute_return ruleJSXAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttribute_return retval = new InternalN4JSXParser.ruleJSXAttribute_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXSpreadAttribute_return JSXSpreadAttributeParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXPropertyAttribute_return JSXPropertyAttributeParserRuleCall_1 = null;



            
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LeftCurlyBracket) ) {
                alt10=1;
            }
            else if ( ((LA10_0>=Intersection && LA10_0<=With)||(LA10_0>=For && LA10_0<=Var)||(LA10_0>=As && LA10_0<=Of)||LA10_0==RULE_IDENTIFIER) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXSpreadAttributeParserRuleCall_0=ruleJSXSpreadAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.start):null), (JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXPropertyAttributeParserRuleCall_1=ruleJSXPropertyAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.start):null), (JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.stop):null), grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXSpreadAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXSpreadAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXSpreadAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXSpreadAttribute_return ruleJSXSpreadAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXSpreadAttribute_return retval = new InternalN4JSXParser.ruleJSXSpreadAttribute_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token FullStopFullStopFullStopKeyword_1=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_15); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0()); 
            }
            FullStopFullStopFullStopKeyword_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopFullStopFullStopKeyword_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_12);
            ExpressionAssignmentExpressionParserRuleCall_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXPropertyAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXPropertyAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXPropertyAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXPropertyAttribute_return ruleJSXPropertyAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXPropertyAttribute_return retval = new InternalN4JSXParser.ruleJSXPropertyAttribute_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0=null;
        Token LeftCurlyBracketKeyword_1_1_1_0=null;
        Token RightCurlyBracketKeyword_1_1_1_2=null;
        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getPropertyAssignment_0()); 
            }

            }


            }
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==EqualsSign) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_17); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0()); 
                    }
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==RULE_STRING) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==LeftCurlyBracket) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0=ruleStringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.start):null), (JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            LeftCurlyBracketKeyword_1_1_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(LeftCurlyBracketKeyword_1_1_1_0, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_12);
                            JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_1_1()); 
                            }

                            }


                            }

                            RightCurlyBracketKeyword_1_1_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightCurlyBracketKeyword_1_1_1_2, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_1_2()); 
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleScriptElement_return retval = new InternalN4JSXParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;



            
        try {
            {
            int alt13=7;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSXParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_18);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt26=5;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            {
                            {
                            loop15:
                            do {
                                int alt15=2;
                                int LA15_0 = input.LA(1);

                                if ( ((LA15_0>=Protected && LA15_0<=Abstract)||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Const) ) {
                                    alt15=1;
                                }


                                switch (alt15) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop15;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2()); 
                            }
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==Tilde) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4()); 
                            }

                            }


                            }
                            int alt17=2;
                            int LA17_0 = input.LA(1);

                            if ( (LA17_0==LessThanSign) ) {
                                alt17=1;
                            }
                            switch (alt17) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt18=2;
                            int LA18_0 = input.LA(1);

                            if ( (LA18_0==Implements||LA18_0==Extends) ) {
                                alt18=1;
                            }
                            switch (alt18) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop19:
                            do {
                                int alt19=2;
                                int LA19_0 = input.LA(1);

                                if ( ((LA19_0>=Protected && LA19_0<=Abstract)||LA19_0==External||(LA19_0>=Private && LA19_0<=Project)||LA19_0==Public||LA19_0==Static||LA19_0==Const) ) {
                                    alt19=1;
                                }


                                switch (alt19) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop19;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2()); 
                            }
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==Tilde) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4()); 
                            }

                            }


                            }
                            int alt21=2;
                            int LA21_0 = input.LA(1);

                            if ( (LA21_0==LessThanSign) ) {
                                alt21=1;
                            }
                            switch (alt21) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt22=2;
                            int LA22_0 = input.LA(1);

                            if ( (LA22_0==Implements||LA22_0==Extends) ) {
                                alt22=1;
                            }
                            switch (alt22) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( ((LA24_0>=Protected && LA24_0<=Abstract)||LA24_0==External||(LA24_0>=Private && LA24_0<=Project)||LA24_0==Public||LA24_0==Static||LA24_0==Const) ) {
                            alt24=1;
                        }


                        switch (alt24) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5()); 
                    }

                    }


                    }
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==Comma) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariables_return retval = new InternalN4JSXParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1()); 
            }

            }


            }
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==Comma) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclaration_return retval = new InternalN4JSXParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclarationImpl_return retval = new InternalN4JSXParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;



            
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_30); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0()); 
            }
            int alt30=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt30=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt30=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt30=3;
                }
                break;
            case Default:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_31); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_32);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==From) && (synpred10_InternalN4JSXParser())) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_32);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_34); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0()); 
                    }

                    }


                    }
                    int alt29=2;
                    alt29 = dfa29.predict(input);
                    switch (alt29) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_32);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportFromClause_return retval = new InternalN4JSXParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSXParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;



            
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportClause_return retval = new InternalN4JSXParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0()); 
            }
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=Intersection && LA33_0<=Implements)||(LA33_0>=Promisify && LA33_0<=Abstract)||LA33_0==External||(LA33_0>=Private && LA33_0<=Project)||LA33_0==Public||LA33_0==Static||LA33_0==Target||(LA33_0>=Async && LA33_0<=Await)||LA33_0==Union||(LA33_0>=Yield && LA33_0<=This)||LA33_0==From||LA33_0==Type||(LA33_0>=Get && LA33_0<=Let)||(LA33_0>=Out && LA33_0<=Set)||LA33_0==As||LA33_0==Of||LA33_0==RULE_IDENTIFIER) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0()); 
                    }

                    }


                    }
                    loop31:
                    do {
                        int alt31=2;
                        int LA31_0 = input.LA(1);

                        if ( (LA31_0==Comma) ) {
                            int LA31_1 = input.LA(2);

                            if ( ((LA31_1>=Intersection && LA31_1<=Implements)||(LA31_1>=Promisify && LA31_1<=Abstract)||LA31_1==External||(LA31_1>=Private && LA31_1<=Project)||LA31_1==Public||LA31_1==Static||LA31_1==Target||(LA31_1>=Async && LA31_1<=Await)||LA31_1==Union||(LA31_1>=Yield && LA31_1<=This)||LA31_1==From||LA31_1==Type||(LA31_1>=Get && LA31_1<=Let)||(LA31_1>=Out && LA31_1<=Set)||LA31_1==As||LA31_1==Of||LA31_1==RULE_IDENTIFIER) ) {
                                alt31=1;
                            }


                        }


                        switch (alt31) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop31;
                        }
                    } while (true);
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==Comma) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleExportSpecifier_return retval = new InternalN4JSXParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_37);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0()); 
            }

            }


            }
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==As) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleExportableElement_return retval = new InternalN4JSXParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;



            
        try {
            {
            int alt35=6;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSXParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_39);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt50=4;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    {
                    {
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( ((LA36_0>=Protected && LA36_0<=Abstract)||LA36_0==External||(LA36_0>=Private && LA36_0<=Project)||LA36_0==Public||LA36_0==Static||LA36_0==Const) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop37:
                    do {
                        int alt37=2;
                        alt37 = dfa37.predict(input);
                        switch (alt37) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_40);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_41);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3()); 
                    }

                    }


                    }
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==Comma) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_42);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt47=2;
                    alt47 = dfa47.predict(input);
                    switch (alt47) {
                        case 1 :
                            {
                            {
                            loop39:
                            do {
                                int alt39=2;
                                int LA39_0 = input.LA(1);

                                if ( ((LA39_0>=Protected && LA39_0<=Abstract)||LA39_0==External||(LA39_0>=Private && LA39_0<=Project)||LA39_0==Public||LA39_0==Static||LA39_0==Const) ) {
                                    alt39=1;
                                }


                                switch (alt39) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop39;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2()); 
                            }
                            int alt40=2;
                            int LA40_0 = input.LA(1);

                            if ( (LA40_0==Tilde) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4()); 
                            }

                            }


                            }
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==LessThanSign) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt42=2;
                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==Implements||LA42_0==Extends) ) {
                                alt42=1;
                            }
                            switch (alt42) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop43:
                            do {
                                int alt43=2;
                                int LA43_0 = input.LA(1);

                                if ( ((LA43_0>=Protected && LA43_0<=Abstract)||LA43_0==External||(LA43_0>=Private && LA43_0<=Project)||LA43_0==Public||LA43_0==Static||LA43_0==Const) ) {
                                    alt43=1;
                                }


                                switch (alt43) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop43;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2()); 
                            }
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==Tilde) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4()); 
                            }

                            }


                            }
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==LessThanSign) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==Implements||LA46_0==Extends) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( ((LA48_0>=Protected && LA48_0<=Abstract)||LA48_0==External||(LA48_0>=Private && LA48_0<=Project)||LA48_0==Public||LA48_0==Static||LA48_0==Const) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5()); 
                    }

                    }


                    }
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==Comma) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclaration_return retval = new InternalN4JSXParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclarationImpl_return retval = new InternalN4JSXParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSXParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0()); 
            }
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=Intersection && LA51_0<=Implements)||(LA51_0>=Promisify && LA51_0<=Abstract)||LA51_0==External||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public||LA51_0==Static||LA51_0==Target||(LA51_0>=Async && LA51_0<=Await)||LA51_0==Union||(LA51_0>=Yield && LA51_0<=This)||LA51_0==From||LA51_0==Type||(LA51_0>=Get && LA51_0<=Let)||(LA51_0>=Out && LA51_0<=Set)||LA51_0==As||LA51_0==Of||LA51_0==Asterisk||LA51_0==LeftCurlyBracket||LA51_0==RULE_IDENTIFIER) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    pushFollow(FOLLOW_31);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_32);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSXParser.ruleImportClause_return retval = new InternalN4JSXParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSXParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;



            
        try {
            {
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=Intersection && LA53_0<=Implements)||(LA53_0>=Promisify && LA53_0<=Abstract)||LA53_0==External||(LA53_0>=Private && LA53_0<=Project)||LA53_0==Public||LA53_0==Static||LA53_0==Target||(LA53_0>=Async && LA53_0<=Await)||LA53_0==Union||(LA53_0>=Yield && LA53_0<=This)||LA53_0==From||LA53_0==Type||(LA53_0>=Get && LA53_0<=Let)||(LA53_0>=Out && LA53_0<=Set)||LA53_0==As||LA53_0==Of||LA53_0==RULE_IDENTIFIER) ) {
                alt53=1;
            }
            else if ( (LA53_0==Asterisk||LA53_0==LeftCurlyBracket) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0()); 
                    }

                    }


                    }
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==Comma) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0()); 
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( (LA57_0==LeftCurlyBracket) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0()); 
                    }
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( ((LA56_0>=Intersection && LA56_0<=With)||(LA56_0>=For && LA56_0<=Var)||(LA56_0>=As && LA56_0<=Of)||LA56_0==RULE_IDENTIFIER) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_27);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop54:
                            do {
                                int alt54=2;
                                int LA54_0 = input.LA(1);

                                if ( (LA54_0==Comma) ) {
                                    int LA54_1 = input.LA(2);

                                    if ( ((LA54_1>=Intersection && LA54_1<=With)||(LA54_1>=For && LA54_1<=Var)||(LA54_1>=As && LA54_1<=Of)||LA54_1==RULE_IDENTIFIER) ) {
                                        alt54=1;
                                    }


                                }


                                switch (alt54) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_38); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_27);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop54;
                                }
                            } while (true);
                            int alt55=2;
                            int LA55_0 = input.LA(1);

                            if ( (LA55_0==Comma) ) {
                                alt55=1;
                            }
                            switch (alt55) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2()); 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamedImportSpecifier_return retval = new InternalN4JSXParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0()); 
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSXParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSXParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;



            
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1()); 
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3()); 
            }

            }


            }
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==PlusSign) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleModuleSpecifier_return retval = new InternalN4JSXParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionDeclaration_return retval = new InternalN4JSXParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( ((LA60_0>=Protected && LA60_0<=Abstract)||LA60_0==External||(LA60_0>=Private && LA60_0<=Project)||LA60_0==Public||LA60_0==Static||LA60_0==Const) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt61=2;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionDeclaration_return retval = new InternalN4JSXParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0>=Protected && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Const) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Semicolon) ) {
                int LA63_1 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt63=1;
                }
            }
            else if ( (LA63_0==EOF) && (synpred22_InternalN4JSXParser())) {
                alt63=1;
            }
            else if ( (LA63_0==RULE_EOL) && (synpred22_InternalN4JSXParser())) {
                alt63=1;
            }
            else if ( (LA63_0==RULE_ML_COMMENT) && (synpred22_InternalN4JSXParser())) {
                alt63=1;
            }
            else if ( (LA63_0==RightCurlyBracket) ) {
                int LA63_5 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;



            
        try {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Async) ) {
                int LA64_1 = input.LA(2);

                if ( ((LA64_1>=Intersection && LA64_1<=With)||(LA64_1>=For && LA64_1<=Var)||(LA64_1>=As && LA64_1<=Of)||LA64_1==LeftSquareBracket||LA64_1==RULE_DOUBLE||LA64_1==RULE_HEX_INT||LA64_1==RULE_OCTAL_INT||LA64_1==RULE_SCIENTIFIC_INT||LA64_1==RULE_IDENTIFIER||LA64_1==RULE_STRING||LA64_1==RULE_NO_LINE_TERMINATOR||LA64_1==RULE_INT) ) {
                    alt64=1;
                }
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionImpl_return retval = new InternalN4JSXParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Asterisk) ) {
                alt65=1;
            }
            else if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==LeftParenthesis||LA65_0==LessThanSign||LA65_0==RULE_IDENTIFIER) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionImpl_return retval = new InternalN4JSXParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Asterisk) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=Intersection && LA66_0<=Implements)||(LA66_0>=Promisify && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Target||(LA66_0>=Async && LA66_0<=Await)||LA66_0==Union||LA66_0==This||LA66_0==From||LA66_0==Type||(LA66_0>=Get && LA66_0<=Let)||(LA66_0>=Out && LA66_0<=Set)||LA66_0==As||LA66_0==Of||LA66_0==LeftParenthesis||LA66_0==LessThanSign||LA66_0==RULE_IDENTIFIER) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_FunctionImpl_return retval = new InternalN4JSXParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==Asterisk) ) {
                alt67=1;
            }
            else if ( ((LA67_0>=Intersection && LA67_0<=Implements)||(LA67_0>=Promisify && LA67_0<=Abstract)||LA67_0==External||(LA67_0>=Private && LA67_0<=Project)||LA67_0==Public||LA67_0==Static||LA67_0==Target||(LA67_0>=Async && LA67_0<=Await)||LA67_0==Union||(LA67_0>=Yield && LA67_0<=This)||LA67_0==From||LA67_0==Type||(LA67_0>=Get && LA67_0<=Let)||(LA67_0>=Out && LA67_0<=Set)||LA67_0==As||LA67_0==Of||LA67_0==LeftParenthesis||LA67_0==LessThanSign||LA67_0==RULE_IDENTIFIER) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionHeader_return retval = new InternalN4JSXParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LessThanSign) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=Intersection && LA69_0<=Implements)||(LA69_0>=Promisify && LA69_0<=Abstract)||LA69_0==External||(LA69_0>=Private && LA69_0<=Project)||LA69_0==Public||LA69_0==Static||LA69_0==Target||(LA69_0>=Async && LA69_0<=Await)||LA69_0==Union||(LA69_0>=Yield && LA69_0<=This)||LA69_0==From||LA69_0==Type||(LA69_0>=Get && LA69_0<=Let)||(LA69_0>=Out && LA69_0<=Set)||LA69_0==As||LA69_0==Of||LA69_0==RULE_IDENTIFIER) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Colon) && (synpred23_InternalN4JSXParser())) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionHeader_return retval = new InternalN4JSXParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==LessThanSign) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=Intersection && LA72_0<=Implements)||(LA72_0>=Promisify && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Target||(LA72_0>=Async && LA72_0<=Await)||LA72_0==Union||LA72_0==This||LA72_0==From||LA72_0==Type||(LA72_0>=Get && LA72_0<=Let)||(LA72_0>=Out && LA72_0<=Set)||LA72_0==As||LA72_0==Of||LA72_0==RULE_IDENTIFIER) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Colon) && (synpred24_InternalN4JSXParser())) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionHeader_return retval = new InternalN4JSXParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LessThanSign) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( ((LA75_0>=Intersection && LA75_0<=Implements)||(LA75_0>=Promisify && LA75_0<=Abstract)||LA75_0==External||(LA75_0>=Private && LA75_0<=Project)||LA75_0==Public||LA75_0==Static||LA75_0==Target||(LA75_0>=Async && LA75_0<=Await)||LA75_0==Union||(LA75_0>=Yield && LA75_0<=This)||LA75_0==From||LA75_0==Type||(LA75_0>=Get && LA75_0<=Let)||(LA75_0>=Out && LA75_0<=Set)||LA75_0==As||LA75_0==Of||LA75_0==RULE_IDENTIFIER) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==Colon) && (synpred25_InternalN4JSXParser())) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionHeader_return retval = new InternalN4JSXParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==LessThanSign) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||LA78_0==This||LA78_0==From||LA78_0==Type||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||LA78_0==RULE_IDENTIFIER) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Colon) && (synpred26_InternalN4JSXParser())) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionBody_return retval = new InternalN4JSXParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionBody_return retval = new InternalN4JSXParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionBody_return retval = new InternalN4JSXParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionBody_return retval = new InternalN4JSXParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0>=Protected && LA82_0<=Abstract)||LA82_0==External||(LA82_0>=Private && LA82_0<=Project)||LA82_0==Public||LA82_0==Static||LA82_0==Const) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( ((LA83_0>=Protected && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Const) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionExpression_return retval = new InternalN4JSXParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSXParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0()); 
            }

            }


            }

            pushFollow(FOLLOW_57);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2()); 
            }

            }


            }

            pushFollow(FOLLOW_25);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowExpression_return retval = new InternalN4JSXParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm2_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt93=4;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==LeftParenthesis) && (synpred39_InternalN4JSXParser())) {
                alt93=1;
            }
            else if ( (LA93_0==Async) ) {
                int LA93_2 = input.LA(2);

                if ( (LA93_2==EqualsSignGreaterThanSign) ) {
                    alt93=4;
                }
                else if ( (LA93_2==RULE_NO_LINE_TERMINATOR) && (synpred40_InternalN4JSXParser())) {
                    alt93=2;
                }
                else if ( (LA93_2==LeftParenthesis) && (synpred40_InternalN4JSXParser())) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA93_0==Asterisk) && (synpred41_InternalN4JSXParser())) {
                alt93=3;
            }
            else if ( ((LA93_0>=Intersection && LA93_0<=Implements)||(LA93_0>=Promisify && LA93_0<=Abstract)||LA93_0==External||(LA93_0>=Private && LA93_0<=Project)||LA93_0==Public||LA93_0==Static||LA93_0==Target||LA93_0==Await||LA93_0==Union||(LA93_0>=Yield && LA93_0<=This)||LA93_0==From||LA93_0==Type||(LA93_0>=Get && LA93_0<=Let)||(LA93_0>=Out && LA93_0<=Set)||LA93_0==As||LA93_0==Of||LA93_0==RULE_IDENTIFIER) ) {
                alt93=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( ((LA85_0>=Intersection && LA85_0<=Implements)||(LA85_0>=Promisify && LA85_0<=Abstract)||LA85_0==External||(LA85_0>=Private && LA85_0<=Project)||LA85_0==Public||LA85_0==Static||LA85_0==Target||(LA85_0>=Async && LA85_0<=Await)||LA85_0==Union||(LA85_0>=Yield && LA85_0<=This)||LA85_0==From||LA85_0==This_1||(LA85_0>=Type && LA85_0<=Void)||LA85_0==FullStopFullStopFullStop||(LA85_0>=Get && LA85_0<=Let)||(LA85_0>=Out && LA85_0<=Set)||LA85_0==As||LA85_0==Of||(LA85_0>=QuestionMark && LA85_0<=LeftSquareBracket)||LA85_0==LeftCurlyBracket||LA85_0==Tilde||LA85_0==RULE_IDENTIFIER) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop84:
                            do {
                                int alt84=2;
                                int LA84_0 = input.LA(1);

                                if ( (LA84_0==Comma) ) {
                                    alt84=1;
                                }


                                switch (alt84) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop84;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==Colon) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( ((LA88_0>=Intersection && LA88_0<=Implements)||(LA88_0>=Promisify && LA88_0<=Abstract)||LA88_0==External||(LA88_0>=Private && LA88_0<=Project)||LA88_0==Public||LA88_0==Static||LA88_0==Target||(LA88_0>=Async && LA88_0<=Await)||LA88_0==Union||(LA88_0>=Yield && LA88_0<=This)||LA88_0==From||LA88_0==This_1||(LA88_0>=Type && LA88_0<=Void)||LA88_0==FullStopFullStopFullStop||(LA88_0>=Get && LA88_0<=Let)||(LA88_0>=Out && LA88_0<=Set)||LA88_0==As||LA88_0==Of||(LA88_0>=QuestionMark && LA88_0<=LeftSquareBracket)||LA88_0==LeftCurlyBracket||LA88_0==Tilde||LA88_0==RULE_IDENTIFIER) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop87:
                            do {
                                int alt87=2;
                                int LA87_0 = input.LA(1);

                                if ( (LA87_0==Comma) ) {
                                    alt87=1;
                                }


                                switch (alt87) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop87;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==Colon) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( ((LA91_0>=Intersection && LA91_0<=Implements)||(LA91_0>=Promisify && LA91_0<=Abstract)||LA91_0==External||(LA91_0>=Private && LA91_0<=Project)||LA91_0==Public||LA91_0==Static||LA91_0==Target||(LA91_0>=Async && LA91_0<=Await)||LA91_0==Union||(LA91_0>=Yield && LA91_0<=This)||LA91_0==From||LA91_0==This_1||(LA91_0>=Type && LA91_0<=Void)||LA91_0==FullStopFullStopFullStop||(LA91_0>=Get && LA91_0<=Let)||(LA91_0>=Out && LA91_0<=Set)||LA91_0==As||LA91_0==Of||(LA91_0>=QuestionMark && LA91_0<=LeftSquareBracket)||LA91_0==LeftCurlyBracket||LA91_0==Tilde||LA91_0==RULE_IDENTIFIER) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop90:
                            do {
                                int alt90=2;
                                int LA90_0 = input.LA(1);

                                if ( (LA90_0==Comma) ) {
                                    alt90=1;
                                }


                                switch (alt90) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop90;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==Colon) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm2_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrowExpression_return retval = new InternalN4JSXParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm3_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt104=4;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==LeftParenthesis) && (synpred47_InternalN4JSXParser())) {
                alt104=1;
            }
            else if ( (LA104_0==Async) ) {
                int LA104_2 = input.LA(2);

                if ( (LA104_2==EqualsSignGreaterThanSign) ) {
                    alt104=4;
                }
                else if ( (LA104_2==RULE_NO_LINE_TERMINATOR) && (synpred48_InternalN4JSXParser())) {
                    alt104=2;
                }
                else if ( (LA104_2==LeftParenthesis) && (synpred48_InternalN4JSXParser())) {
                    alt104=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA104_0==Asterisk) && (synpred49_InternalN4JSXParser())) {
                alt104=3;
            }
            else if ( ((LA104_0>=Intersection && LA104_0<=Implements)||(LA104_0>=Promisify && LA104_0<=Abstract)||LA104_0==External||(LA104_0>=Private && LA104_0<=Project)||LA104_0==Public||LA104_0==Static||LA104_0==Target||LA104_0==Await||LA104_0==Union||(LA104_0>=Yield && LA104_0<=This)||LA104_0==From||LA104_0==Type||(LA104_0>=Get && LA104_0<=Let)||(LA104_0>=Out && LA104_0<=Set)||LA104_0==As||LA104_0==Of||LA104_0==RULE_IDENTIFIER) ) {
                alt104=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( ((LA96_0>=Intersection && LA96_0<=Implements)||(LA96_0>=Promisify && LA96_0<=Abstract)||LA96_0==External||(LA96_0>=Private && LA96_0<=Project)||LA96_0==Public||LA96_0==Static||LA96_0==Target||(LA96_0>=Async && LA96_0<=Await)||LA96_0==Union||(LA96_0>=Yield && LA96_0<=This)||LA96_0==From||LA96_0==This_1||(LA96_0>=Type && LA96_0<=Void)||LA96_0==FullStopFullStopFullStop||(LA96_0>=Get && LA96_0<=Let)||(LA96_0>=Out && LA96_0<=Set)||LA96_0==As||LA96_0==Of||(LA96_0>=QuestionMark && LA96_0<=LeftSquareBracket)||LA96_0==LeftCurlyBracket||LA96_0==Tilde||LA96_0==RULE_IDENTIFIER) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop95:
                            do {
                                int alt95=2;
                                int LA95_0 = input.LA(1);

                                if ( (LA95_0==Comma) ) {
                                    alt95=1;
                                }


                                switch (alt95) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop95;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==Colon) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( ((LA99_0>=Intersection && LA99_0<=Implements)||(LA99_0>=Promisify && LA99_0<=Abstract)||LA99_0==External||(LA99_0>=Private && LA99_0<=Project)||LA99_0==Public||LA99_0==Static||LA99_0==Target||(LA99_0>=Async && LA99_0<=Await)||LA99_0==Union||(LA99_0>=Yield && LA99_0<=This)||LA99_0==From||LA99_0==This_1||(LA99_0>=Type && LA99_0<=Void)||LA99_0==FullStopFullStopFullStop||(LA99_0>=Get && LA99_0<=Let)||(LA99_0>=Out && LA99_0<=Set)||LA99_0==As||LA99_0==Of||(LA99_0>=QuestionMark && LA99_0<=LeftSquareBracket)||LA99_0==LeftCurlyBracket||LA99_0==Tilde||LA99_0==RULE_IDENTIFIER) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop98:
                            do {
                                int alt98=2;
                                int LA98_0 = input.LA(1);

                                if ( (LA98_0==Comma) ) {
                                    alt98=1;
                                }


                                switch (alt98) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop98;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==Colon) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( ((LA102_0>=Intersection && LA102_0<=Implements)||(LA102_0>=Promisify && LA102_0<=Abstract)||LA102_0==External||(LA102_0>=Private && LA102_0<=Project)||LA102_0==Public||LA102_0==Static||LA102_0==Target||(LA102_0>=Async && LA102_0<=Await)||LA102_0==Union||(LA102_0>=Yield && LA102_0<=This)||LA102_0==From||LA102_0==This_1||(LA102_0>=Type && LA102_0<=Void)||LA102_0==FullStopFullStopFullStop||(LA102_0>=Get && LA102_0<=Let)||(LA102_0>=Out && LA102_0<=Set)||LA102_0==As||LA102_0==Of||(LA102_0>=QuestionMark && LA102_0<=LeftSquareBracket)||LA102_0==LeftCurlyBracket||LA102_0==Tilde||LA102_0==RULE_IDENTIFIER) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop101:
                            do {
                                int alt101=2;
                                int LA101_0 = input.LA(1);

                                if ( (LA101_0==Comma) ) {
                                    alt101=1;
                                }


                                switch (alt101) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop101;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==Colon) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt105=2;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm3_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ArrowExpression_return retval = new InternalN4JSXParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm2_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt115=4;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==LeftParenthesis) && (synpred55_InternalN4JSXParser())) {
                alt115=1;
            }
            else if ( (LA115_0==Async) ) {
                int LA115_2 = input.LA(2);

                if ( (LA115_2==RULE_NO_LINE_TERMINATOR) && (synpred56_InternalN4JSXParser())) {
                    alt115=2;
                }
                else if ( (LA115_2==LeftParenthesis) && (synpred56_InternalN4JSXParser())) {
                    alt115=2;
                }
                else if ( (LA115_2==EqualsSignGreaterThanSign) ) {
                    alt115=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA115_0==Asterisk) && (synpred57_InternalN4JSXParser())) {
                alt115=3;
            }
            else if ( ((LA115_0>=Intersection && LA115_0<=Implements)||(LA115_0>=Promisify && LA115_0<=Abstract)||LA115_0==External||(LA115_0>=Private && LA115_0<=Project)||LA115_0==Public||LA115_0==Static||LA115_0==Target||LA115_0==Await||LA115_0==Union||LA115_0==This||LA115_0==From||LA115_0==Type||(LA115_0>=Get && LA115_0<=Let)||(LA115_0>=Out && LA115_0<=Set)||LA115_0==As||LA115_0==Of||LA115_0==RULE_IDENTIFIER) ) {
                alt115=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( ((LA107_0>=Intersection && LA107_0<=Implements)||(LA107_0>=Promisify && LA107_0<=Abstract)||LA107_0==External||(LA107_0>=Private && LA107_0<=Project)||LA107_0==Public||LA107_0==Static||LA107_0==Target||(LA107_0>=Async && LA107_0<=Await)||LA107_0==Union||LA107_0==This||LA107_0==From||LA107_0==This_1||(LA107_0>=Type && LA107_0<=Void)||LA107_0==FullStopFullStopFullStop||(LA107_0>=Get && LA107_0<=Let)||(LA107_0>=Out && LA107_0<=Set)||LA107_0==As||LA107_0==Of||(LA107_0>=QuestionMark && LA107_0<=LeftSquareBracket)||LA107_0==LeftCurlyBracket||LA107_0==Tilde||LA107_0==RULE_IDENTIFIER) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop106:
                            do {
                                int alt106=2;
                                int LA106_0 = input.LA(1);

                                if ( (LA106_0==Comma) ) {
                                    alt106=1;
                                }


                                switch (alt106) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop106;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Colon) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( ((LA110_0>=Intersection && LA110_0<=Implements)||(LA110_0>=Promisify && LA110_0<=Abstract)||LA110_0==External||(LA110_0>=Private && LA110_0<=Project)||LA110_0==Public||LA110_0==Static||LA110_0==Target||(LA110_0>=Async && LA110_0<=Await)||LA110_0==Union||LA110_0==This||LA110_0==From||LA110_0==This_1||(LA110_0>=Type && LA110_0<=Void)||LA110_0==FullStopFullStopFullStop||(LA110_0>=Get && LA110_0<=Let)||(LA110_0>=Out && LA110_0<=Set)||LA110_0==As||LA110_0==Of||(LA110_0>=QuestionMark && LA110_0<=LeftSquareBracket)||LA110_0==LeftCurlyBracket||LA110_0==Tilde||LA110_0==RULE_IDENTIFIER) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop109:
                            do {
                                int alt109=2;
                                int LA109_0 = input.LA(1);

                                if ( (LA109_0==Comma) ) {
                                    alt109=1;
                                }


                                switch (alt109) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop109;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==Colon) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( ((LA113_0>=Intersection && LA113_0<=Implements)||(LA113_0>=Promisify && LA113_0<=Abstract)||LA113_0==External||(LA113_0>=Private && LA113_0<=Project)||LA113_0==Public||LA113_0==Static||LA113_0==Target||(LA113_0>=Async && LA113_0<=Await)||LA113_0==Union||LA113_0==This||LA113_0==From||LA113_0==This_1||(LA113_0>=Type && LA113_0<=Void)||LA113_0==FullStopFullStopFullStop||(LA113_0>=Get && LA113_0<=Let)||(LA113_0>=Out && LA113_0<=Set)||LA113_0==As||LA113_0==Of||(LA113_0>=QuestionMark && LA113_0<=LeftSquareBracket)||LA113_0==LeftCurlyBracket||LA113_0==Tilde||LA113_0==RULE_IDENTIFIER) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop112:
                            do {
                                int alt112=2;
                                int LA112_0 = input.LA(1);

                                if ( (LA112_0==Comma) ) {
                                    alt112=1;
                                }


                                switch (alt112) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop112;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==Colon) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt116=2;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm2_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ArrowExpression_return retval = new InternalN4JSXParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm3_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt126=4;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==LeftParenthesis) && (synpred63_InternalN4JSXParser())) {
                alt126=1;
            }
            else if ( (LA126_0==Async) ) {
                int LA126_2 = input.LA(2);

                if ( (LA126_2==RULE_NO_LINE_TERMINATOR) && (synpred64_InternalN4JSXParser())) {
                    alt126=2;
                }
                else if ( (LA126_2==LeftParenthesis) && (synpred64_InternalN4JSXParser())) {
                    alt126=2;
                }
                else if ( (LA126_2==EqualsSignGreaterThanSign) ) {
                    alt126=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA126_0==Asterisk) && (synpred65_InternalN4JSXParser())) {
                alt126=3;
            }
            else if ( ((LA126_0>=Intersection && LA126_0<=Implements)||(LA126_0>=Promisify && LA126_0<=Abstract)||LA126_0==External||(LA126_0>=Private && LA126_0<=Project)||LA126_0==Public||LA126_0==Static||LA126_0==Target||LA126_0==Await||LA126_0==Union||LA126_0==This||LA126_0==From||LA126_0==Type||(LA126_0>=Get && LA126_0<=Let)||(LA126_0>=Out && LA126_0<=Set)||LA126_0==As||LA126_0==Of||LA126_0==RULE_IDENTIFIER) ) {
                alt126=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( ((LA118_0>=Intersection && LA118_0<=Implements)||(LA118_0>=Promisify && LA118_0<=Abstract)||LA118_0==External||(LA118_0>=Private && LA118_0<=Project)||LA118_0==Public||LA118_0==Static||LA118_0==Target||(LA118_0>=Async && LA118_0<=Await)||LA118_0==Union||LA118_0==This||LA118_0==From||LA118_0==This_1||(LA118_0>=Type && LA118_0<=Void)||LA118_0==FullStopFullStopFullStop||(LA118_0>=Get && LA118_0<=Let)||(LA118_0>=Out && LA118_0<=Set)||LA118_0==As||LA118_0==Of||(LA118_0>=QuestionMark && LA118_0<=LeftSquareBracket)||LA118_0==LeftCurlyBracket||LA118_0==Tilde||LA118_0==RULE_IDENTIFIER) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop117:
                            do {
                                int alt117=2;
                                int LA117_0 = input.LA(1);

                                if ( (LA117_0==Comma) ) {
                                    alt117=1;
                                }


                                switch (alt117) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop117;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==Colon) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( ((LA121_0>=Intersection && LA121_0<=Implements)||(LA121_0>=Promisify && LA121_0<=Abstract)||LA121_0==External||(LA121_0>=Private && LA121_0<=Project)||LA121_0==Public||LA121_0==Static||LA121_0==Target||(LA121_0>=Async && LA121_0<=Await)||LA121_0==Union||LA121_0==This||LA121_0==From||LA121_0==This_1||(LA121_0>=Type && LA121_0<=Void)||LA121_0==FullStopFullStopFullStop||(LA121_0>=Get && LA121_0<=Let)||(LA121_0>=Out && LA121_0<=Set)||LA121_0==As||LA121_0==Of||(LA121_0>=QuestionMark && LA121_0<=LeftSquareBracket)||LA121_0==LeftCurlyBracket||LA121_0==Tilde||LA121_0==RULE_IDENTIFIER) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop120:
                            do {
                                int alt120=2;
                                int LA120_0 = input.LA(1);

                                if ( (LA120_0==Comma) ) {
                                    alt120=1;
                                }


                                switch (alt120) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop120;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==Colon) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( ((LA124_0>=Intersection && LA124_0<=Implements)||(LA124_0>=Promisify && LA124_0<=Abstract)||LA124_0==External||(LA124_0>=Private && LA124_0<=Project)||LA124_0==Public||LA124_0==Static||LA124_0==Target||(LA124_0>=Async && LA124_0<=Await)||LA124_0==Union||LA124_0==This||LA124_0==From||LA124_0==This_1||(LA124_0>=Type && LA124_0<=Void)||LA124_0==FullStopFullStopFullStop||(LA124_0>=Get && LA124_0<=Let)||(LA124_0>=Out && LA124_0<=Set)||LA124_0==As||LA124_0==Of||(LA124_0>=QuestionMark && LA124_0<=LeftSquareBracket)||LA124_0==LeftCurlyBracket||LA124_0==Tilde||LA124_0==RULE_IDENTIFIER) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop123:
                            do {
                                int alt123=2;
                                int LA123_0 = input.LA(1);

                                if ( (LA123_0==Comma) ) {
                                    alt123=1;
                                }


                                switch (alt123) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop123;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==Colon) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm3_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.ruleStrictFormalParameters_return retval = new InternalN4JSXParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=Intersection && LA129_0<=Implements)||(LA129_0>=Promisify && LA129_0<=Abstract)||LA129_0==External||(LA129_0>=Private && LA129_0<=Project)||LA129_0==Public||LA129_0==Static||LA129_0==Target||(LA129_0>=Async && LA129_0<=Await)||LA129_0==Union||(LA129_0>=Yield && LA129_0<=This)||LA129_0==From||LA129_0==This_1||(LA129_0>=Type && LA129_0<=Void)||LA129_0==FullStopFullStopFullStop||(LA129_0>=Get && LA129_0<=Let)||(LA129_0>=Out && LA129_0<=Set)||LA129_0==As||LA129_0==Of||(LA129_0>=QuestionMark && LA129_0<=LeftSquareBracket)||LA129_0==LeftCurlyBracket||LA129_0==Tilde||LA129_0==RULE_IDENTIFIER) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==Comma) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.norm1_StrictFormalParameters_return retval = new InternalN4JSXParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=Intersection && LA131_0<=Implements)||(LA131_0>=Promisify && LA131_0<=Abstract)||LA131_0==External||(LA131_0>=Private && LA131_0<=Project)||LA131_0==Public||LA131_0==Static||LA131_0==Target||(LA131_0>=Async && LA131_0<=Await)||LA131_0==Union||LA131_0==This||LA131_0==From||LA131_0==This_1||(LA131_0>=Type && LA131_0<=Void)||LA131_0==FullStopFullStopFullStop||(LA131_0>=Get && LA131_0<=Let)||(LA131_0>=Out && LA131_0<=Set)||LA131_0==As||LA131_0==Of||(LA131_0>=QuestionMark && LA131_0<=LeftSquareBracket)||LA131_0==LeftCurlyBracket||LA131_0==Tilde||LA131_0==RULE_IDENTIFIER) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==Comma) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.norm1_BlockMinusBraces_return retval = new InternalN4JSXParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( ((LA132_0>=Intersection && LA132_0<=Implements)||(LA132_0>=Promisify && LA132_0<=Function)||(LA132_0>=Private && LA132_0<=Delete)||(LA132_0>=Public && LA132_0<=Break)||(LA132_0>=Class && LA132_0<=This)||(LA132_0>=From && LA132_0<=With)||(LA132_0>=For && LA132_0<=Var)||LA132_0==PlusSignPlusSign||LA132_0==HyphenMinusHyphenMinus||LA132_0==SolidusEqualsSign||(LA132_0>=As && LA132_0<=If)||LA132_0==Of||LA132_0==ExclamationMark||LA132_0==LeftParenthesis||(LA132_0>=Asterisk && LA132_0<=PlusSign)||LA132_0==HyphenMinus||LA132_0==Solidus||(LA132_0>=Semicolon && LA132_0<=LessThanSign)||(LA132_0>=CommercialAt && LA132_0<=LeftSquareBracket)||LA132_0==LeftCurlyBracket||LA132_0==Tilde||LA132_0==RULE_DOUBLE||(LA132_0>=RULE_HEX_INT && LA132_0<=RULE_LEGACY_OCTAL_INT)||LA132_0==RULE_SCIENTIFIC_INT||LA132_0==RULE_IDENTIFIER||LA132_0==RULE_STRING||(LA132_0>=RULE_TEMPLATE_HEAD && LA132_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA132_0==RULE_INT) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ExpressionDisguisedAsBlock_return norm2_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.norm2_ExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.norm2_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm2_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ExpressionDisguisedAsBlock_return norm3_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.norm3_ExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.norm3_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm3_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm2_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AssignmentExpressionStatement_return norm2_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm2_AssignmentExpressionStatement_return retval = new InternalN4JSXParser.norm2_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AssignmentExpressionStatement_return norm3_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm3_AssignmentExpressionStatement_return retval = new InternalN4JSXParser.norm3_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExpression_return retval = new InternalN4JSXParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==Class) ) {
                alt135=1;
            }
            else if ( (LA135_0==Function||LA135_0==Async) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( ((LA133_0>=Intersection && LA133_0<=Constructor)||(LA133_0>=Promisify && LA133_0<=Abstract)||LA133_0==External||(LA133_0>=Private && LA133_0<=Project)||LA133_0==Public||LA133_0==Static||LA133_0==Target||(LA133_0>=Async && LA133_0<=Await)||LA133_0==Union||(LA133_0>=Yield && LA133_0<=This)||LA133_0==From||LA133_0==Type||(LA133_0>=Get && LA133_0<=Let)||(LA133_0>=Out && LA133_0<=Set)||LA133_0==As||LA133_0==Of||LA133_0==RULE_IDENTIFIER) ) {
                        alt133=1;
                    }
                    else if ( (LA133_0==Implements) ) {
                        int LA133_2 = input.LA(2);

                        if ( (LA133_2==Implements||LA133_2==Extends||LA133_2==LeftCurlyBracket) ) {
                            alt133=1;
                        }
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==Implements||LA134_0==Extends) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_22);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedExpression_return retval = new InternalN4JSXParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==Class) ) {
                alt138=1;
            }
            else if ( (LA138_0==Function||LA138_0==Async) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( ((LA136_0>=Intersection && LA136_0<=Constructor)||(LA136_0>=Promisify && LA136_0<=Abstract)||LA136_0==External||(LA136_0>=Private && LA136_0<=Project)||LA136_0==Public||LA136_0==Static||LA136_0==Target||(LA136_0>=Async && LA136_0<=Await)||LA136_0==Union||LA136_0==This||LA136_0==From||LA136_0==Type||(LA136_0>=Get && LA136_0<=Let)||(LA136_0>=Out && LA136_0<=Set)||LA136_0==As||LA136_0==Of||LA136_0==RULE_IDENTIFIER) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==Implements) ) {
                        int LA136_2 = input.LA(2);

                        if ( (LA136_2==Implements||LA136_2==Extends||LA136_2==LeftCurlyBracket) ) {
                            alt136=1;
                        }
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_68);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==Implements||LA137_0==Extends) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_68);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariable_return retval = new InternalN4JSXParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt139=3;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==Out) ) {
                alt139=1;
            }
            else if ( (LA139_0==In) ) {
                alt139=2;
            }
            switch (alt139) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_69);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1()); 
            }

            }


            }
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==Extends) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleFormalParameter_return retval = new InternalN4JSXParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_FormalParameter_return retval = new InternalN4JSXParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElementFragment_return retval = new InternalN4JSXParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==CommercialAt) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_70);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);
                    int alt142=2;
                    alt142 = dfa142.predict(input);
                    switch (alt142) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_71);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==FullStopFullStopFullStop) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_72);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==Colon) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_16);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==EqualsSign) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElementFragment_return retval = new InternalN4JSXParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt151=2;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==CommercialAt) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_70);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop147;
                        }
                    } while (true);
                    int alt148=2;
                    alt148 = dfa148.predict(input);
                    switch (alt148) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_71);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==FullStopFullStopFullStop) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_72);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==Colon) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_16);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==EqualsSign) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleColonSepTypeRef_return retval = new InternalN4JSXParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;



            
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBogusTypeRefFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRefFragment_return ruleBogusTypeRefFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRefFragment_return retval = new InternalN4JSXParser.ruleBogusTypeRefFragment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBogusTypeRef_return BogusTypeRefBogusTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BogusTypeRefBogusTypeRefParserRuleCall_0=ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.start):null), (BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.stop):null), grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSXParser.ruleBlock_return retval = new InternalN4JSXParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( ((LA153_0>=Intersection && LA153_0<=Implements)||(LA153_0>=Promisify && LA153_0<=Function)||(LA153_0>=Private && LA153_0<=Delete)||(LA153_0>=Public && LA153_0<=Break)||(LA153_0>=Class && LA153_0<=This)||(LA153_0>=From && LA153_0<=With)||(LA153_0>=For && LA153_0<=Var)||LA153_0==PlusSignPlusSign||LA153_0==HyphenMinusHyphenMinus||LA153_0==SolidusEqualsSign||(LA153_0>=As && LA153_0<=If)||LA153_0==Of||LA153_0==ExclamationMark||LA153_0==LeftParenthesis||(LA153_0>=Asterisk && LA153_0<=PlusSign)||LA153_0==HyphenMinus||LA153_0==Solidus||(LA153_0>=Semicolon && LA153_0<=LessThanSign)||(LA153_0>=CommercialAt && LA153_0<=LeftSquareBracket)||LA153_0==LeftCurlyBracket||LA153_0==Tilde||LA153_0==RULE_DOUBLE||(LA153_0>=RULE_HEX_INT && LA153_0<=RULE_LEGACY_OCTAL_INT)||LA153_0==RULE_SCIENTIFIC_INT||LA153_0==RULE_IDENTIFIER||LA153_0==RULE_STRING||(LA153_0>=RULE_TEMPLATE_HEAD && LA153_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA153_0==RULE_INT) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSXParser.norm1_Block_return retval = new InternalN4JSXParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( ((LA154_0>=Intersection && LA154_0<=Implements)||(LA154_0>=Promisify && LA154_0<=Function)||(LA154_0>=Private && LA154_0<=Delete)||(LA154_0>=Public && LA154_0<=Break)||(LA154_0>=Class && LA154_0<=This)||(LA154_0>=From && LA154_0<=With)||(LA154_0>=For && LA154_0<=Var)||LA154_0==PlusSignPlusSign||LA154_0==HyphenMinusHyphenMinus||LA154_0==SolidusEqualsSign||(LA154_0>=As && LA154_0<=If)||LA154_0==Of||LA154_0==ExclamationMark||LA154_0==LeftParenthesis||(LA154_0>=Asterisk && LA154_0<=PlusSign)||LA154_0==HyphenMinus||LA154_0==Solidus||(LA154_0>=Semicolon && LA154_0<=LessThanSign)||(LA154_0>=CommercialAt && LA154_0<=LeftSquareBracket)||LA154_0==LeftCurlyBracket||LA154_0==Tilde||LA154_0==RULE_DOUBLE||(LA154_0>=RULE_HEX_INT && LA154_0<=RULE_LEGACY_OCTAL_INT)||LA154_0==RULE_SCIENTIFIC_INT||LA154_0==RULE_IDENTIFIER||LA154_0==RULE_STRING||(LA154_0>=RULE_TEMPLATE_HEAD && LA154_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA154_0==RULE_INT) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSXParser.ruleRootStatement_return retval = new InternalN4JSXParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt155=16;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_RootStatement_return retval = new InternalN4JSXParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt156=16;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSXParser.ruleStatement_return retval = new InternalN4JSXParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSXParser.norm1_Statement_return retval = new InternalN4JSXParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt158=2;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableStatement_return retval = new InternalN4JSXParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==Comma) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableStatement_return retval = new InternalN4JSXParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==Comma) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableStatement_return retval = new InternalN4JSXParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_40);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3()); 
            }

            }


            }
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==Comma) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==LeftCurlyBracket) && (synpred83_InternalN4JSXParser())) {
                alt163=1;
            }
            else if ( (LA163_0==LeftSquareBracket) && (synpred83_InternalN4JSXParser())) {
                alt163=1;
            }
            else if ( ((LA163_0>=Intersection && LA163_0<=Implements)||(LA163_0>=Promisify && LA163_0<=Abstract)||LA163_0==External||(LA163_0>=Private && LA163_0<=Project)||LA163_0==Public||LA163_0==Static||LA163_0==Target||(LA163_0>=Async && LA163_0<=Await)||LA163_0==Union||(LA163_0>=Yield && LA163_0<=This)||LA163_0==From||LA163_0==Type||(LA163_0>=Get && LA163_0<=Let)||(LA163_0>=Out && LA163_0<=Set)||LA163_0==As||LA163_0==Of||LA163_0==CommercialAt||LA163_0==RULE_IDENTIFIER) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==LeftCurlyBracket) && (synpred84_InternalN4JSXParser())) {
                alt164=1;
            }
            else if ( (LA164_0==LeftSquareBracket) && (synpred84_InternalN4JSXParser())) {
                alt164=1;
            }
            else if ( ((LA164_0>=Intersection && LA164_0<=Implements)||(LA164_0>=Promisify && LA164_0<=Abstract)||LA164_0==External||(LA164_0>=Private && LA164_0<=Project)||LA164_0==Public||LA164_0==Static||LA164_0==Target||(LA164_0>=Async && LA164_0<=Await)||LA164_0==Union||(LA164_0>=Yield && LA164_0<=This)||LA164_0==From||LA164_0==Type||(LA164_0>=Get && LA164_0<=Let)||(LA164_0>=Out && LA164_0<=Set)||LA164_0==As||LA164_0==Of||LA164_0==CommercialAt||LA164_0==RULE_IDENTIFIER) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LeftCurlyBracket) && (synpred85_InternalN4JSXParser())) {
                alt165=1;
            }
            else if ( (LA165_0==LeftSquareBracket) && (synpred85_InternalN4JSXParser())) {
                alt165=1;
            }
            else if ( ((LA165_0>=Intersection && LA165_0<=Implements)||(LA165_0>=Promisify && LA165_0<=Abstract)||LA165_0==External||(LA165_0>=Private && LA165_0<=Project)||LA165_0==Public||LA165_0==Static||LA165_0==Target||(LA165_0>=Async && LA165_0<=Await)||LA165_0==Union||LA165_0==This||LA165_0==From||LA165_0==Type||(LA165_0>=Get && LA165_0<=Let)||(LA165_0>=Out && LA165_0<=Set)||LA165_0==As||LA165_0==Of||LA165_0==CommercialAt||LA165_0==RULE_IDENTIFIER) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LeftCurlyBracket) && (synpred86_InternalN4JSXParser())) {
                alt166=1;
            }
            else if ( (LA166_0==LeftSquareBracket) && (synpred86_InternalN4JSXParser())) {
                alt166=1;
            }
            else if ( ((LA166_0>=Intersection && LA166_0<=Implements)||(LA166_0>=Promisify && LA166_0<=Abstract)||LA166_0==External||(LA166_0>=Private && LA166_0<=Project)||LA166_0==Public||LA166_0==Static||LA166_0==Target||(LA166_0>=Async && LA166_0<=Await)||LA166_0==Union||LA166_0==This||LA166_0==From||LA166_0==Type||(LA166_0>=Get && LA166_0<=Let)||(LA166_0>=Out && LA166_0<=Set)||LA166_0==As||LA166_0==Of||LA166_0==CommercialAt||LA166_0==RULE_IDENTIFIER) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==LeftCurlyBracket) && (synpred87_InternalN4JSXParser())) {
                alt167=1;
            }
            else if ( (LA167_0==LeftSquareBracket) && (synpred87_InternalN4JSXParser())) {
                alt167=1;
            }
            else if ( ((LA167_0>=Intersection && LA167_0<=Implements)||(LA167_0>=Promisify && LA167_0<=Abstract)||LA167_0==External||(LA167_0>=Private && LA167_0<=Project)||LA167_0==Public||LA167_0==Static||LA167_0==Target||(LA167_0>=Async && LA167_0<=Await)||LA167_0==Union||(LA167_0>=Yield && LA167_0<=This)||LA167_0==From||LA167_0==Type||(LA167_0>=Get && LA167_0<=Let)||(LA167_0>=Out && LA167_0<=Set)||LA167_0==As||LA167_0==Of||LA167_0==CommercialAt||LA167_0==RULE_IDENTIFIER) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==LeftCurlyBracket) && (synpred88_InternalN4JSXParser())) {
                alt168=1;
            }
            else if ( (LA168_0==LeftSquareBracket) && (synpred88_InternalN4JSXParser())) {
                alt168=1;
            }
            else if ( ((LA168_0>=Intersection && LA168_0<=Implements)||(LA168_0>=Promisify && LA168_0<=Abstract)||LA168_0==External||(LA168_0>=Private && LA168_0<=Project)||LA168_0==Public||LA168_0==Static||LA168_0==Target||(LA168_0>=Async && LA168_0<=Await)||LA168_0==Union||LA168_0==This||LA168_0==From||LA168_0==Type||(LA168_0>=Get && LA168_0<=Let)||(LA168_0>=Out && LA168_0<=Set)||LA168_0==As||LA168_0==Of||LA168_0==CommercialAt||LA168_0==RULE_IDENTIFIER) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableBinding_return retval = new InternalN4JSXParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableBinding_return retval = new InternalN4JSXParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableBinding_return retval = new InternalN4JSXParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableBinding_return retval = new InternalN4JSXParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableBinding_return retval = new InternalN4JSXParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==EqualsSign) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==EqualsSign) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableBinding_return retval = new InternalN4JSXParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==EqualsSign) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==EqualsSign) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclaration_return retval = new InternalN4JSXParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclaration_return retval = new InternalN4JSXParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclaration_return retval = new InternalN4JSXParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return retval = new InternalN4JSXParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclaration_return retval = new InternalN4JSXParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return retval = new InternalN4JSXParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop173:
            do {
                int alt173=2;
                alt173 = dfa173.predict(input);
                switch (alt173) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==EqualsSign) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop175:
            do {
                int alt175=2;
                alt175 = dfa175.predict(input);
                switch (alt175) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==EqualsSign) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop177:
            do {
                int alt177=2;
                alt177 = dfa177.predict(input);
                switch (alt177) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==EqualsSign) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop179:
            do {
                int alt179=2;
                alt179 = dfa179.predict(input);
                switch (alt179) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==EqualsSign) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop181:
            do {
                int alt181=2;
                alt181 = dfa181.predict(input);
                switch (alt181) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==Colon) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==EqualsSign) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop184:
            do {
                int alt184=2;
                alt184 = dfa184.predict(input);
                switch (alt184) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==Colon) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==EqualsSign) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop187:
            do {
                int alt187=2;
                alt187 = dfa187.predict(input);
                switch (alt187) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==Colon) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==EqualsSign) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop190:
            do {
                int alt190=2;
                alt190 = dfa190.predict(input);
                switch (alt190) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==Colon) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==EqualsSign) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==LeftCurlyBracket) && (synpred105_InternalN4JSXParser())) {
                alt193=1;
            }
            else if ( (LA193_0==LeftSquareBracket) && (synpred105_InternalN4JSXParser())) {
                alt193=1;
            }
            else if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||LA193_0==External||(LA193_0>=Private && LA193_0<=Project)||LA193_0==Public||LA193_0==Static||LA193_0==Target||(LA193_0>=Async && LA193_0<=Await)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||LA193_0==From||LA193_0==Type||(LA193_0>=Get && LA193_0<=Let)||(LA193_0>=Out && LA193_0<=Set)||LA193_0==As||LA193_0==Of||LA193_0==CommercialAt||LA193_0==RULE_IDENTIFIER) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }
            switch (alt193) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==LeftCurlyBracket) && (synpred106_InternalN4JSXParser())) {
                alt194=1;
            }
            else if ( (LA194_0==LeftSquareBracket) && (synpred106_InternalN4JSXParser())) {
                alt194=1;
            }
            else if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||LA194_0==External||(LA194_0>=Private && LA194_0<=Project)||LA194_0==Public||LA194_0==Static||LA194_0==Target||(LA194_0>=Async && LA194_0<=Await)||LA194_0==Union||LA194_0==This||LA194_0==From||LA194_0==Type||(LA194_0>=Get && LA194_0<=Let)||(LA194_0>=Out && LA194_0<=Set)||LA194_0==As||LA194_0==Of||LA194_0==CommercialAt||LA194_0==RULE_IDENTIFIER) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableBinding_return retval = new InternalN4JSXParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSXParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSXParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSXParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSXParser.ruleEmptyStatement_return retval = new InternalN4JSXParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;


            
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionStatement_return retval = new InternalN4JSXParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionStatement_return retval = new InternalN4JSXParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIfStatement_return retval = new InternalN4JSXParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_77);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==Else) ) {
                int LA195_1 = input.LA(2);

                if ( (synpred109_InternalN4JSXParser()) ) {
                    alt195=1;
                }
            }
            switch (alt195) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IfStatement_return retval = new InternalN4JSXParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_77);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==Else) ) {
                int LA196_1 = input.LA(2);

                if ( (synpred110_InternalN4JSXParser()) ) {
                    alt196=1;
                }
            }
            switch (alt196) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIterationStatement_return retval = new InternalN4JSXParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt197=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt197=1;
                }
                break;
            case While:
                {
                alt197=2;
                }
                break;
            case For:
                {
                alt197=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IterationStatement_return retval = new InternalN4JSXParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt198=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt198=1;
                }
                break;
            case While:
                {
                alt198=2;
                }
                break;
            case For:
                {
                alt198=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDoStatement_return retval = new InternalN4JSXParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_78);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt199=2;
            alt199 = dfa199.predict(input);
            switch (alt199) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_DoStatement_return retval = new InternalN4JSXParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_78);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==Semicolon) ) {
                int LA200_1 = input.LA(2);

                if ( (synpred112_InternalN4JSXParser()) ) {
                    alt200=1;
                }
            }
            else if ( (LA200_0==EOF) && (synpred112_InternalN4JSXParser())) {
                alt200=1;
            }
            else if ( (LA200_0==RULE_EOL) && (synpred112_InternalN4JSXParser())) {
                alt200=1;
            }
            else if ( (LA200_0==RULE_ML_COMMENT) && (synpred112_InternalN4JSXParser())) {
                alt200=1;
            }
            else if ( (LA200_0==RightCurlyBracket) ) {
                int LA200_5 = input.LA(2);

                if ( (synpred112_InternalN4JSXParser()) ) {
                    alt200=1;
                }
            }
            switch (alt200) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWhileStatement_return retval = new InternalN4JSXParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WhileStatement_return retval = new InternalN4JSXParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSXParser.ruleForStatement_return retval = new InternalN4JSXParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt218=2;
            alt218 = dfa218.predict(input);
            switch (alt218) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt217=3;
                    alt217 = dfa217.predict(input);
                    switch (alt217) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt209=2;
                            alt209 = dfa209.predict(input);
                            switch (alt209) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt201=2;
                                    int LA201_0 = input.LA(1);

                                    if ( (LA201_0==In) ) {
                                        alt201=1;
                                    }
                                    else if ( (LA201_0==Of) ) {
                                        alt201=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 201, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt201) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt202=2;
                                    alt202 = dfa202.predict(input);
                                    switch (alt202) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt208=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt208=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt208=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt208=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 208, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt208) {
                                        case 1 :
                                            {
                                            {
                                            loop203:
                                            do {
                                                int alt203=2;
                                                int LA203_0 = input.LA(1);

                                                if ( (LA203_0==Comma) ) {
                                                    alt203=1;
                                                }


                                                switch (alt203) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop203;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt204=2;
                                            int LA204_0 = input.LA(1);

                                            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||LA204_0==Public||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||LA204_0==HyphenMinusHyphenMinus||LA204_0==SolidusEqualsSign||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||(LA204_0>=Asterisk && LA204_0<=PlusSign)||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                                                alt204=1;
                                            }
                                            switch (alt204) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt205=2;
                                            int LA205_0 = input.LA(1);

                                            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||LA205_0==Public||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||(LA205_0>=Get && LA205_0<=Set)||LA205_0==PlusSignPlusSign||LA205_0==HyphenMinusHyphenMinus||LA205_0==SolidusEqualsSign||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||(LA205_0>=Asterisk && LA205_0<=PlusSign)||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {
                                                alt205=1;
                                            }
                                            switch (alt205) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt206=2;
                                            int LA206_0 = input.LA(1);

                                            if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||(LA206_0>=External && LA206_0<=Function)||(LA206_0>=Private && LA206_0<=Delete)||LA206_0==Public||LA206_0==Static||(LA206_0>=Target && LA206_0<=Await)||LA206_0==Class||(LA206_0>=False && LA206_0<=Super)||LA206_0==Union||(LA206_0>=Yield && LA206_0<=This)||(LA206_0>=From && LA206_0<=Void)||(LA206_0>=Get && LA206_0<=Set)||LA206_0==PlusSignPlusSign||LA206_0==HyphenMinusHyphenMinus||LA206_0==SolidusEqualsSign||LA206_0==As||LA206_0==Of||LA206_0==ExclamationMark||LA206_0==LeftParenthesis||(LA206_0>=Asterisk && LA206_0<=PlusSign)||LA206_0==HyphenMinus||LA206_0==Solidus||LA206_0==LessThanSign||(LA206_0>=CommercialAt && LA206_0<=LeftSquareBracket)||LA206_0==LeftCurlyBracket||LA206_0==Tilde||LA206_0==RULE_DOUBLE||(LA206_0>=RULE_HEX_INT && LA206_0<=RULE_LEGACY_OCTAL_INT)||LA206_0==RULE_SCIENTIFIC_INT||LA206_0==RULE_IDENTIFIER||LA206_0==RULE_STRING||(LA206_0>=RULE_TEMPLATE_HEAD && LA206_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA206_0==RULE_INT) ) {
                                                alt206=1;
                                            }
                                            switch (alt206) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt207=2;
                                            int LA207_0 = input.LA(1);

                                            if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||(LA207_0>=External && LA207_0<=Function)||(LA207_0>=Private && LA207_0<=Delete)||LA207_0==Public||LA207_0==Static||(LA207_0>=Target && LA207_0<=Await)||LA207_0==Class||(LA207_0>=False && LA207_0<=Super)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||(LA207_0>=From && LA207_0<=Void)||(LA207_0>=Get && LA207_0<=Set)||LA207_0==PlusSignPlusSign||LA207_0==HyphenMinusHyphenMinus||LA207_0==SolidusEqualsSign||LA207_0==As||LA207_0==Of||LA207_0==ExclamationMark||LA207_0==LeftParenthesis||(LA207_0>=Asterisk && LA207_0<=PlusSign)||LA207_0==HyphenMinus||LA207_0==Solidus||LA207_0==LessThanSign||(LA207_0>=CommercialAt && LA207_0<=LeftSquareBracket)||LA207_0==LeftCurlyBracket||LA207_0==Tilde||LA207_0==RULE_DOUBLE||(LA207_0>=RULE_HEX_INT && LA207_0<=RULE_LEGACY_OCTAL_INT)||LA207_0==RULE_SCIENTIFIC_INT||LA207_0==RULE_IDENTIFIER||LA207_0==RULE_STRING||(LA207_0>=RULE_TEMPLATE_HEAD && LA207_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA207_0==RULE_INT) ) {
                                                alt207=1;
                                            }
                                            switch (alt207) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt214=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt214=1;
                                }
                                break;
                            case In:
                                {
                                alt214=2;
                                }
                                break;
                            case Of:
                                {
                                alt214=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 0, input);

                                throw nvae;
                            }

                            switch (alt214) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt210=2;
                                    int LA210_0 = input.LA(1);

                                    if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||LA210_0==Public||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||LA210_0==HyphenMinusHyphenMinus||LA210_0==SolidusEqualsSign||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||(LA210_0>=Asterisk && LA210_0<=PlusSign)||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_HEX_INT && LA210_0<=RULE_LEGACY_OCTAL_INT)||LA210_0==RULE_SCIENTIFIC_INT||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_STRING||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_INT) ) {
                                        alt210=1;
                                    }
                                    switch (alt210) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt211=2;
                                    int LA211_0 = input.LA(1);

                                    if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||LA211_0==Public||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||LA211_0==HyphenMinusHyphenMinus||LA211_0==SolidusEqualsSign||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||(LA211_0>=Asterisk && LA211_0<=PlusSign)||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                        alt211=1;
                                    }
                                    switch (alt211) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt212=2;
                                    int LA212_0 = input.LA(1);

                                    if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||LA212_0==Public||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||LA212_0==HyphenMinusHyphenMinus||LA212_0==SolidusEqualsSign||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||(LA212_0>=Asterisk && LA212_0<=PlusSign)||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                                        alt212=1;
                                    }
                                    switch (alt212) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt213=2;
                                    int LA213_0 = input.LA(1);

                                    if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||LA213_0==Public||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||(LA213_0>=Asterisk && LA213_0<=PlusSign)||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                        alt213=1;
                                    }
                                    switch (alt213) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt215=2;
                            int LA215_0 = input.LA(1);

                            if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||LA215_0==Public||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||(LA215_0>=Get && LA215_0<=Set)||LA215_0==PlusSignPlusSign||LA215_0==HyphenMinusHyphenMinus||LA215_0==SolidusEqualsSign||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||(LA215_0>=Asterisk && LA215_0<=PlusSign)||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_HEX_INT && LA215_0<=RULE_LEGACY_OCTAL_INT)||LA215_0==RULE_SCIENTIFIC_INT||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_STRING||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_INT) ) {
                                alt215=1;
                            }
                            switch (alt215) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt216=2;
                            int LA216_0 = input.LA(1);

                            if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||LA216_0==Public||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||(LA216_0>=Get && LA216_0<=Set)||LA216_0==PlusSignPlusSign||LA216_0==HyphenMinusHyphenMinus||LA216_0==SolidusEqualsSign||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||(LA216_0>=Asterisk && LA216_0<=PlusSign)||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_HEX_INT && LA216_0<=RULE_LEGACY_OCTAL_INT)||LA216_0==RULE_SCIENTIFIC_INT||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_STRING||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_INT) ) {
                                alt216=1;
                            }
                            switch (alt216) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_75);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ForStatement_return retval = new InternalN4JSXParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt236=2;
            alt236 = dfa236.predict(input);
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt235=3;
                    alt235 = dfa235.predict(input);
                    switch (alt235) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt227=2;
                            alt227 = dfa227.predict(input);
                            switch (alt227) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt219=2;
                                    int LA219_0 = input.LA(1);

                                    if ( (LA219_0==In) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_0==Of) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt219) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt220=2;
                                    alt220 = dfa220.predict(input);
                                    switch (alt220) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt226=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt226=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt226=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt226=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 226, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt226) {
                                        case 1 :
                                            {
                                            {
                                            loop221:
                                            do {
                                                int alt221=2;
                                                int LA221_0 = input.LA(1);

                                                if ( (LA221_0==Comma) ) {
                                                    alt221=1;
                                                }


                                                switch (alt221) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop221;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt222=2;
                                            int LA222_0 = input.LA(1);

                                            if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||LA222_0==Public||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||(LA222_0>=Get && LA222_0<=Set)||LA222_0==PlusSignPlusSign||LA222_0==HyphenMinusHyphenMinus||LA222_0==SolidusEqualsSign||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||(LA222_0>=Asterisk && LA222_0<=PlusSign)||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {
                                                alt222=1;
                                            }
                                            switch (alt222) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt223=2;
                                            int LA223_0 = input.LA(1);

                                            if ( ((LA223_0>=Intersection && LA223_0<=Implements)||(LA223_0>=Promisify && LA223_0<=Abstract)||(LA223_0>=External && LA223_0<=Function)||(LA223_0>=Private && LA223_0<=Delete)||LA223_0==Public||LA223_0==Static||(LA223_0>=Target && LA223_0<=Await)||LA223_0==Class||(LA223_0>=False && LA223_0<=Super)||LA223_0==Union||(LA223_0>=Yield && LA223_0<=This)||(LA223_0>=From && LA223_0<=Void)||(LA223_0>=Get && LA223_0<=Set)||LA223_0==PlusSignPlusSign||LA223_0==HyphenMinusHyphenMinus||LA223_0==SolidusEqualsSign||LA223_0==As||LA223_0==Of||LA223_0==ExclamationMark||LA223_0==LeftParenthesis||(LA223_0>=Asterisk && LA223_0<=PlusSign)||LA223_0==HyphenMinus||LA223_0==Solidus||LA223_0==LessThanSign||(LA223_0>=CommercialAt && LA223_0<=LeftSquareBracket)||LA223_0==LeftCurlyBracket||LA223_0==Tilde||LA223_0==RULE_DOUBLE||(LA223_0>=RULE_HEX_INT && LA223_0<=RULE_LEGACY_OCTAL_INT)||LA223_0==RULE_SCIENTIFIC_INT||LA223_0==RULE_IDENTIFIER||LA223_0==RULE_STRING||(LA223_0>=RULE_TEMPLATE_HEAD && LA223_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA223_0==RULE_INT) ) {
                                                alt223=1;
                                            }
                                            switch (alt223) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt224=2;
                                            int LA224_0 = input.LA(1);

                                            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||(LA224_0>=External && LA224_0<=Function)||(LA224_0>=Private && LA224_0<=Delete)||LA224_0==Public||LA224_0==Static||(LA224_0>=Target && LA224_0<=Await)||LA224_0==Class||(LA224_0>=False && LA224_0<=Super)||LA224_0==Union||(LA224_0>=Yield && LA224_0<=This)||(LA224_0>=From && LA224_0<=Void)||(LA224_0>=Get && LA224_0<=Set)||LA224_0==PlusSignPlusSign||LA224_0==HyphenMinusHyphenMinus||LA224_0==SolidusEqualsSign||LA224_0==As||LA224_0==Of||LA224_0==ExclamationMark||LA224_0==LeftParenthesis||(LA224_0>=Asterisk && LA224_0<=PlusSign)||LA224_0==HyphenMinus||LA224_0==Solidus||LA224_0==LessThanSign||(LA224_0>=CommercialAt && LA224_0<=LeftSquareBracket)||LA224_0==LeftCurlyBracket||LA224_0==Tilde||LA224_0==RULE_DOUBLE||(LA224_0>=RULE_HEX_INT && LA224_0<=RULE_LEGACY_OCTAL_INT)||LA224_0==RULE_SCIENTIFIC_INT||LA224_0==RULE_IDENTIFIER||LA224_0==RULE_STRING||(LA224_0>=RULE_TEMPLATE_HEAD && LA224_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA224_0==RULE_INT) ) {
                                                alt224=1;
                                            }
                                            switch (alt224) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt225=2;
                                            int LA225_0 = input.LA(1);

                                            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||(LA225_0>=External && LA225_0<=Function)||(LA225_0>=Private && LA225_0<=Delete)||LA225_0==Public||LA225_0==Static||(LA225_0>=Target && LA225_0<=Await)||LA225_0==Class||(LA225_0>=False && LA225_0<=Super)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||(LA225_0>=From && LA225_0<=Void)||(LA225_0>=Get && LA225_0<=Set)||LA225_0==PlusSignPlusSign||LA225_0==HyphenMinusHyphenMinus||LA225_0==SolidusEqualsSign||LA225_0==As||LA225_0==Of||LA225_0==ExclamationMark||LA225_0==LeftParenthesis||(LA225_0>=Asterisk && LA225_0<=PlusSign)||LA225_0==HyphenMinus||LA225_0==Solidus||LA225_0==LessThanSign||(LA225_0>=CommercialAt && LA225_0<=LeftSquareBracket)||LA225_0==LeftCurlyBracket||LA225_0==Tilde||LA225_0==RULE_DOUBLE||(LA225_0>=RULE_HEX_INT && LA225_0<=RULE_LEGACY_OCTAL_INT)||LA225_0==RULE_SCIENTIFIC_INT||LA225_0==RULE_IDENTIFIER||LA225_0==RULE_STRING||(LA225_0>=RULE_TEMPLATE_HEAD && LA225_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA225_0==RULE_INT) ) {
                                                alt225=1;
                                            }
                                            switch (alt225) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt232=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt232=1;
                                }
                                break;
                            case In:
                                {
                                alt232=2;
                                }
                                break;
                            case Of:
                                {
                                alt232=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 232, 0, input);

                                throw nvae;
                            }

                            switch (alt232) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt228=2;
                                    int LA228_0 = input.LA(1);

                                    if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||(LA228_0>=External && LA228_0<=Function)||(LA228_0>=Private && LA228_0<=Delete)||LA228_0==Public||LA228_0==Static||(LA228_0>=Target && LA228_0<=Await)||LA228_0==Class||(LA228_0>=False && LA228_0<=Super)||LA228_0==Union||(LA228_0>=Yield && LA228_0<=This)||(LA228_0>=From && LA228_0<=Void)||(LA228_0>=Get && LA228_0<=Set)||LA228_0==PlusSignPlusSign||LA228_0==HyphenMinusHyphenMinus||LA228_0==SolidusEqualsSign||LA228_0==As||LA228_0==Of||LA228_0==ExclamationMark||LA228_0==LeftParenthesis||(LA228_0>=Asterisk && LA228_0<=PlusSign)||LA228_0==HyphenMinus||LA228_0==Solidus||LA228_0==LessThanSign||(LA228_0>=CommercialAt && LA228_0<=LeftSquareBracket)||LA228_0==LeftCurlyBracket||LA228_0==Tilde||LA228_0==RULE_DOUBLE||(LA228_0>=RULE_HEX_INT && LA228_0<=RULE_LEGACY_OCTAL_INT)||LA228_0==RULE_SCIENTIFIC_INT||LA228_0==RULE_IDENTIFIER||LA228_0==RULE_STRING||(LA228_0>=RULE_TEMPLATE_HEAD && LA228_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA228_0==RULE_INT) ) {
                                        alt228=1;
                                    }
                                    switch (alt228) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt229=2;
                                    int LA229_0 = input.LA(1);

                                    if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Abstract)||(LA229_0>=External && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||LA229_0==Public||LA229_0==Static||(LA229_0>=Target && LA229_0<=Await)||LA229_0==Class||(LA229_0>=False && LA229_0<=Super)||LA229_0==Union||(LA229_0>=Yield && LA229_0<=This)||(LA229_0>=From && LA229_0<=Void)||(LA229_0>=Get && LA229_0<=Set)||LA229_0==PlusSignPlusSign||LA229_0==HyphenMinusHyphenMinus||LA229_0==SolidusEqualsSign||LA229_0==As||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||(LA229_0>=Asterisk && LA229_0<=PlusSign)||LA229_0==HyphenMinus||LA229_0==Solidus||LA229_0==LessThanSign||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_HEX_INT && LA229_0<=RULE_LEGACY_OCTAL_INT)||LA229_0==RULE_SCIENTIFIC_INT||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_STRING||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_INT) ) {
                                        alt229=1;
                                    }
                                    switch (alt229) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt230=2;
                                    int LA230_0 = input.LA(1);

                                    if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Abstract)||(LA230_0>=External && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||LA230_0==Public||LA230_0==Static||(LA230_0>=Target && LA230_0<=Await)||LA230_0==Class||(LA230_0>=False && LA230_0<=Super)||LA230_0==Union||(LA230_0>=Yield && LA230_0<=This)||(LA230_0>=From && LA230_0<=Void)||(LA230_0>=Get && LA230_0<=Set)||LA230_0==PlusSignPlusSign||LA230_0==HyphenMinusHyphenMinus||LA230_0==SolidusEqualsSign||LA230_0==As||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||(LA230_0>=Asterisk && LA230_0<=PlusSign)||LA230_0==HyphenMinus||LA230_0==Solidus||LA230_0==LessThanSign||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_HEX_INT && LA230_0<=RULE_LEGACY_OCTAL_INT)||LA230_0==RULE_SCIENTIFIC_INT||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_STRING||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_INT) ) {
                                        alt230=1;
                                    }
                                    switch (alt230) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt231=2;
                                    int LA231_0 = input.LA(1);

                                    if ( ((LA231_0>=Intersection && LA231_0<=Implements)||(LA231_0>=Promisify && LA231_0<=Abstract)||(LA231_0>=External && LA231_0<=Function)||(LA231_0>=Private && LA231_0<=Delete)||LA231_0==Public||LA231_0==Static||(LA231_0>=Target && LA231_0<=Await)||LA231_0==Class||(LA231_0>=False && LA231_0<=Super)||LA231_0==Union||(LA231_0>=Yield && LA231_0<=This)||(LA231_0>=From && LA231_0<=Void)||(LA231_0>=Get && LA231_0<=Set)||LA231_0==PlusSignPlusSign||LA231_0==HyphenMinusHyphenMinus||LA231_0==SolidusEqualsSign||LA231_0==As||LA231_0==Of||LA231_0==ExclamationMark||LA231_0==LeftParenthesis||(LA231_0>=Asterisk && LA231_0<=PlusSign)||LA231_0==HyphenMinus||LA231_0==Solidus||LA231_0==LessThanSign||(LA231_0>=CommercialAt && LA231_0<=LeftSquareBracket)||LA231_0==LeftCurlyBracket||LA231_0==Tilde||LA231_0==RULE_DOUBLE||(LA231_0>=RULE_HEX_INT && LA231_0<=RULE_LEGACY_OCTAL_INT)||LA231_0==RULE_SCIENTIFIC_INT||LA231_0==RULE_IDENTIFIER||LA231_0==RULE_STRING||(LA231_0>=RULE_TEMPLATE_HEAD && LA231_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA231_0==RULE_INT) ) {
                                        alt231=1;
                                    }
                                    switch (alt231) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt233=2;
                            int LA233_0 = input.LA(1);

                            if ( ((LA233_0>=Intersection && LA233_0<=Implements)||(LA233_0>=Promisify && LA233_0<=Abstract)||(LA233_0>=External && LA233_0<=Function)||(LA233_0>=Private && LA233_0<=Delete)||LA233_0==Public||LA233_0==Static||(LA233_0>=Target && LA233_0<=Await)||LA233_0==Class||(LA233_0>=False && LA233_0<=Super)||LA233_0==Union||(LA233_0>=Yield && LA233_0<=This)||(LA233_0>=From && LA233_0<=Void)||(LA233_0>=Get && LA233_0<=Set)||LA233_0==PlusSignPlusSign||LA233_0==HyphenMinusHyphenMinus||LA233_0==SolidusEqualsSign||LA233_0==As||LA233_0==Of||LA233_0==ExclamationMark||LA233_0==LeftParenthesis||(LA233_0>=Asterisk && LA233_0<=PlusSign)||LA233_0==HyphenMinus||LA233_0==Solidus||LA233_0==LessThanSign||(LA233_0>=CommercialAt && LA233_0<=LeftSquareBracket)||LA233_0==LeftCurlyBracket||LA233_0==Tilde||LA233_0==RULE_DOUBLE||(LA233_0>=RULE_HEX_INT && LA233_0<=RULE_LEGACY_OCTAL_INT)||LA233_0==RULE_SCIENTIFIC_INT||LA233_0==RULE_IDENTIFIER||LA233_0==RULE_STRING||(LA233_0>=RULE_TEMPLATE_HEAD && LA233_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA233_0==RULE_INT) ) {
                                alt233=1;
                            }
                            switch (alt233) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt234=2;
                            int LA234_0 = input.LA(1);

                            if ( ((LA234_0>=Intersection && LA234_0<=Implements)||(LA234_0>=Promisify && LA234_0<=Abstract)||(LA234_0>=External && LA234_0<=Function)||(LA234_0>=Private && LA234_0<=Delete)||LA234_0==Public||LA234_0==Static||(LA234_0>=Target && LA234_0<=Await)||LA234_0==Class||(LA234_0>=False && LA234_0<=Super)||LA234_0==Union||(LA234_0>=Yield && LA234_0<=This)||(LA234_0>=From && LA234_0<=Void)||(LA234_0>=Get && LA234_0<=Set)||LA234_0==PlusSignPlusSign||LA234_0==HyphenMinusHyphenMinus||LA234_0==SolidusEqualsSign||LA234_0==As||LA234_0==Of||LA234_0==ExclamationMark||LA234_0==LeftParenthesis||(LA234_0>=Asterisk && LA234_0<=PlusSign)||LA234_0==HyphenMinus||LA234_0==Solidus||LA234_0==LessThanSign||(LA234_0>=CommercialAt && LA234_0<=LeftSquareBracket)||LA234_0==LeftCurlyBracket||LA234_0==Tilde||LA234_0==RULE_DOUBLE||(LA234_0>=RULE_HEX_INT && LA234_0<=RULE_LEGACY_OCTAL_INT)||LA234_0==RULE_SCIENTIFIC_INT||LA234_0==RULE_IDENTIFIER||LA234_0==RULE_STRING||(LA234_0>=RULE_TEMPLATE_HEAD && LA234_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA234_0==RULE_INT) ) {
                                alt234=1;
                            }
                            switch (alt234) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_75);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleLetIdentifierRef_return retval = new InternalN4JSXParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleLetAsIdentifier_return retval = new InternalN4JSXParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;


            
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSXParser.ruleContinueStatement_return retval = new InternalN4JSXParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( ((LA237_0>=Intersection && LA237_0<=Implements)||(LA237_0>=Promisify && LA237_0<=Abstract)||LA237_0==External||(LA237_0>=Private && LA237_0<=Project)||LA237_0==Public||LA237_0==Static||LA237_0==Target||(LA237_0>=Async && LA237_0<=Await)||LA237_0==Union||(LA237_0>=Yield && LA237_0<=This)||LA237_0==From||LA237_0==Type||(LA237_0>=Get && LA237_0<=Let)||(LA237_0>=Out && LA237_0<=Set)||LA237_0==As||LA237_0==Of||LA237_0==RULE_IDENTIFIER) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ContinueStatement_return retval = new InternalN4JSXParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( ((LA238_0>=Intersection && LA238_0<=Implements)||(LA238_0>=Promisify && LA238_0<=Abstract)||LA238_0==External||(LA238_0>=Private && LA238_0<=Project)||LA238_0==Public||LA238_0==Static||LA238_0==Target||(LA238_0>=Async && LA238_0<=Await)||LA238_0==Union||LA238_0==This||LA238_0==From||LA238_0==Type||(LA238_0>=Get && LA238_0<=Let)||(LA238_0>=Out && LA238_0<=Set)||LA238_0==As||LA238_0==Of||LA238_0==RULE_IDENTIFIER) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSXParser.ruleBreakStatement_return retval = new InternalN4JSXParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( ((LA239_0>=Intersection && LA239_0<=Implements)||(LA239_0>=Promisify && LA239_0<=Abstract)||LA239_0==External||(LA239_0>=Private && LA239_0<=Project)||LA239_0==Public||LA239_0==Static||LA239_0==Target||(LA239_0>=Async && LA239_0<=Await)||LA239_0==Union||(LA239_0>=Yield && LA239_0<=This)||LA239_0==From||LA239_0==Type||(LA239_0>=Get && LA239_0<=Let)||(LA239_0>=Out && LA239_0<=Set)||LA239_0==As||LA239_0==Of||LA239_0==RULE_IDENTIFIER) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_BreakStatement_return retval = new InternalN4JSXParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( ((LA240_0>=Intersection && LA240_0<=Implements)||(LA240_0>=Promisify && LA240_0<=Abstract)||LA240_0==External||(LA240_0>=Private && LA240_0<=Project)||LA240_0==Public||LA240_0==Static||LA240_0==Target||(LA240_0>=Async && LA240_0<=Await)||LA240_0==Union||LA240_0==This||LA240_0==From||LA240_0==Type||(LA240_0>=Get && LA240_0<=Let)||(LA240_0>=Out && LA240_0<=Set)||LA240_0==As||LA240_0==Of||LA240_0==RULE_IDENTIFIER) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSXParser.ruleReturnStatement_return retval = new InternalN4JSXParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( ((LA241_0>=Intersection && LA241_0<=Implements)||(LA241_0>=Promisify && LA241_0<=Abstract)||(LA241_0>=External && LA241_0<=Function)||(LA241_0>=Private && LA241_0<=Delete)||LA241_0==Public||LA241_0==Static||(LA241_0>=Target && LA241_0<=Await)||LA241_0==Class||(LA241_0>=False && LA241_0<=Super)||LA241_0==Union||(LA241_0>=Yield && LA241_0<=This)||(LA241_0>=From && LA241_0<=Void)||(LA241_0>=Get && LA241_0<=Set)||LA241_0==PlusSignPlusSign||LA241_0==HyphenMinusHyphenMinus||LA241_0==SolidusEqualsSign||LA241_0==As||LA241_0==Of||LA241_0==ExclamationMark||LA241_0==LeftParenthesis||(LA241_0>=Asterisk && LA241_0<=PlusSign)||LA241_0==HyphenMinus||LA241_0==Solidus||LA241_0==LessThanSign||(LA241_0>=CommercialAt && LA241_0<=LeftSquareBracket)||LA241_0==LeftCurlyBracket||LA241_0==Tilde||LA241_0==RULE_DOUBLE||(LA241_0>=RULE_HEX_INT && LA241_0<=RULE_LEGACY_OCTAL_INT)||LA241_0==RULE_SCIENTIFIC_INT||LA241_0==RULE_IDENTIFIER||LA241_0==RULE_STRING||(LA241_0>=RULE_TEMPLATE_HEAD && LA241_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA241_0==RULE_INT) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ReturnStatement_return retval = new InternalN4JSXParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( ((LA242_0>=Intersection && LA242_0<=Implements)||(LA242_0>=Promisify && LA242_0<=Abstract)||(LA242_0>=External && LA242_0<=Function)||(LA242_0>=Private && LA242_0<=Delete)||LA242_0==Public||LA242_0==Static||(LA242_0>=Target && LA242_0<=Await)||LA242_0==Class||(LA242_0>=False && LA242_0<=Super)||LA242_0==Union||(LA242_0>=Yield && LA242_0<=This)||(LA242_0>=From && LA242_0<=Void)||(LA242_0>=Get && LA242_0<=Set)||LA242_0==PlusSignPlusSign||LA242_0==HyphenMinusHyphenMinus||LA242_0==SolidusEqualsSign||LA242_0==As||LA242_0==Of||LA242_0==ExclamationMark||LA242_0==LeftParenthesis||(LA242_0>=Asterisk && LA242_0<=PlusSign)||LA242_0==HyphenMinus||LA242_0==Solidus||LA242_0==LessThanSign||(LA242_0>=CommercialAt && LA242_0<=LeftSquareBracket)||LA242_0==LeftCurlyBracket||LA242_0==Tilde||LA242_0==RULE_DOUBLE||(LA242_0>=RULE_HEX_INT && LA242_0<=RULE_LEGACY_OCTAL_INT)||LA242_0==RULE_SCIENTIFIC_INT||LA242_0==RULE_IDENTIFIER||LA242_0==RULE_STRING||(LA242_0>=RULE_TEMPLATE_HEAD && LA242_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_0==RULE_INT) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWithStatement_return retval = new InternalN4JSXParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WithStatement_return retval = new InternalN4JSXParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSXParser.ruleSwitchStatement_return retval = new InternalN4JSXParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==Case) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==Default) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_91);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop244:
                    do {
                        int alt244=2;
                        int LA244_0 = input.LA(1);

                        if ( (LA244_0==Case) ) {
                            alt244=1;
                        }


                        switch (alt244) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_91);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop244;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_SwitchStatement_return retval = new InternalN4JSXParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);

                if ( (LA246_0==Case) ) {
                    alt246=1;
                }


                switch (alt246) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==Default) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_91);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);

                        if ( (LA247_0==Case) ) {
                            alt247=1;
                        }


                        switch (alt247) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_91);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop247;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSXParser.ruleCaseClause_return retval = new InternalN4JSXParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_92);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( ((LA249_0>=Intersection && LA249_0<=Implements)||(LA249_0>=Promisify && LA249_0<=Function)||(LA249_0>=Private && LA249_0<=Delete)||(LA249_0>=Public && LA249_0<=Break)||(LA249_0>=Class && LA249_0<=This)||(LA249_0>=From && LA249_0<=With)||(LA249_0>=For && LA249_0<=Var)||LA249_0==PlusSignPlusSign||LA249_0==HyphenMinusHyphenMinus||LA249_0==SolidusEqualsSign||(LA249_0>=As && LA249_0<=If)||LA249_0==Of||LA249_0==ExclamationMark||LA249_0==LeftParenthesis||(LA249_0>=Asterisk && LA249_0<=PlusSign)||LA249_0==HyphenMinus||LA249_0==Solidus||(LA249_0>=Semicolon && LA249_0<=LessThanSign)||(LA249_0>=CommercialAt && LA249_0<=LeftSquareBracket)||LA249_0==LeftCurlyBracket||LA249_0==Tilde||LA249_0==RULE_DOUBLE||(LA249_0>=RULE_HEX_INT && LA249_0<=RULE_LEGACY_OCTAL_INT)||LA249_0==RULE_SCIENTIFIC_INT||LA249_0==RULE_IDENTIFIER||LA249_0==RULE_STRING||(LA249_0>=RULE_TEMPLATE_HEAD && LA249_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA249_0==RULE_INT) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSXParser.norm1_CaseClause_return retval = new InternalN4JSXParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_92);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( ((LA250_0>=Intersection && LA250_0<=Implements)||(LA250_0>=Promisify && LA250_0<=Function)||(LA250_0>=Private && LA250_0<=Delete)||(LA250_0>=Public && LA250_0<=Break)||(LA250_0>=Class && LA250_0<=This)||(LA250_0>=From && LA250_0<=With)||(LA250_0>=For && LA250_0<=Var)||LA250_0==PlusSignPlusSign||LA250_0==HyphenMinusHyphenMinus||LA250_0==SolidusEqualsSign||(LA250_0>=As && LA250_0<=If)||LA250_0==Of||LA250_0==ExclamationMark||LA250_0==LeftParenthesis||(LA250_0>=Asterisk && LA250_0<=PlusSign)||LA250_0==HyphenMinus||LA250_0==Solidus||(LA250_0>=Semicolon && LA250_0<=LessThanSign)||(LA250_0>=CommercialAt && LA250_0<=LeftSquareBracket)||LA250_0==LeftCurlyBracket||LA250_0==Tilde||LA250_0==RULE_DOUBLE||(LA250_0>=RULE_HEX_INT && LA250_0<=RULE_LEGACY_OCTAL_INT)||LA250_0==RULE_SCIENTIFIC_INT||LA250_0==RULE_IDENTIFIER||LA250_0==RULE_STRING||(LA250_0>=RULE_TEMPLATE_HEAD && LA250_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA250_0==RULE_INT) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultClause_return retval = new InternalN4JSXParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( ((LA251_0>=Intersection && LA251_0<=Implements)||(LA251_0>=Promisify && LA251_0<=Function)||(LA251_0>=Private && LA251_0<=Delete)||(LA251_0>=Public && LA251_0<=Break)||(LA251_0>=Class && LA251_0<=This)||(LA251_0>=From && LA251_0<=With)||(LA251_0>=For && LA251_0<=Var)||LA251_0==PlusSignPlusSign||LA251_0==HyphenMinusHyphenMinus||LA251_0==SolidusEqualsSign||(LA251_0>=As && LA251_0<=If)||LA251_0==Of||LA251_0==ExclamationMark||LA251_0==LeftParenthesis||(LA251_0>=Asterisk && LA251_0<=PlusSign)||LA251_0==HyphenMinus||LA251_0==Solidus||(LA251_0>=Semicolon && LA251_0<=LessThanSign)||(LA251_0>=CommercialAt && LA251_0<=LeftSquareBracket)||LA251_0==LeftCurlyBracket||LA251_0==Tilde||LA251_0==RULE_DOUBLE||(LA251_0>=RULE_HEX_INT && LA251_0<=RULE_LEGACY_OCTAL_INT)||LA251_0==RULE_SCIENTIFIC_INT||LA251_0==RULE_IDENTIFIER||LA251_0==RULE_STRING||(LA251_0>=RULE_TEMPLATE_HEAD && LA251_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA251_0==RULE_INT) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSXParser.norm1_DefaultClause_return retval = new InternalN4JSXParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( ((LA252_0>=Intersection && LA252_0<=Implements)||(LA252_0>=Promisify && LA252_0<=Function)||(LA252_0>=Private && LA252_0<=Delete)||(LA252_0>=Public && LA252_0<=Break)||(LA252_0>=Class && LA252_0<=This)||(LA252_0>=From && LA252_0<=With)||(LA252_0>=For && LA252_0<=Var)||LA252_0==PlusSignPlusSign||LA252_0==HyphenMinusHyphenMinus||LA252_0==SolidusEqualsSign||(LA252_0>=As && LA252_0<=If)||LA252_0==Of||LA252_0==ExclamationMark||LA252_0==LeftParenthesis||(LA252_0>=Asterisk && LA252_0<=PlusSign)||LA252_0==HyphenMinus||LA252_0==Solidus||(LA252_0>=Semicolon && LA252_0<=LessThanSign)||(LA252_0>=CommercialAt && LA252_0<=LeftSquareBracket)||LA252_0==LeftCurlyBracket||LA252_0==Tilde||LA252_0==RULE_DOUBLE||(LA252_0>=RULE_HEX_INT && LA252_0<=RULE_LEGACY_OCTAL_INT)||LA252_0==RULE_SCIENTIFIC_INT||LA252_0==RULE_IDENTIFIER||LA252_0==RULE_STRING||(LA252_0>=RULE_TEMPLATE_HEAD && LA252_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA252_0==RULE_INT) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSXParser.ruleLabelledStatement_return retval = new InternalN4JSXParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_92);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_LabelledStatement_return retval = new InternalN4JSXParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_92);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSXParser.ruleThrowStatement_return retval = new InternalN4JSXParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ThrowStatement_return retval = new InternalN4JSXParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSXParser.ruleTryStatement_return retval = new InternalN4JSXParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_93);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==Catch) ) {
                alt254=1;
            }
            else if ( (LA254_0==Finally) ) {
                alt254=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_94);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==Finally) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_TryStatement_return retval = new InternalN4JSXParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_93);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==Catch) ) {
                alt256=1;
            }
            else if ( (LA256_0==Finally) ) {
                alt256=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_94);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==Finally) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSXParser.ruleCatchBlock_return retval = new InternalN4JSXParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchBlock_return retval = new InternalN4JSXParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSXParser.ruleCatchVariable_return retval = new InternalN4JSXParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt258=3;
            alt258 = dfa258.predict(input);
            switch (alt258) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt257=2;
                    alt257 = dfa257.predict(input);
                    switch (alt257) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchVariable_return retval = new InternalN4JSXParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt260=3;
            alt260 = dfa260.predict(input);
            switch (alt260) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt259=2;
                    alt259 = dfa259.predict(input);
                    switch (alt259) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSXParser.ruleFinallyBlock_return retval = new InternalN4JSXParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_FinallyBlock_return retval = new InternalN4JSXParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDebuggerStatement_return retval = new InternalN4JSXParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1()); 
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParenExpression_return retval = new InternalN4JSXParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParenExpression_return retval = new InternalN4JSXParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierRef_return retval = new InternalN4JSXParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSXParser.norm1_IdentifierRef_return retval = new InternalN4JSXParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleSuperLiteral_return retval = new InternalN4JSXParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;


            
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleThisLiteral_return retval = new InternalN4JSXParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleArrayLiteral_return retval = new InternalN4JSXParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==Comma) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_96);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( ((LA266_0>=Intersection && LA266_0<=Implements)||(LA266_0>=Promisify && LA266_0<=Abstract)||(LA266_0>=External && LA266_0<=Function)||(LA266_0>=Private && LA266_0<=Delete)||LA266_0==Public||LA266_0==Static||(LA266_0>=Target && LA266_0<=Await)||LA266_0==Class||(LA266_0>=False && LA266_0<=Super)||LA266_0==Union||(LA266_0>=Yield && LA266_0<=This)||(LA266_0>=From && LA266_0<=Void)||LA266_0==FullStopFullStopFullStop||(LA266_0>=Get && LA266_0<=Set)||LA266_0==PlusSignPlusSign||LA266_0==HyphenMinusHyphenMinus||LA266_0==SolidusEqualsSign||LA266_0==As||LA266_0==Of||LA266_0==ExclamationMark||LA266_0==LeftParenthesis||(LA266_0>=Asterisk && LA266_0<=PlusSign)||LA266_0==HyphenMinus||LA266_0==Solidus||LA266_0==LessThanSign||(LA266_0>=CommercialAt && LA266_0<=LeftSquareBracket)||LA266_0==LeftCurlyBracket||LA266_0==Tilde||LA266_0==RULE_DOUBLE||(LA266_0>=RULE_HEX_INT && LA266_0<=RULE_LEGACY_OCTAL_INT)||LA266_0==RULE_SCIENTIFIC_INT||LA266_0==RULE_IDENTIFIER||LA266_0==RULE_STRING||(LA266_0>=RULE_TEMPLATE_HEAD && LA266_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA266_0==RULE_INT) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop263:
                    do {
                        int alt263=2;
                        alt263 = dfa263.predict(input);
                        switch (alt263) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop262:
                    	    do {
                    	        int alt262=2;
                    	        int LA262_0 = input.LA(1);

                    	        if ( (LA262_0==Comma) ) {
                    	            alt262=1;
                    	        }


                    	        switch (alt262) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_98);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop262;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop263;
                        }
                    } while (true);
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==Comma) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop264:
                            do {
                                int alt264=2;
                                int LA264_0 = input.LA(1);

                                if ( (LA264_0==Comma) ) {
                                    alt264=1;
                                }


                                switch (alt264) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop264;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayLiteral_return retval = new InternalN4JSXParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==Comma) ) {
                    alt267=1;
                }


                switch (alt267) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_96);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( ((LA272_0>=Intersection && LA272_0<=Implements)||(LA272_0>=Promisify && LA272_0<=Abstract)||(LA272_0>=External && LA272_0<=Function)||(LA272_0>=Private && LA272_0<=Delete)||LA272_0==Public||LA272_0==Static||(LA272_0>=Target && LA272_0<=Await)||LA272_0==Class||(LA272_0>=False && LA272_0<=Super)||LA272_0==Union||(LA272_0>=Yield && LA272_0<=This)||(LA272_0>=From && LA272_0<=Void)||LA272_0==FullStopFullStopFullStop||(LA272_0>=Get && LA272_0<=Set)||LA272_0==PlusSignPlusSign||LA272_0==HyphenMinusHyphenMinus||LA272_0==SolidusEqualsSign||LA272_0==As||LA272_0==Of||LA272_0==ExclamationMark||LA272_0==LeftParenthesis||(LA272_0>=Asterisk && LA272_0<=PlusSign)||LA272_0==HyphenMinus||LA272_0==Solidus||LA272_0==LessThanSign||(LA272_0>=CommercialAt && LA272_0<=LeftSquareBracket)||LA272_0==LeftCurlyBracket||LA272_0==Tilde||LA272_0==RULE_DOUBLE||(LA272_0>=RULE_HEX_INT && LA272_0<=RULE_LEGACY_OCTAL_INT)||LA272_0==RULE_SCIENTIFIC_INT||LA272_0==RULE_IDENTIFIER||LA272_0==RULE_STRING||(LA272_0>=RULE_TEMPLATE_HEAD && LA272_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA272_0==RULE_INT) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop269:
                    do {
                        int alt269=2;
                        alt269 = dfa269.predict(input);
                        switch (alt269) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop268:
                    	    do {
                    	        int alt268=2;
                    	        int LA268_0 = input.LA(1);

                    	        if ( (LA268_0==Comma) ) {
                    	            alt268=1;
                    	        }


                    	        switch (alt268) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_98);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop268;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop269;
                        }
                    } while (true);
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==Comma) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop270:
                            do {
                                int alt270=2;
                                int LA270_0 = input.LA(1);

                                if ( (LA270_0==Comma) ) {
                                    alt270=1;
                                }


                                switch (alt270) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop270;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSXParser.ruleArrayPadding_return retval = new InternalN4JSXParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSXParser.ruleArrayElement_return retval = new InternalN4JSXParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==FullStopFullStopFullStop) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayElement_return retval = new InternalN4JSXParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==FullStopFullStopFullStop) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleObjectLiteral_return retval = new InternalN4JSXParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( ((LA277_0>=Intersection && LA277_0<=With)||(LA277_0>=For && LA277_0<=Var)||(LA277_0>=As && LA277_0<=Of)||LA277_0==LeftParenthesis||LA277_0==Asterisk||LA277_0==LessThanSign||(LA277_0>=QuestionMark && LA277_0<=LeftSquareBracket)||LA277_0==LeftCurlyBracket||LA277_0==Tilde||LA277_0==RULE_DOUBLE||LA277_0==RULE_HEX_INT||LA277_0==RULE_OCTAL_INT||LA277_0==RULE_SCIENTIFIC_INT||LA277_0==RULE_IDENTIFIER||LA277_0==RULE_STRING||LA277_0==RULE_INT) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop275:
                    do {
                        int alt275=2;
                        int LA275_0 = input.LA(1);

                        if ( (LA275_0==Comma) ) {
                            int LA275_1 = input.LA(2);

                            if ( ((LA275_1>=Intersection && LA275_1<=With)||(LA275_1>=For && LA275_1<=Var)||(LA275_1>=As && LA275_1<=Of)||LA275_1==LeftParenthesis||LA275_1==Asterisk||LA275_1==LessThanSign||(LA275_1>=QuestionMark && LA275_1<=LeftSquareBracket)||LA275_1==LeftCurlyBracket||LA275_1==Tilde||LA275_1==RULE_DOUBLE||LA275_1==RULE_HEX_INT||LA275_1==RULE_OCTAL_INT||LA275_1==RULE_SCIENTIFIC_INT||LA275_1==RULE_IDENTIFIER||LA275_1==RULE_STRING||LA275_1==RULE_INT) ) {
                                alt275=1;
                            }


                        }


                        switch (alt275) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop275;
                        }
                    } while (true);
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==Comma) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectLiteral_return retval = new InternalN4JSXParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( ((LA280_0>=Intersection && LA280_0<=With)||(LA280_0>=For && LA280_0<=Var)||(LA280_0>=As && LA280_0<=Of)||LA280_0==LeftParenthesis||LA280_0==Asterisk||LA280_0==LessThanSign||(LA280_0>=QuestionMark && LA280_0<=LeftSquareBracket)||LA280_0==LeftCurlyBracket||LA280_0==Tilde||LA280_0==RULE_DOUBLE||LA280_0==RULE_HEX_INT||LA280_0==RULE_OCTAL_INT||LA280_0==RULE_SCIENTIFIC_INT||LA280_0==RULE_IDENTIFIER||LA280_0==RULE_STRING||LA280_0==RULE_INT) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop278:
                    do {
                        int alt278=2;
                        int LA278_0 = input.LA(1);

                        if ( (LA278_0==Comma) ) {
                            int LA278_1 = input.LA(2);

                            if ( ((LA278_1>=Intersection && LA278_1<=With)||(LA278_1>=For && LA278_1<=Var)||(LA278_1>=As && LA278_1<=Of)||LA278_1==LeftParenthesis||LA278_1==Asterisk||LA278_1==LessThanSign||(LA278_1>=QuestionMark && LA278_1<=LeftSquareBracket)||LA278_1==LeftCurlyBracket||LA278_1==Tilde||LA278_1==RULE_DOUBLE||LA278_1==RULE_HEX_INT||LA278_1==RULE_OCTAL_INT||LA278_1==RULE_SCIENTIFIC_INT||LA278_1==RULE_IDENTIFIER||LA278_1==RULE_STRING||LA278_1==RULE_INT) ) {
                                alt278=1;
                            }


                        }


                        switch (alt278) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop278;
                        }
                    } while (true);
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==Comma) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignment_return retval = new InternalN4JSXParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt281=6;
            alt281 = dfa281.predict(input);
            switch (alt281) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyAssignment_return retval = new InternalN4JSXParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt282=6;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_101);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt290=5;
            alt290 = dfa290.predict(input);
            switch (alt290) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt283=2;
                    alt283 = dfa283.predict(input);
                    switch (alt283) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_2_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==LessThanSign) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt285=2;
                    alt285 = dfa285.predict(input);
                    switch (alt285) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==Asterisk) ) {
                        alt286=1;
                    }
                    else if ( ((LA286_0>=Intersection && LA286_0<=With)||(LA286_0>=For && LA286_0<=Var)||(LA286_0>=As && LA286_0<=Of)||LA286_0==LeftSquareBracket||LA286_0==RULE_DOUBLE||LA286_0==RULE_HEX_INT||LA286_0==RULE_OCTAL_INT||LA286_0==RULE_SCIENTIFIC_INT||LA286_0==RULE_IDENTIFIER||LA286_0==RULE_STRING||LA286_0==RULE_INT) ) {
                        alt286=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 0, input);

                        throw nvae;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==Semicolon) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt288=2;
                    alt288 = dfa288.predict(input);
                    switch (alt288) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==EqualsSign) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_101);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt298=5;
            alt298 = dfa298.predict(input);
            switch (alt298) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt291=2;
                    alt291 = dfa291.predict(input);
                    switch (alt291) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_2_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==LessThanSign) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt293=2;
                    alt293 = dfa293.predict(input);
                    switch (alt293) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==Asterisk) ) {
                        alt294=1;
                    }
                    else if ( ((LA294_0>=Intersection && LA294_0<=With)||(LA294_0>=For && LA294_0<=Var)||(LA294_0>=As && LA294_0<=Of)||LA294_0==LeftSquareBracket||LA294_0==RULE_DOUBLE||LA294_0==RULE_HEX_INT||LA294_0==RULE_OCTAL_INT||LA294_0==RULE_SCIENTIFIC_INT||LA294_0==RULE_IDENTIFIER||LA294_0==RULE_STRING||LA294_0==RULE_INT) ) {
                        alt294=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 294, 0, input);

                        throw nvae;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==Semicolon) ) {
                        alt295=1;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt296=2;
                    alt296 = dfa296.predict(input);
                    switch (alt296) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==EqualsSign) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSXParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==LessThanSign) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt300=2;
            alt300 = dfa300.predict(input);
            switch (alt300) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==Asterisk) ) {
                alt301=1;
            }
            else if ( ((LA301_0>=Intersection && LA301_0<=With)||(LA301_0>=For && LA301_0<=Var)||(LA301_0>=As && LA301_0<=Of)||LA301_0==LeftSquareBracket||LA301_0==RULE_DOUBLE||LA301_0==RULE_HEX_INT||LA301_0==RULE_OCTAL_INT||LA301_0==RULE_SCIENTIFIC_INT||LA301_0==RULE_IDENTIFIER||LA301_0==RULE_STRING||LA301_0==RULE_INT) ) {
                alt301=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);

                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==Semicolon) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==LessThanSign) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt304=2;
            alt304 = dfa304.predict(input);
            switch (alt304) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==Asterisk) ) {
                alt305=1;
            }
            else if ( ((LA305_0>=Intersection && LA305_0<=With)||(LA305_0>=For && LA305_0<=Var)||(LA305_0>=As && LA305_0<=Of)||LA305_0==LeftSquareBracket||LA305_0==RULE_DOUBLE||LA305_0==RULE_HEX_INT||LA305_0==RULE_OCTAL_INT||LA305_0==RULE_SCIENTIFIC_INT||LA305_0==RULE_IDENTIFIER||LA305_0==RULE_STRING||LA305_0==RULE_INT) ) {
                alt305=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                throw nvae;
            }
            switch (alt305) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==Semicolon) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePair_return retval = new InternalN4JSXParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt307=2;
            alt307 = dfa307.predict(input);
            switch (alt307) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_92);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt308=2;
            alt308 = dfa308.predict(input);
            switch (alt308) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_92);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt309=2;
            alt309 = dfa309.predict(input);
            switch (alt309) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_16);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==EqualsSign) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt311=2;
            alt311 = dfa311.predict(input);
            switch (alt311) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_16);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==EqualsSign) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSXParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertySetterDeclaration_return retval = new InternalN4JSXParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedCallExpression_return retval = new InternalN4JSXParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSXParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLeftHandSideExpression_return retval = new InternalN4JSXParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_105);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==LeftParenthesis) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    {
                    pushFollow(FOLLOW_106);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop313:
                    do {
                        int alt313=5;
                        int LA313_0 = input.LA(1);

                        if ( (LA313_0==LeftParenthesis) ) {
                            alt313=1;
                        }
                        else if ( (LA313_0==LeftSquareBracket) ) {
                            alt313=2;
                        }
                        else if ( (LA313_0==FullStop) ) {
                            alt313=3;
                        }
                        else if ( (LA313_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred179_InternalN4JSXParser())) {
                            alt313=4;
                        }
                        else if ( (LA313_0==RULE_TEMPLATE_HEAD) && (synpred179_InternalN4JSXParser())) {
                            alt313=4;
                        }


                        switch (alt313) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop313;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSXParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_105);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==LeftParenthesis) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    {
                    pushFollow(FOLLOW_106);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop315:
                    do {
                        int alt315=5;
                        int LA315_0 = input.LA(1);

                        if ( (LA315_0==LeftParenthesis) ) {
                            alt315=1;
                        }
                        else if ( (LA315_0==LeftSquareBracket) ) {
                            alt315=2;
                        }
                        else if ( (LA315_0==FullStop) ) {
                            alt315=3;
                        }
                        else if ( (LA315_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred180_InternalN4JSXParser())) {
                            alt315=4;
                        }
                        else if ( (LA315_0==RULE_TEMPLATE_HEAD) && (synpred180_InternalN4JSXParser())) {
                            alt315=4;
                        }


                        switch (alt315) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop315;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSXParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( ((LA317_0>=Intersection && LA317_0<=Implements)||(LA317_0>=Promisify && LA317_0<=Abstract)||(LA317_0>=External && LA317_0<=Function)||(LA317_0>=Private && LA317_0<=Delete)||LA317_0==Public||LA317_0==Static||(LA317_0>=Target && LA317_0<=Await)||LA317_0==Class||(LA317_0>=False && LA317_0<=Super)||LA317_0==Union||(LA317_0>=Yield && LA317_0<=This)||(LA317_0>=From && LA317_0<=Void)||LA317_0==FullStopFullStopFullStop||(LA317_0>=Get && LA317_0<=Set)||LA317_0==PlusSignPlusSign||LA317_0==HyphenMinusHyphenMinus||LA317_0==SolidusEqualsSign||LA317_0==As||LA317_0==Of||LA317_0==ExclamationMark||LA317_0==LeftParenthesis||(LA317_0>=Asterisk && LA317_0<=PlusSign)||LA317_0==HyphenMinus||LA317_0==Solidus||LA317_0==LessThanSign||(LA317_0>=CommercialAt && LA317_0<=LeftSquareBracket)||LA317_0==LeftCurlyBracket||LA317_0==Tilde||LA317_0==RULE_DOUBLE||(LA317_0>=RULE_HEX_INT && LA317_0<=RULE_LEGACY_OCTAL_INT)||LA317_0==RULE_SCIENTIFIC_INT||LA317_0==RULE_IDENTIFIER||LA317_0==RULE_STRING||(LA317_0>=RULE_TEMPLATE_HEAD && LA317_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA317_0==RULE_INT) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_75);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSXParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=Intersection && LA318_0<=Implements)||(LA318_0>=Promisify && LA318_0<=Abstract)||(LA318_0>=External && LA318_0<=Function)||(LA318_0>=Private && LA318_0<=Delete)||LA318_0==Public||LA318_0==Static||(LA318_0>=Target && LA318_0<=Await)||LA318_0==Class||(LA318_0>=False && LA318_0<=Super)||LA318_0==Union||(LA318_0>=Yield && LA318_0<=This)||(LA318_0>=From && LA318_0<=Void)||LA318_0==FullStopFullStopFullStop||(LA318_0>=Get && LA318_0<=Set)||LA318_0==PlusSignPlusSign||LA318_0==HyphenMinusHyphenMinus||LA318_0==SolidusEqualsSign||LA318_0==As||LA318_0==Of||LA318_0==ExclamationMark||LA318_0==LeftParenthesis||(LA318_0>=Asterisk && LA318_0<=PlusSign)||LA318_0==HyphenMinus||LA318_0==Solidus||LA318_0==LessThanSign||(LA318_0>=CommercialAt && LA318_0<=LeftSquareBracket)||LA318_0==LeftCurlyBracket||LA318_0==Tilde||LA318_0==RULE_DOUBLE||(LA318_0>=RULE_HEX_INT && LA318_0<=RULE_LEGACY_OCTAL_INT)||LA318_0==RULE_SCIENTIFIC_INT||LA318_0==RULE_IDENTIFIER||LA318_0==RULE_STRING||(LA318_0>=RULE_TEMPLATE_HEAD && LA318_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA318_0==RULE_INT) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_75);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSXParser.ruleArguments_return retval = new InternalN4JSXParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);

                if ( (LA319_0==Comma) ) {
                    alt319=1;
                }


                switch (alt319) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop319;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSXParser.norm1_Arguments_return retval = new InternalN4JSXParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);

                if ( (LA320_0==Comma) ) {
                    alt320=1;
                }


                switch (alt320) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop320;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSXParser.ruleArgument_return retval = new InternalN4JSXParser.ruleArgument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==FullStopFullStopFullStop) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSXParser.norm1_Argument_return retval = new InternalN4JSXParser.norm1_Argument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==FullStopFullStopFullStop) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArguments_return retval = new InternalN4JSXParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1()); 
            }

            }


            }
            loop323:
            do {
                int alt323=2;
                int LA323_0 = input.LA(1);

                if ( (LA323_0==Comma) ) {
                    alt323=1;
                }


                switch (alt323) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop323;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMemberExpression_return retval = new InternalN4JSXParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt329=3;
            alt329 = dfa329.predict(input);
            switch (alt329) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_112);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt324=2;
                    int LA324_0 = input.LA(1);

                    if ( (LA324_0==LessThanSign) ) {
                        int LA324_1 = input.LA(2);

                        if ( (synpred183_InternalN4JSXParser()) ) {
                            alt324=1;
                        }
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt327=2;
                    int LA327_0 = input.LA(1);

                    if ( (LA327_0==LeftParenthesis) ) {
                        int LA327_1 = input.LA(2);

                        if ( (synpred184_InternalN4JSXParser()) ) {
                            alt327=1;
                        }
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt325=2;
                            int LA325_0 = input.LA(1);

                            if ( ((LA325_0>=Intersection && LA325_0<=Implements)||(LA325_0>=Promisify && LA325_0<=Abstract)||(LA325_0>=External && LA325_0<=Function)||(LA325_0>=Private && LA325_0<=Delete)||LA325_0==Public||LA325_0==Static||(LA325_0>=Target && LA325_0<=Await)||LA325_0==Class||(LA325_0>=False && LA325_0<=Super)||LA325_0==Union||(LA325_0>=Yield && LA325_0<=This)||(LA325_0>=From && LA325_0<=Void)||LA325_0==FullStopFullStopFullStop||(LA325_0>=Get && LA325_0<=Set)||LA325_0==PlusSignPlusSign||LA325_0==HyphenMinusHyphenMinus||LA325_0==SolidusEqualsSign||LA325_0==As||LA325_0==Of||LA325_0==ExclamationMark||LA325_0==LeftParenthesis||(LA325_0>=Asterisk && LA325_0<=PlusSign)||LA325_0==HyphenMinus||LA325_0==Solidus||LA325_0==LessThanSign||(LA325_0>=CommercialAt && LA325_0<=LeftSquareBracket)||LA325_0==LeftCurlyBracket||LA325_0==Tilde||LA325_0==RULE_DOUBLE||(LA325_0>=RULE_HEX_INT && LA325_0<=RULE_LEGACY_OCTAL_INT)||LA325_0==RULE_SCIENTIFIC_INT||LA325_0==RULE_IDENTIFIER||LA325_0==RULE_STRING||(LA325_0>=RULE_TEMPLATE_HEAD && LA325_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA325_0==RULE_INT) ) {
                                alt325=1;
                            }
                            switch (alt325) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_75);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop326:
                            do {
                                int alt326=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt326=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt326=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt326=3;
                                    }
                                    break;

                                }

                                switch (alt326) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop326;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop328:
                    do {
                        int alt328=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt328=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt328=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt328=3;
                            }
                            break;

                        }

                        switch (alt328) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop328;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MemberExpression_return retval = new InternalN4JSXParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt335=3;
            alt335 = dfa335.predict(input);
            switch (alt335) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_112);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt330=2;
                    int LA330_0 = input.LA(1);

                    if ( (LA330_0==LessThanSign) ) {
                        int LA330_1 = input.LA(2);

                        if ( (synpred187_InternalN4JSXParser()) ) {
                            alt330=1;
                        }
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==LeftParenthesis) ) {
                        int LA333_1 = input.LA(2);

                        if ( (synpred188_InternalN4JSXParser()) ) {
                            alt333=1;
                        }
                    }
                    switch (alt333) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt331=2;
                            int LA331_0 = input.LA(1);

                            if ( ((LA331_0>=Intersection && LA331_0<=Implements)||(LA331_0>=Promisify && LA331_0<=Abstract)||(LA331_0>=External && LA331_0<=Function)||(LA331_0>=Private && LA331_0<=Delete)||LA331_0==Public||LA331_0==Static||(LA331_0>=Target && LA331_0<=Await)||LA331_0==Class||(LA331_0>=False && LA331_0<=Super)||LA331_0==Union||(LA331_0>=Yield && LA331_0<=This)||(LA331_0>=From && LA331_0<=Void)||LA331_0==FullStopFullStopFullStop||(LA331_0>=Get && LA331_0<=Set)||LA331_0==PlusSignPlusSign||LA331_0==HyphenMinusHyphenMinus||LA331_0==SolidusEqualsSign||LA331_0==As||LA331_0==Of||LA331_0==ExclamationMark||LA331_0==LeftParenthesis||(LA331_0>=Asterisk && LA331_0<=PlusSign)||LA331_0==HyphenMinus||LA331_0==Solidus||LA331_0==LessThanSign||(LA331_0>=CommercialAt && LA331_0<=LeftSquareBracket)||LA331_0==LeftCurlyBracket||LA331_0==Tilde||LA331_0==RULE_DOUBLE||(LA331_0>=RULE_HEX_INT && LA331_0<=RULE_LEGACY_OCTAL_INT)||LA331_0==RULE_SCIENTIFIC_INT||LA331_0==RULE_IDENTIFIER||LA331_0==RULE_STRING||(LA331_0>=RULE_TEMPLATE_HEAD && LA331_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA331_0==RULE_INT) ) {
                                alt331=1;
                            }
                            switch (alt331) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_75);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop332:
                            do {
                                int alt332=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt332=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt332=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt332=3;
                                    }
                                    break;

                                }

                                switch (alt332) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop332;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop334:
                    do {
                        int alt334=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt334=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt334=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt334=3;
                            }
                            break;

                        }

                        switch (alt334) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop334;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSXParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_113);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_113);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==LessThanSign) ) {
                alt336=1;
            }
            switch (alt336) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==LessThanSign) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSXParser.rulePostfixExpression_return retval = new InternalN4JSXParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==PlusSignPlusSign) && (synpred189_InternalN4JSXParser())) {
                alt338=1;
            }
            else if ( (LA338_0==HyphenMinusHyphenMinus) && (synpred189_InternalN4JSXParser())) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PostfixExpression_return retval = new InternalN4JSXParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==PlusSignPlusSign) && (synpred190_InternalN4JSXParser())) {
                alt339=1;
            }
            else if ( (LA339_0==HyphenMinusHyphenMinus) && (synpred190_InternalN4JSXParser())) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSXParser.ruleCastExpression_return retval = new InternalN4JSXParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==As) && (synpred191_InternalN4JSXParser())) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_CastExpression_return retval = new InternalN4JSXParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==As) && (synpred192_InternalN4JSXParser())) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnaryExpression_return retval = new InternalN4JSXParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( ((LA342_0>=Intersection && LA342_0<=Implements)||(LA342_0>=Promisify && LA342_0<=Abstract)||(LA342_0>=External && LA342_0<=Function)||(LA342_0>=Private && LA342_0<=Project)||LA342_0==Public||LA342_0==Static||LA342_0==Target||(LA342_0>=Async && LA342_0<=Await)||LA342_0==Class||(LA342_0>=False && LA342_0<=Super)||LA342_0==Union||(LA342_0>=Yield && LA342_0<=This)||(LA342_0>=From && LA342_0<=Type)||(LA342_0>=Get && LA342_0<=Set)||LA342_0==SolidusEqualsSign||LA342_0==As||LA342_0==Of||LA342_0==LeftParenthesis||LA342_0==Solidus||LA342_0==LessThanSign||(LA342_0>=CommercialAt && LA342_0<=LeftSquareBracket)||LA342_0==LeftCurlyBracket||LA342_0==RULE_DOUBLE||(LA342_0>=RULE_HEX_INT && LA342_0<=RULE_LEGACY_OCTAL_INT)||LA342_0==RULE_SCIENTIFIC_INT||LA342_0==RULE_IDENTIFIER||LA342_0==RULE_STRING||(LA342_0>=RULE_TEMPLATE_HEAD && LA342_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA342_0==RULE_INT) ) {
                alt342=1;
            }
            else if ( (LA342_0==Delete||LA342_0==Typeof||LA342_0==Void||LA342_0==PlusSignPlusSign||LA342_0==HyphenMinusHyphenMinus||LA342_0==ExclamationMark||LA342_0==PlusSign||LA342_0==HyphenMinus||LA342_0==Tilde) ) {
                alt342=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_11);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_UnaryExpression_return retval = new InternalN4JSXParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( ((LA343_0>=Intersection && LA343_0<=Implements)||(LA343_0>=Promisify && LA343_0<=Abstract)||(LA343_0>=External && LA343_0<=Function)||(LA343_0>=Private && LA343_0<=Project)||LA343_0==Public||LA343_0==Static||LA343_0==Target||(LA343_0>=Async && LA343_0<=Await)||LA343_0==Class||(LA343_0>=False && LA343_0<=Super)||LA343_0==Union||LA343_0==This||(LA343_0>=From && LA343_0<=Type)||(LA343_0>=Get && LA343_0<=Set)||LA343_0==SolidusEqualsSign||LA343_0==As||LA343_0==Of||LA343_0==LeftParenthesis||LA343_0==Solidus||LA343_0==LessThanSign||(LA343_0>=CommercialAt && LA343_0<=LeftSquareBracket)||LA343_0==LeftCurlyBracket||LA343_0==RULE_DOUBLE||(LA343_0>=RULE_HEX_INT && LA343_0<=RULE_LEGACY_OCTAL_INT)||LA343_0==RULE_SCIENTIFIC_INT||LA343_0==RULE_IDENTIFIER||LA343_0==RULE_STRING||(LA343_0>=RULE_TEMPLATE_HEAD && LA343_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA343_0==RULE_INT) ) {
                alt343=1;
            }
            else if ( (LA343_0==Delete||LA343_0==Typeof||LA343_0==Void||LA343_0==PlusSignPlusSign||LA343_0==HyphenMinusHyphenMinus||LA343_0==ExclamationMark||LA343_0==PlusSign||LA343_0==HyphenMinus||LA343_0==Tilde) ) {
                alt343=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);

                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_11);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMultiplicativeExpression_return retval = new InternalN4JSXParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==Asterisk) && (synpred193_InternalN4JSXParser())) {
                    alt344=1;
                }
                else if ( (LA344_0==Solidus) && (synpred193_InternalN4JSXParser())) {
                    alt344=1;
                }
                else if ( (LA344_0==PercentSign) && (synpred193_InternalN4JSXParser())) {
                    alt344=1;
                }


                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSXParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==Asterisk) && (synpred194_InternalN4JSXParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==Solidus) && (synpred194_InternalN4JSXParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==PercentSign) && (synpred194_InternalN4JSXParser())) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAdditiveExpression_return retval = new InternalN4JSXParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==PlusSign) && (synpred195_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==HyphenMinus) && (synpred195_InternalN4JSXParser())) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AdditiveExpression_return retval = new InternalN4JSXParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==PlusSign) && (synpred196_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==HyphenMinus) && (synpred196_InternalN4JSXParser())) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSXParser.ruleShiftExpression_return retval = new InternalN4JSXParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop348:
            do {
                int alt348=2;
                alt348 = dfa348.predict(input);
                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ShiftExpression_return retval = new InternalN4JSXParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                alt349 = dfa349.predict(input);
                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSXParser.ruleShiftOperator_return retval = new InternalN4JSXParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;


            
        try {
            {
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==GreaterThanSign) ) {
                alt351=1;
            }
            else if ( (LA351_0==LessThanSignLessThanSign) ) {
                alt351=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);

                throw nvae;
            }
            switch (alt351) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0()); 
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1()); 
                    }
                    int alt350=2;
                    int LA350_0 = input.LA(1);

                    if ( (LA350_0==GreaterThanSign) ) {
                        alt350=1;
                    }
                    switch (alt350) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalExpression_return retval = new InternalN4JSXParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                alt352 = dfa352.predict(input);
                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalExpression_return retval = new InternalN4JSXParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                alt353 = dfa353.predict(input);
                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_RelationalExpression_return retval = new InternalN4JSXParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                alt354 = dfa354.predict(input);
                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_RelationalExpression_return retval = new InternalN4JSXParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                alt355 = dfa355.predict(input);
                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalOperator_return retval = new InternalN4JSXParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;


            
        try {
            {
            int alt356=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt356=1;
                }
                break;
            case GreaterThanSign:
                {
                alt356=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt356=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt356=4;
                }
                break;
            case Instanceof:
                {
                alt356=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);

                throw nvae;
            }

            switch (alt356) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalOperator_return retval = new InternalN4JSXParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;


            
        try {
            {
            int alt357=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt357=1;
                }
                break;
            case GreaterThanSign:
                {
                alt357=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt357=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt357=4;
                }
                break;
            case Instanceof:
                {
                alt357=5;
                }
                break;
            case In:
                {
                alt357=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 357, 0, input);

                throw nvae;
            }

            switch (alt357) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSXParser.ruleEqualityExpression_return retval = new InternalN4JSXParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==EqualsSignEqualsSignEqualsSign) && (synpred207_InternalN4JSXParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==ExclamationMarkEqualsSignEqualsSign) && (synpred207_InternalN4JSXParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==EqualsSignEqualsSign) && (synpred207_InternalN4JSXParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==ExclamationMarkEqualsSign) && (synpred207_InternalN4JSXParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_EqualityExpression_return retval = new InternalN4JSXParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==EqualsSignEqualsSignEqualsSign) && (synpred208_InternalN4JSXParser())) {
                    alt359=1;
                }
                else if ( (LA359_0==ExclamationMarkEqualsSignEqualsSign) && (synpred208_InternalN4JSXParser())) {
                    alt359=1;
                }
                else if ( (LA359_0==EqualsSignEqualsSign) && (synpred208_InternalN4JSXParser())) {
                    alt359=1;
                }
                else if ( (LA359_0==ExclamationMarkEqualsSign) && (synpred208_InternalN4JSXParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_EqualityExpression_return retval = new InternalN4JSXParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==EqualsSignEqualsSignEqualsSign) && (synpred209_InternalN4JSXParser())) {
                    alt360=1;
                }
                else if ( (LA360_0==ExclamationMarkEqualsSignEqualsSign) && (synpred209_InternalN4JSXParser())) {
                    alt360=1;
                }
                else if ( (LA360_0==EqualsSignEqualsSign) && (synpred209_InternalN4JSXParser())) {
                    alt360=1;
                }
                else if ( (LA360_0==ExclamationMarkEqualsSign) && (synpred209_InternalN4JSXParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_EqualityExpression_return retval = new InternalN4JSXParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==EqualsSignEqualsSignEqualsSign) && (synpred210_InternalN4JSXParser())) {
                    alt361=1;
                }
                else if ( (LA361_0==ExclamationMarkEqualsSignEqualsSign) && (synpred210_InternalN4JSXParser())) {
                    alt361=1;
                }
                else if ( (LA361_0==EqualsSignEqualsSign) && (synpred210_InternalN4JSXParser())) {
                    alt361=1;
                }
                else if ( (LA361_0==ExclamationMarkEqualsSign) && (synpred210_InternalN4JSXParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDExpression_return retval = new InternalN4JSXParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==Ampersand) && (synpred211_InternalN4JSXParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==Ampersand) && (synpred212_InternalN4JSXParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==Ampersand) && (synpred213_InternalN4JSXParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==Ampersand) && (synpred214_InternalN4JSXParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDOperator_return retval = new InternalN4JSXParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;


            
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXORExpression_return retval = new InternalN4JSXParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==CircumflexAccent) && (synpred215_InternalN4JSXParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==CircumflexAccent) && (synpred216_InternalN4JSXParser())) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==CircumflexAccent) && (synpred217_InternalN4JSXParser())) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);

                if ( (LA369_0==CircumflexAccent) && (synpred218_InternalN4JSXParser())) {
                    alt369=1;
                }


                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop369;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXOROperator_return retval = new InternalN4JSXParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;


            
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseORExpression_return retval = new InternalN4JSXParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);

                if ( (LA370_0==VerticalLine) && (synpred219_InternalN4JSXParser())) {
                    alt370=1;
                }


                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop370;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);

                if ( (LA371_0==VerticalLine) && (synpred220_InternalN4JSXParser())) {
                    alt371=1;
                }


                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop371;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);

                if ( (LA372_0==VerticalLine) && (synpred221_InternalN4JSXParser())) {
                    alt372=1;
                }


                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop372;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);

                if ( (LA373_0==VerticalLine) && (synpred222_InternalN4JSXParser())) {
                    alt373=1;
                }


                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop373;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseOROperator_return retval = new InternalN4JSXParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;


            
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDExpression_return retval = new InternalN4JSXParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);

                if ( (LA374_0==AmpersandAmpersand) && (synpred223_InternalN4JSXParser())) {
                    alt374=1;
                }


                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop374;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalANDExpression_return retval = new InternalN4JSXParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);

                if ( (LA375_0==AmpersandAmpersand) && (synpred224_InternalN4JSXParser())) {
                    alt375=1;
                }


                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop375;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalANDExpression_return retval = new InternalN4JSXParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);

                if ( (LA376_0==AmpersandAmpersand) && (synpred225_InternalN4JSXParser())) {
                    alt376=1;
                }


                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop376;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalANDExpression_return retval = new InternalN4JSXParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);

                if ( (LA377_0==AmpersandAmpersand) && (synpred226_InternalN4JSXParser())) {
                    alt377=1;
                }


                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop377;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDOperator_return retval = new InternalN4JSXParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;


            
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalORExpression_return retval = new InternalN4JSXParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop378:
            do {
                int alt378=2;
                int LA378_0 = input.LA(1);

                if ( (LA378_0==VerticalLineVerticalLine) && (synpred227_InternalN4JSXParser())) {
                    alt378=1;
                }


                switch (alt378) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop378;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalORExpression_return retval = new InternalN4JSXParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);

                if ( (LA379_0==VerticalLineVerticalLine) && (synpred228_InternalN4JSXParser())) {
                    alt379=1;
                }


                switch (alt379) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop379;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalORExpression_return retval = new InternalN4JSXParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);

                if ( (LA380_0==VerticalLineVerticalLine) && (synpred229_InternalN4JSXParser())) {
                    alt380=1;
                }


                switch (alt380) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop380;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalORExpression_return retval = new InternalN4JSXParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);

                if ( (LA381_0==VerticalLineVerticalLine) && (synpred230_InternalN4JSXParser())) {
                    alt381=1;
                }


                switch (alt381) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop381;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalOROperator_return retval = new InternalN4JSXParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;


            
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleConditionalExpression_return retval = new InternalN4JSXParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==QuestionMark) && (synpred231_InternalN4JSXParser())) {
                alt382=1;
            }
            switch (alt382) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ConditionalExpression_return retval = new InternalN4JSXParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==QuestionMark) && (synpred232_InternalN4JSXParser())) {
                alt383=1;
            }
            switch (alt383) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ConditionalExpression_return retval = new InternalN4JSXParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==QuestionMark) && (synpred233_InternalN4JSXParser())) {
                alt384=1;
            }
            switch (alt384) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ConditionalExpression_return retval = new InternalN4JSXParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==QuestionMark) && (synpred234_InternalN4JSXParser())) {
                alt385=1;
            }
            switch (alt385) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpression_return retval = new InternalN4JSXParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt387=4;
            alt387 = dfa387.predict(input);
            switch (alt387) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt386=2;
                    alt386 = dfa386.predict(input);
                    switch (alt386) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpression_return retval = new InternalN4JSXParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt389=4;
            alt389 = dfa389.predict(input);
            switch (alt389) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt388=2;
                    alt388 = dfa388.predict(input);
                    switch (alt388) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AssignmentExpression_return retval = new InternalN4JSXParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt391=5;
            alt391 = dfa391.predict(input);
            switch (alt391) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt390=2;
                    alt390 = dfa390.predict(input);
                    switch (alt390) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AssignmentExpression_return retval = new InternalN4JSXParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt393=5;
            alt393 = dfa393.predict(input);
            switch (alt393) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt392=2;
                    alt392 = dfa392.predict(input);
                    switch (alt392) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSXParser.ruleYieldExpression_return retval = new InternalN4JSXParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt394=2;
            alt394 = dfa394.predict(input);
            switch (alt394) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt395=2;
            alt395 = dfa395.predict(input);
            switch (alt395) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_YieldExpression_return retval = new InternalN4JSXParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt396=2;
            alt396 = dfa396.predict(input);
            switch (alt396) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt397=2;
            alt397 = dfa397.predict(input);
            switch (alt397) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentOperator_return retval = new InternalN4JSXParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;


            
        try {
            {
            int alt399=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt399=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt399=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt399=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt399=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt399=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt399=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt399=7;
                }
                break;
            case GreaterThanSign:
                {
                alt399=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt399=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt399=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt399=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 399, 0, input);

                throw nvae;
            }

            switch (alt399) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0()); 
                    }
                    int alt398=2;
                    int LA398_0 = input.LA(1);

                    if ( (LA398_0==GreaterThanSign) ) {
                        alt398=1;
                    }
                    switch (alt398) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_133); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1()); 
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAwaitExpression_return retval = new InternalN4JSXParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AwaitExpression_return retval = new InternalN4JSXParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AwaitExpression_return retval = new InternalN4JSXParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AwaitExpression_return retval = new InternalN4JSXParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.rulePromisifyExpression_return retval = new InternalN4JSXParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PromisifyExpression_return retval = new InternalN4JSXParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_PromisifyExpression_return retval = new InternalN4JSXParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_PromisifyExpression_return retval = new InternalN4JSXParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSXParser.ruleExpression_return retval = new InternalN4JSXParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt401=2;
            int LA401_0 = input.LA(1);

            if ( (LA401_0==Comma) ) {
                alt401=1;
            }
            switch (alt401) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop400:
                    do {
                        int alt400=2;
                        int LA400_0 = input.LA(1);

                        if ( (LA400_0==Comma) ) {
                            alt400=1;
                        }


                        switch (alt400) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop400;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSXParser.norm1_Expression_return retval = new InternalN4JSXParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt403=2;
            int LA403_0 = input.LA(1);

            if ( (LA403_0==Comma) ) {
                alt403=1;
            }
            switch (alt403) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop402:
                    do {
                        int alt402=2;
                        int LA402_0 = input.LA(1);

                        if ( (LA402_0==Comma) ) {
                            alt402=1;
                        }


                        switch (alt402) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop402;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSXParser.norm2_Expression_return retval = new InternalN4JSXParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt405=2;
            int LA405_0 = input.LA(1);

            if ( (LA405_0==Comma) ) {
                alt405=1;
            }
            switch (alt405) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop404:
                    do {
                        int alt404=2;
                        int LA404_0 = input.LA(1);

                        if ( (LA404_0==Comma) ) {
                            alt404=1;
                        }


                        switch (alt404) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop404;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSXParser.norm3_Expression_return retval = new InternalN4JSXParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==Comma) ) {
                alt407=1;
            }
            switch (alt407) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop406:
                    do {
                        int alt406=2;
                        int LA406_0 = input.LA(1);

                        if ( (LA406_0==Comma) ) {
                            alt406=1;
                        }


                        switch (alt406) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop406;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateLiteral_return retval = new InternalN4JSXParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt411=1;
            }
            else if ( (LA411_0==RULE_TEMPLATE_HEAD) ) {
                alt411=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);

                throw nvae;
            }
            switch (alt411) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_135);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt408=2;
                    int LA408_0 = input.LA(1);

                    if ( ((LA408_0>=Intersection && LA408_0<=Implements)||(LA408_0>=Promisify && LA408_0<=Abstract)||(LA408_0>=External && LA408_0<=Function)||(LA408_0>=Private && LA408_0<=Delete)||LA408_0==Public||LA408_0==Static||(LA408_0>=Target && LA408_0<=Await)||LA408_0==Class||(LA408_0>=False && LA408_0<=Super)||LA408_0==Union||(LA408_0>=Yield && LA408_0<=This)||(LA408_0>=From && LA408_0<=Void)||(LA408_0>=Get && LA408_0<=Set)||LA408_0==PlusSignPlusSign||LA408_0==HyphenMinusHyphenMinus||LA408_0==SolidusEqualsSign||LA408_0==As||LA408_0==Of||LA408_0==ExclamationMark||LA408_0==LeftParenthesis||(LA408_0>=Asterisk && LA408_0<=PlusSign)||LA408_0==HyphenMinus||LA408_0==Solidus||LA408_0==LessThanSign||(LA408_0>=CommercialAt && LA408_0<=LeftSquareBracket)||LA408_0==LeftCurlyBracket||LA408_0==Tilde||LA408_0==RULE_DOUBLE||(LA408_0>=RULE_HEX_INT && LA408_0<=RULE_LEGACY_OCTAL_INT)||LA408_0==RULE_SCIENTIFIC_INT||LA408_0==RULE_IDENTIFIER||LA408_0==RULE_STRING||(LA408_0>=RULE_TEMPLATE_HEAD && LA408_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA408_0==RULE_INT) ) {
                        alt408=1;
                    }
                    switch (alt408) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_135);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_136);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop410:
                    do {
                        int alt410=2;
                        int LA410_0 = input.LA(1);

                        if ( (LA410_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt410=1;
                        }


                        switch (alt410) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_135);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt409=2;
                    	    int LA409_0 = input.LA(1);

                    	    if ( ((LA409_0>=Intersection && LA409_0<=Implements)||(LA409_0>=Promisify && LA409_0<=Abstract)||(LA409_0>=External && LA409_0<=Function)||(LA409_0>=Private && LA409_0<=Delete)||LA409_0==Public||LA409_0==Static||(LA409_0>=Target && LA409_0<=Await)||LA409_0==Class||(LA409_0>=False && LA409_0<=Super)||LA409_0==Union||(LA409_0>=Yield && LA409_0<=This)||(LA409_0>=From && LA409_0<=Void)||(LA409_0>=Get && LA409_0<=Set)||LA409_0==PlusSignPlusSign||LA409_0==HyphenMinusHyphenMinus||LA409_0==SolidusEqualsSign||LA409_0==As||LA409_0==Of||LA409_0==ExclamationMark||LA409_0==LeftParenthesis||(LA409_0>=Asterisk && LA409_0<=PlusSign)||LA409_0==HyphenMinus||LA409_0==Solidus||LA409_0==LessThanSign||(LA409_0>=CommercialAt && LA409_0<=LeftSquareBracket)||LA409_0==LeftCurlyBracket||LA409_0==Tilde||LA409_0==RULE_DOUBLE||(LA409_0>=RULE_HEX_INT && LA409_0<=RULE_LEGACY_OCTAL_INT)||LA409_0==RULE_SCIENTIFIC_INT||LA409_0==RULE_IDENTIFIER||LA409_0==RULE_STRING||(LA409_0>=RULE_TEMPLATE_HEAD && LA409_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA409_0==RULE_INT) ) {
                    	        alt409=1;
                    	    }
                    	    switch (alt409) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_135);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_136);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop410;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_TemplateLiteral_return retval = new InternalN4JSXParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt415=2;
            int LA415_0 = input.LA(1);

            if ( (LA415_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt415=1;
            }
            else if ( (LA415_0==RULE_TEMPLATE_HEAD) ) {
                alt415=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);

                throw nvae;
            }
            switch (alt415) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_135);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt412=2;
                    int LA412_0 = input.LA(1);

                    if ( ((LA412_0>=Intersection && LA412_0<=Implements)||(LA412_0>=Promisify && LA412_0<=Abstract)||(LA412_0>=External && LA412_0<=Function)||(LA412_0>=Private && LA412_0<=Delete)||LA412_0==Public||LA412_0==Static||(LA412_0>=Target && LA412_0<=Await)||LA412_0==Class||(LA412_0>=False && LA412_0<=Super)||LA412_0==Union||(LA412_0>=Yield && LA412_0<=This)||(LA412_0>=From && LA412_0<=Void)||(LA412_0>=Get && LA412_0<=Set)||LA412_0==PlusSignPlusSign||LA412_0==HyphenMinusHyphenMinus||LA412_0==SolidusEqualsSign||LA412_0==As||LA412_0==Of||LA412_0==ExclamationMark||LA412_0==LeftParenthesis||(LA412_0>=Asterisk && LA412_0<=PlusSign)||LA412_0==HyphenMinus||LA412_0==Solidus||LA412_0==LessThanSign||(LA412_0>=CommercialAt && LA412_0<=LeftSquareBracket)||LA412_0==LeftCurlyBracket||LA412_0==Tilde||LA412_0==RULE_DOUBLE||(LA412_0>=RULE_HEX_INT && LA412_0<=RULE_LEGACY_OCTAL_INT)||LA412_0==RULE_SCIENTIFIC_INT||LA412_0==RULE_IDENTIFIER||LA412_0==RULE_STRING||(LA412_0>=RULE_TEMPLATE_HEAD && LA412_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA412_0==RULE_INT) ) {
                        alt412=1;
                    }
                    switch (alt412) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_135);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_136);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop414:
                    do {
                        int alt414=2;
                        int LA414_0 = input.LA(1);

                        if ( (LA414_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt414=1;
                        }


                        switch (alt414) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_135);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt413=2;
                    	    int LA413_0 = input.LA(1);

                    	    if ( ((LA413_0>=Intersection && LA413_0<=Implements)||(LA413_0>=Promisify && LA413_0<=Abstract)||(LA413_0>=External && LA413_0<=Function)||(LA413_0>=Private && LA413_0<=Delete)||LA413_0==Public||LA413_0==Static||(LA413_0>=Target && LA413_0<=Await)||LA413_0==Class||(LA413_0>=False && LA413_0<=Super)||LA413_0==Union||(LA413_0>=Yield && LA413_0<=This)||(LA413_0>=From && LA413_0<=Void)||(LA413_0>=Get && LA413_0<=Set)||LA413_0==PlusSignPlusSign||LA413_0==HyphenMinusHyphenMinus||LA413_0==SolidusEqualsSign||LA413_0==As||LA413_0==Of||LA413_0==ExclamationMark||LA413_0==LeftParenthesis||(LA413_0>=Asterisk && LA413_0<=PlusSign)||LA413_0==HyphenMinus||LA413_0==Solidus||LA413_0==LessThanSign||(LA413_0>=CommercialAt && LA413_0<=LeftSquareBracket)||LA413_0==LeftCurlyBracket||LA413_0==Tilde||LA413_0==RULE_DOUBLE||(LA413_0>=RULE_HEX_INT && LA413_0<=RULE_LEGACY_OCTAL_INT)||LA413_0==RULE_SCIENTIFIC_INT||LA413_0==RULE_IDENTIFIER||LA413_0==RULE_STRING||(LA413_0>=RULE_TEMPLATE_HEAD && LA413_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA413_0==RULE_INT) ) {
                    	        alt413=1;
                    	    }
                    	    switch (alt413) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_135);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_136);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop414;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSXParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        		setInTemplateSegment();
            
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSXParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSXParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateHead_return retval = new InternalN4JSXParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTail_return retval = new InternalN4JSXParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddle_return retval = new InternalN4JSXParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLiteral_return retval = new InternalN4JSXParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;



            
        try {
            {
            int alt416=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt416=1;
                }
                break;
            case False:
            case True:
                {
                alt416=2;
                }
                break;
            case RULE_STRING:
                {
                alt416=3;
                }
                break;
            case Null:
                {
                alt416=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt416=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }

            switch (alt416) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNullLiteral_return retval = new InternalN4JSXParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;


            
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBooleanLiteral_return retval = new InternalN4JSXParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;


            
        try {
            {
            {
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==True) ) {
                alt417=1;
            }
            else if ( (LA417_0==False) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);

                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleStringLiteral_return retval = new InternalN4JSXParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteral_return retval = new InternalN4JSXParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSXParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;



            
        try {
            {
            int alt418=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt418=1;
                }
                break;
            case RULE_INT:
                {
                alt418=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt418=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt418=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt418=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt418=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt418=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);

                throw nvae;
            }

            switch (alt418) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleDoubleLiteral_return retval = new InternalN4JSXParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleIntLiteral_return retval = new InternalN4JSXParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleOctalIntLiteral_return retval = new InternalN4JSXParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSXParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleHexIntLiteral_return retval = new InternalN4JSXParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBinaryIntLiteral_return retval = new InternalN4JSXParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleScientificIntLiteral_return retval = new InternalN4JSXParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSXParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteralAsString_return retval = new InternalN4JSXParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);


            
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierOrThis_return retval = new InternalN4JSXParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;


            
        try {
            {
            int alt419=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt419=1;
                }
                break;
            case This:
                {
                alt419=2;
                }
                break;
            case Promisify:
                {
                alt419=3;
                }
                break;
            case Target:
                {
                alt419=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);

                throw nvae;
            }

            switch (alt419) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationName_return retval = new InternalN4JSXParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;


            
        try {
            {
            int alt420=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt420=1;
                }
                break;
            case This:
                {
                alt420=2;
                }
                break;
            case Target:
                {
                alt420=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);

                throw nvae;
            }

            switch (alt420) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSXParser.ruleREGEX_LITERAL_return retval = new InternalN4JSXParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        		setInRegularExpression();
            
        try {
            {
            {
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==Solidus) ) {
                alt421=1;
            }
            else if ( (LA421_0==SolidusEqualsSign) ) {
                alt421=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1()); 
                    }

                    }
                    break;

            }
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==RULE_REGEX_TAIL) ) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTailLiteral_return retval = new InternalN4JSXParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt423=2;
            int LA423_0 = input.LA(1);

            if ( (LA423_0==RULE_TEMPLATE_END) ) {
                alt423=1;
            }
            switch (alt423) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSXParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSXParser.ruleSemi_return retval = new InternalN4JSXParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        		int marker = input.mark();
        		promoteEOL();
            
        try {
            int alt424=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt424=1;
                }
                break;
            case EOF:
                {
                alt424=2;
                }
                break;
            case RULE_EOL:
                {
                alt424=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt424=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt424=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);

                throw nvae;
            }

            switch (alt424) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSXParser.ruleNoLineTerminator_return retval = new InternalN4JSXParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;


            
        try {
            {
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( (LA425_0==RULE_NO_LINE_TERMINATOR) ) {
                alt425=1;
            }
            switch (alt425) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotation_return retval = new InternalN4JSXParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return retval = new InternalN4JSXParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSXParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSXParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_105);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt428=2;
            alt428 = dfa428.predict(input);
            switch (alt428) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0()); 
                    }

                    }
                    int alt427=2;
                    int LA427_0 = input.LA(1);

                    if ( ((LA427_0>=Intersection && LA427_0<=Constructor)||LA427_0==Promisify||LA427_0==Target||LA427_0==Await||LA427_0==False||LA427_0==Union||LA427_0==This||(LA427_0>=Null && LA427_0<=Void)||LA427_0==SolidusEqualsSign||LA427_0==LeftParenthesis||LA427_0==Solidus||LA427_0==QuestionMark||LA427_0==LeftSquareBracket||LA427_0==LeftCurlyBracket||LA427_0==Tilde||LA427_0==RULE_DOUBLE||(LA427_0>=RULE_HEX_INT && LA427_0<=RULE_LEGACY_OCTAL_INT)||LA427_0==RULE_SCIENTIFIC_INT||LA427_0==RULE_IDENTIFIER||LA427_0==RULE_STRING||LA427_0==RULE_INT) ) {
                        alt427=1;
                    }
                    switch (alt427) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop426:
                            do {
                                int alt426=2;
                                int LA426_0 = input.LA(1);

                                if ( (LA426_0==Comma) ) {
                                    alt426=1;
                                }


                                switch (alt426) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_140); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop426;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationArgument_return retval = new InternalN4JSXParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;



            
        try {
            {
            int alt429=2;
            int LA429_0 = input.LA(1);

            if ( (LA429_0==False||LA429_0==Null||LA429_0==True||LA429_0==SolidusEqualsSign||LA429_0==Solidus||LA429_0==RULE_DOUBLE||(LA429_0>=RULE_HEX_INT && LA429_0<=RULE_LEGACY_OCTAL_INT)||LA429_0==RULE_SCIENTIFIC_INT||LA429_0==RULE_STRING||LA429_0==RULE_INT) ) {
                alt429=1;
            }
            else if ( ((LA429_0>=Intersection && LA429_0<=Constructor)||LA429_0==Promisify||LA429_0==Target||LA429_0==Await||LA429_0==Union||LA429_0==This||LA429_0==This_1||(LA429_0>=Type && LA429_0<=Void)||LA429_0==LeftParenthesis||LA429_0==QuestionMark||LA429_0==LeftSquareBracket||LA429_0==LeftCurlyBracket||LA429_0==Tilde||LA429_0==RULE_IDENTIFIER) ) {
                alt429=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);

                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSXParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSXParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationList_return retval = new InternalN4JSXParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_141);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2()); 
            }

            }


            }


            }


            }
            loop430:
            do {
                int alt430=2;
                int LA430_0 = input.LA(1);

                if ( (LA430_0==CommercialAt) ) {
                    alt430=1;
                }


                switch (alt430) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop430;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionAnnotationList_return retval = new InternalN4JSXParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt431=0;
            loop431:
            do {
                int alt431=2;
                int LA431_0 = input.LA(1);

                if ( (LA431_0==CommercialAt) ) {
                    alt431=1;
                }


                switch (alt431) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt431 >= 1 ) break loop431;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(431, input);
                        throw eee;
                }
                cnt431++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt432=0;
            loop432:
            do {
                int alt432=2;
                int LA432_0 = input.LA(1);

                if ( (LA432_0==CommercialAt) ) {
                    alt432=1;
                }


                switch (alt432) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt432 >= 1 ) break loop432;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(432, input);
                        throw eee;
                }
                cnt432++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSXParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt433=0;
            loop433:
            do {
                int alt433=2;
                int LA433_0 = input.LA(1);

                if ( (LA433_0==CommercialAt) ) {
                    alt433=1;
                }


                switch (alt433) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt433 >= 1 ) break loop433;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(433, input);
                        throw eee;
                }
                cnt433++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSXParser.ruleTypeReferenceName_return retval = new InternalN4JSXParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;


            
        try {
            {
            int alt434=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt434=1;
                }
                break;
            case This:
                {
                alt434=2;
                }
                break;
            case Await:
                {
                alt434=3;
                }
                break;
            case Promisify:
                {
                alt434=4;
                }
                break;
            case Target:
                {
                alt434=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt434=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);

                throw nvae;
            }

            switch (alt434) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_13); if (state.failed) return ;
            int alt435=2;
            int LA435_0 = input.LA(1);

            if ( (LA435_0==FullStop) ) {
                alt435=1;
            }
            switch (alt435) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_142); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0()); 
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassDeclaration_return retval = new InternalN4JSXParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop436:
            do {
                int alt436=2;
                int LA436_0 = input.LA(1);

                if ( ((LA436_0>=Protected && LA436_0<=Abstract)||LA436_0==External||(LA436_0>=Private && LA436_0<=Project)||LA436_0==Public||LA436_0==Static||LA436_0==Const) ) {
                    alt436=1;
                }


                switch (alt436) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_20);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop436;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2()); 
            }
            int alt437=2;
            int LA437_0 = input.LA(1);

            if ( (LA437_0==Tilde) ) {
                alt437=1;
            }
            switch (alt437) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( ((LA438_0>=Intersection && LA438_0<=Constructor)||(LA438_0>=Promisify && LA438_0<=Abstract)||LA438_0==External||(LA438_0>=Private && LA438_0<=Project)||LA438_0==Public||LA438_0==Static||LA438_0==Target||(LA438_0>=Async && LA438_0<=Await)||LA438_0==Union||(LA438_0>=Yield && LA438_0<=This)||LA438_0==From||LA438_0==Type||(LA438_0>=Get && LA438_0<=Let)||(LA438_0>=Out && LA438_0<=Set)||LA438_0==As||LA438_0==Of||LA438_0==RULE_IDENTIFIER) ) {
                alt438=1;
            }
            else if ( (LA438_0==Implements) ) {
                int LA438_2 = input.LA(2);

                if ( (LA438_2==Implements||LA438_2==Extends||LA438_2==LessThanSign||LA438_2==LeftCurlyBracket) ) {
                    alt438=1;
                }
            }
            switch (alt438) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt439=2;
            int LA439_0 = input.LA(1);

            if ( (LA439_0==LessThanSign) ) {
                alt439=1;
            }
            switch (alt439) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==Implements||LA440_0==Extends) ) {
                alt440=1;
            }
            switch (alt440) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSXParser.ruleMembers_return retval = new InternalN4JSXParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop441:
            do {
                int alt441=2;
                int LA441_0 = input.LA(1);

                if ( ((LA441_0>=Intersection && LA441_0<=With)||(LA441_0>=For && LA441_0<=Var)||(LA441_0>=As && LA441_0<=Of)||LA441_0==LeftParenthesis||LA441_0==Asterisk||LA441_0==LessThanSign||(LA441_0>=QuestionMark && LA441_0<=LeftSquareBracket)||LA441_0==LeftCurlyBracket||LA441_0==Tilde||LA441_0==RULE_DOUBLE||LA441_0==RULE_HEX_INT||LA441_0==RULE_OCTAL_INT||LA441_0==RULE_SCIENTIFIC_INT||LA441_0==RULE_IDENTIFIER||LA441_0==RULE_STRING||LA441_0==RULE_INT) ) {
                    alt441=1;
                }


                switch (alt441) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop441;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSXParser.norm1_Members_return retval = new InternalN4JSXParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop442:
            do {
                int alt442=2;
                int LA442_0 = input.LA(1);

                if ( ((LA442_0>=Intersection && LA442_0<=With)||(LA442_0>=For && LA442_0<=Var)||(LA442_0>=As && LA442_0<=Of)||LA442_0==LeftParenthesis||LA442_0==Asterisk||LA442_0==LessThanSign||(LA442_0>=QuestionMark && LA442_0<=LeftSquareBracket)||LA442_0==LeftCurlyBracket||LA442_0==Tilde||LA442_0==RULE_DOUBLE||LA442_0==RULE_HEX_INT||LA442_0==RULE_OCTAL_INT||LA442_0==RULE_SCIENTIFIC_INT||LA442_0==RULE_IDENTIFIER||LA442_0==RULE_STRING||LA442_0==RULE_INT) ) {
                    alt442=1;
                }


                switch (alt442) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop442;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.ruleClassExtendsClause_return retval = new InternalN4JSXParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==Extends) ) {
                alt446=1;
            }
            else if ( (LA446_0==Implements) ) {
                alt446=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 446, 0, input);

                throw nvae;
            }
            switch (alt446) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt445=2;
                    int LA445_0 = input.LA(1);

                    if ( (LA445_0==Void) && (synpred279_InternalN4JSXParser())) {
                        alt445=1;
                    }
                    else if ( (LA445_0==This) ) {
                        int LA445_2 = input.LA(2);

                        if ( (synpred279_InternalN4JSXParser()) ) {
                            alt445=1;
                        }
                        else if ( (true) ) {
                            alt445=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 445, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA445_0==Await) ) {
                        int LA445_3 = input.LA(2);

                        if ( (synpred279_InternalN4JSXParser()) ) {
                            alt445=1;
                        }
                        else if ( (true) ) {
                            alt445=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 445, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA445_0==Promisify) ) {
                        int LA445_4 = input.LA(2);

                        if ( (synpred279_InternalN4JSXParser()) ) {
                            alt445=1;
                        }
                        else if ( (true) ) {
                            alt445=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 445, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA445_0==Target) ) {
                        int LA445_5 = input.LA(2);

                        if ( (synpred279_InternalN4JSXParser()) ) {
                            alt445=1;
                        }
                        else if ( (true) ) {
                            alt445=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 445, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA445_0==RULE_IDENTIFIER) ) {
                        int LA445_6 = input.LA(2);

                        if ( (synpred279_InternalN4JSXParser()) ) {
                            alt445=1;
                        }
                        else if ( (true) ) {
                            alt445=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 445, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA445_0>=Intersection && LA445_0<=Implements)||(LA445_0>=Interface && LA445_0<=Abstract)||(LA445_0>=External && LA445_0<=Function)||(LA445_0>=Private && LA445_0<=Project)||LA445_0==Public||LA445_0==Static||LA445_0==Async||LA445_0==Class||(LA445_0>=False && LA445_0<=Super)||LA445_0==Union||LA445_0==Yield||(LA445_0>=From && LA445_0<=Type)||(LA445_0>=Get && LA445_0<=Set)||LA445_0==SolidusEqualsSign||LA445_0==As||LA445_0==Of||LA445_0==LeftParenthesis||LA445_0==Solidus||LA445_0==LessThanSign||(LA445_0>=CommercialAt && LA445_0<=LeftSquareBracket)||LA445_0==LeftCurlyBracket||LA445_0==RULE_DOUBLE||(LA445_0>=RULE_HEX_INT && LA445_0<=RULE_LEGACY_OCTAL_INT)||LA445_0==RULE_SCIENTIFIC_INT||LA445_0==RULE_STRING||(LA445_0>=RULE_TEMPLATE_HEAD && LA445_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA445_0==RULE_INT) ) {
                        alt445=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 445, 0, input);

                        throw nvae;
                    }
                    switch (alt445) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_145);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt444=2;
                            int LA444_0 = input.LA(1);

                            if ( (LA444_0==Implements||LA444_0==Extends) ) {
                                alt444=1;
                            }
                            switch (alt444) {
                                case 1 :
                                    {
                                    int alt443=2;
                                    int LA443_0 = input.LA(1);

                                    if ( (LA443_0==Implements) ) {
                                        alt443=1;
                                    }
                                    else if ( (LA443_0==Extends) ) {
                                        alt443=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 443, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt443) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.norm1_ClassExtendsClause_return retval = new InternalN4JSXParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==Extends) ) {
                alt450=1;
            }
            else if ( (LA450_0==Implements) ) {
                alt450=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 450, 0, input);

                throw nvae;
            }
            switch (alt450) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt449=2;
                    int LA449_0 = input.LA(1);

                    if ( (LA449_0==Void) && (synpred280_InternalN4JSXParser())) {
                        alt449=1;
                    }
                    else if ( (LA449_0==This) ) {
                        int LA449_2 = input.LA(2);

                        if ( (synpred280_InternalN4JSXParser()) ) {
                            alt449=1;
                        }
                        else if ( (true) ) {
                            alt449=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 449, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA449_0==Await) ) {
                        int LA449_3 = input.LA(2);

                        if ( (synpred280_InternalN4JSXParser()) ) {
                            alt449=1;
                        }
                        else if ( (true) ) {
                            alt449=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 449, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA449_0==Promisify) ) {
                        int LA449_4 = input.LA(2);

                        if ( (synpred280_InternalN4JSXParser()) ) {
                            alt449=1;
                        }
                        else if ( (true) ) {
                            alt449=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 449, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA449_0==Target) ) {
                        int LA449_5 = input.LA(2);

                        if ( (synpred280_InternalN4JSXParser()) ) {
                            alt449=1;
                        }
                        else if ( (true) ) {
                            alt449=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 449, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA449_0==RULE_IDENTIFIER) ) {
                        int LA449_6 = input.LA(2);

                        if ( (synpred280_InternalN4JSXParser()) ) {
                            alt449=1;
                        }
                        else if ( (true) ) {
                            alt449=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 449, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA449_0>=Intersection && LA449_0<=Implements)||(LA449_0>=Interface && LA449_0<=Abstract)||(LA449_0>=External && LA449_0<=Function)||(LA449_0>=Private && LA449_0<=Project)||LA449_0==Public||LA449_0==Static||LA449_0==Async||LA449_0==Class||(LA449_0>=False && LA449_0<=Super)||LA449_0==Union||(LA449_0>=From && LA449_0<=Type)||(LA449_0>=Get && LA449_0<=Set)||LA449_0==SolidusEqualsSign||LA449_0==As||LA449_0==Of||LA449_0==LeftParenthesis||LA449_0==Solidus||LA449_0==LessThanSign||(LA449_0>=CommercialAt && LA449_0<=LeftSquareBracket)||LA449_0==LeftCurlyBracket||LA449_0==RULE_DOUBLE||(LA449_0>=RULE_HEX_INT && LA449_0<=RULE_LEGACY_OCTAL_INT)||LA449_0==RULE_SCIENTIFIC_INT||LA449_0==RULE_STRING||(LA449_0>=RULE_TEMPLATE_HEAD && LA449_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA449_0==RULE_INT) ) {
                        alt449=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 449, 0, input);

                        throw nvae;
                    }
                    switch (alt449) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_145);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt448=2;
                            int LA448_0 = input.LA(1);

                            if ( (LA448_0==Implements||LA448_0==Extends) ) {
                                alt448=1;
                            }
                            switch (alt448) {
                                case 1 :
                                    {
                                    int alt447=2;
                                    int LA447_0 = input.LA(1);

                                    if ( (LA447_0==Implements) ) {
                                        alt447=1;
                                    }
                                    else if ( (LA447_0==Extends) ) {
                                        alt447=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 447, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt447) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleClassImplementsList_return retval = new InternalN4JSXParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_147);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0()); 
            }

            }


            }
            loop452:
            do {
                int alt452=2;
                int LA452_0 = input.LA(1);

                if ( (LA452_0==Implements||LA452_0==Extends||LA452_0==Comma) ) {
                    alt452=1;
                }


                switch (alt452) {
            	case 1 :
            	    {
            	    int alt451=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt451=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt451=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt451=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 451, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt451) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_146); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_147);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop452;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassExpression_return retval = new InternalN4JSXParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( ((LA453_0>=Intersection && LA453_0<=Constructor)||(LA453_0>=Promisify && LA453_0<=Abstract)||LA453_0==External||(LA453_0>=Private && LA453_0<=Project)||LA453_0==Public||LA453_0==Static||LA453_0==Target||(LA453_0>=Async && LA453_0<=Await)||LA453_0==Union||(LA453_0>=Yield && LA453_0<=This)||LA453_0==From||LA453_0==Type||(LA453_0>=Get && LA453_0<=Let)||(LA453_0>=Out && LA453_0<=Set)||LA453_0==As||LA453_0==Of||LA453_0==RULE_IDENTIFIER) ) {
                alt453=1;
            }
            else if ( (LA453_0==Implements) ) {
                int LA453_2 = input.LA(2);

                if ( (LA453_2==Implements||LA453_2==Extends||LA453_2==LeftCurlyBracket) ) {
                    alt453=1;
                }
            }
            switch (alt453) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==Implements||LA454_0==Extends) ) {
                alt454=1;
            }
            switch (alt454) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_N4ClassExpression_return retval = new InternalN4JSXParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt455=2;
            int LA455_0 = input.LA(1);

            if ( ((LA455_0>=Intersection && LA455_0<=Constructor)||(LA455_0>=Promisify && LA455_0<=Abstract)||LA455_0==External||(LA455_0>=Private && LA455_0<=Project)||LA455_0==Public||LA455_0==Static||LA455_0==Target||(LA455_0>=Async && LA455_0<=Await)||LA455_0==Union||LA455_0==This||LA455_0==From||LA455_0==Type||(LA455_0>=Get && LA455_0<=Let)||(LA455_0>=Out && LA455_0<=Set)||LA455_0==As||LA455_0==Of||LA455_0==RULE_IDENTIFIER) ) {
                alt455=1;
            }
            else if ( (LA455_0==Implements) ) {
                int LA455_2 = input.LA(2);

                if ( (LA455_2==Implements||LA455_2==Extends||LA455_2==LeftCurlyBracket) ) {
                    alt455=1;
                }
            }
            switch (alt455) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_68);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( (LA456_0==Implements||LA456_0==Extends) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    {
                    pushFollow(FOLLOW_68);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSXParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop457:
            do {
                int alt457=2;
                int LA457_0 = input.LA(1);

                if ( ((LA457_0>=Protected && LA457_0<=Abstract)||LA457_0==External||(LA457_0>=Private && LA457_0<=Project)||LA457_0==Public||LA457_0==Static||LA457_0==Const) ) {
                    alt457=1;
                }


                switch (alt457) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_23);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop457;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2()); 
            }
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( (LA458_0==Tilde) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt459=2;
            int LA459_0 = input.LA(1);

            if ( ((LA459_0>=Intersection && LA459_0<=Constructor)||(LA459_0>=Promisify && LA459_0<=Abstract)||LA459_0==External||(LA459_0>=Private && LA459_0<=Project)||LA459_0==Public||LA459_0==Static||LA459_0==Target||(LA459_0>=Async && LA459_0<=Await)||LA459_0==Union||(LA459_0>=Yield && LA459_0<=This)||LA459_0==From||LA459_0==Type||(LA459_0>=Get && LA459_0<=Let)||(LA459_0>=Out && LA459_0<=Set)||LA459_0==As||LA459_0==Of||LA459_0==RULE_IDENTIFIER) ) {
                alt459=1;
            }
            else if ( (LA459_0==Implements) ) {
                int LA459_2 = input.LA(2);

                if ( (LA459_2==Implements||LA459_2==Extends||LA459_2==LessThanSign||LA459_2==LeftCurlyBracket) ) {
                    alt459=1;
                }
            }
            switch (alt459) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt460=2;
            int LA460_0 = input.LA(1);

            if ( (LA460_0==LessThanSign) ) {
                alt460=1;
            }
            switch (alt460) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt461=2;
            int LA461_0 = input.LA(1);

            if ( (LA461_0==Implements||LA461_0==Extends) ) {
                alt461=1;
            }
            switch (alt461) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleInterfaceImplementsList_return retval = new InternalN4JSXParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt462=2;
            int LA462_0 = input.LA(1);

            if ( (LA462_0==Extends) ) {
                alt462=1;
            }
            else if ( (LA462_0==Implements) ) {
                alt462=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 462, 0, input);

                throw nvae;
            }
            switch (alt462) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_147);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1()); 
            }

            }


            }
            loop464:
            do {
                int alt464=2;
                int LA464_0 = input.LA(1);

                if ( (LA464_0==Implements||LA464_0==Extends||LA464_0==Comma) ) {
                    alt464=1;
                }


                switch (alt464) {
            	case 1 :
            	    {
            	    int alt463=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt463=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt463=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt463=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 463, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt463) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_146); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_146); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_147);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop464;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumDeclaration_return retval = new InternalN4JSXParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop465:
            do {
                int alt465=2;
                int LA465_0 = input.LA(1);

                if ( ((LA465_0>=Protected && LA465_0<=Abstract)||LA465_0==External||(LA465_0>=Private && LA465_0<=Project)||LA465_0==Public||LA465_0==Static||LA465_0==Const) ) {
                    alt465=1;
                }


                switch (alt465) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_24);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop465;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2()); 
            }
            int alt466=2;
            int LA466_0 = input.LA(1);

            if ( ((LA466_0>=Intersection && LA466_0<=Implements)||(LA466_0>=Promisify && LA466_0<=Abstract)||LA466_0==External||(LA466_0>=Private && LA466_0<=Project)||LA466_0==Public||LA466_0==Static||LA466_0==Target||(LA466_0>=Async && LA466_0<=Await)||LA466_0==Union||(LA466_0>=Yield && LA466_0<=This)||LA466_0==From||LA466_0==Type||(LA466_0>=Get && LA466_0<=Let)||(LA466_0>=Out && LA466_0<=Set)||LA466_0==As||LA466_0==Of||LA466_0==RULE_IDENTIFIER) ) {
                alt466=1;
            }
            switch (alt466) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt468=2;
            int LA468_0 = input.LA(1);

            if ( (LA468_0==Promisify||LA468_0==Target||LA468_0==This||LA468_0==RULE_IDENTIFIER) ) {
                alt468=1;
            }
            switch (alt468) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0()); 
                    }

                    }


                    }
                    loop467:
                    do {
                        int alt467=2;
                        int LA467_0 = input.LA(1);

                        if ( (LA467_0==Comma) ) {
                            alt467=1;
                        }


                        switch (alt467) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop467;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumLiteral_return retval = new InternalN4JSXParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt469=2;
            int LA469_0 = input.LA(1);

            if ( (LA469_0==Colon) ) {
                alt469=1;
            }
            switch (alt469) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt470=6;
            alt470 = dfa470.predict(input);
            switch (alt470) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt471=6;
            alt471 = dfa471.predict(input);
            switch (alt471) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_150);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt483=4;
            alt483 = dfa483.predict(input);
            switch (alt483) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop472:
                    do {
                        int alt472=2;
                        int LA472_0 = input.LA(1);

                        if ( ((LA472_0>=Protected && LA472_0<=Abstract)||LA472_0==External||(LA472_0>=Private && LA472_0<=Project)||LA472_0==Public||LA472_0==Static||LA472_0==Const) ) {
                            alt472=1;
                        }


                        switch (alt472) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop472;
                        }
                    } while (true);

                    pushFollow(FOLLOW_152);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt473=2;
                    alt473 = dfa473.predict(input);
                    switch (alt473) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt474=2;
                    int LA474_0 = input.LA(1);

                    if ( (LA474_0==Semicolon) ) {
                        alt474=1;
                    }
                    switch (alt474) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop475:
                    do {
                        int alt475=2;
                        int LA475_0 = input.LA(1);

                        if ( ((LA475_0>=Protected && LA475_0<=Abstract)||LA475_0==External||(LA475_0>=Private && LA475_0<=Project)||LA475_0==Public||LA475_0==Static||LA475_0==Const) ) {
                            alt475=1;
                        }


                        switch (alt475) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_153);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop475;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_1_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt476=2;
                    alt476 = dfa476.predict(input);
                    switch (alt476) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_1_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt477=2;
                    int LA477_0 = input.LA(1);

                    if ( (LA477_0==Semicolon) ) {
                        alt477=1;
                    }
                    switch (alt477) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop478:
                    do {
                        int alt478=2;
                        alt478 = dfa478.predict(input);
                        switch (alt478) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_150);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop478;
                        }
                    } while (true);
                    int alt479=2;
                    int LA479_0 = input.LA(1);

                    if ( (LA479_0==LessThanSign) ) {
                        alt479=1;
                    }
                    switch (alt479) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt480=2;
                    alt480 = dfa480.predict(input);
                    switch (alt480) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt481=2;
                    int LA481_0 = input.LA(1);

                    if ( (LA481_0==Asterisk) ) {
                        alt481=1;
                    }
                    else if ( ((LA481_0>=Intersection && LA481_0<=With)||(LA481_0>=For && LA481_0<=Var)||(LA481_0>=As && LA481_0<=Of)||LA481_0==LeftSquareBracket||LA481_0==RULE_DOUBLE||LA481_0==RULE_HEX_INT||LA481_0==RULE_OCTAL_INT||LA481_0==RULE_SCIENTIFIC_INT||LA481_0==RULE_IDENTIFIER||LA481_0==RULE_STRING||LA481_0==RULE_INT) ) {
                        alt481=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 481, 0, input);

                        throw nvae;
                    }
                    switch (alt481) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt482=2;
                    int LA482_0 = input.LA(1);

                    if ( (LA482_0==Semicolon) ) {
                        alt482=1;
                    }
                    switch (alt482) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_150);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt495=4;
            alt495 = dfa495.predict(input);
            switch (alt495) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop484:
                    do {
                        int alt484=2;
                        int LA484_0 = input.LA(1);

                        if ( ((LA484_0>=Protected && LA484_0<=Abstract)||LA484_0==External||(LA484_0>=Private && LA484_0<=Project)||LA484_0==Public||LA484_0==Static||LA484_0==Const) ) {
                            alt484=1;
                        }


                        switch (alt484) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop484;
                        }
                    } while (true);

                    pushFollow(FOLLOW_152);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt485=2;
                    alt485 = dfa485.predict(input);
                    switch (alt485) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);

                    if ( (LA486_0==Semicolon) ) {
                        alt486=1;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop487:
                    do {
                        int alt487=2;
                        int LA487_0 = input.LA(1);

                        if ( ((LA487_0>=Protected && LA487_0<=Abstract)||LA487_0==External||(LA487_0>=Private && LA487_0<=Project)||LA487_0==Public||LA487_0==Static||LA487_0==Const) ) {
                            alt487=1;
                        }


                        switch (alt487) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_153);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop487;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_1_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt488=2;
                    alt488 = dfa488.predict(input);
                    switch (alt488) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_1_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt489=2;
                    int LA489_0 = input.LA(1);

                    if ( (LA489_0==Semicolon) ) {
                        alt489=1;
                    }
                    switch (alt489) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop490:
                    do {
                        int alt490=2;
                        alt490 = dfa490.predict(input);
                        switch (alt490) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_150);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop490;
                        }
                    } while (true);
                    int alt491=2;
                    int LA491_0 = input.LA(1);

                    if ( (LA491_0==LessThanSign) ) {
                        alt491=1;
                    }
                    switch (alt491) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt492=2;
                    alt492 = dfa492.predict(input);
                    switch (alt492) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt493=2;
                    int LA493_0 = input.LA(1);

                    if ( (LA493_0==Asterisk) ) {
                        alt493=1;
                    }
                    else if ( ((LA493_0>=Intersection && LA493_0<=With)||(LA493_0>=For && LA493_0<=Var)||(LA493_0>=As && LA493_0<=Of)||LA493_0==LeftSquareBracket||LA493_0==RULE_DOUBLE||LA493_0==RULE_HEX_INT||LA493_0==RULE_OCTAL_INT||LA493_0==RULE_SCIENTIFIC_INT||LA493_0==RULE_IDENTIFIER||LA493_0==RULE_STRING||LA493_0==RULE_INT) ) {
                        alt493=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 493, 0, input);

                        throw nvae;
                    }
                    switch (alt493) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt494=2;
                    int LA494_0 = input.LA(1);

                    if ( (LA494_0==Semicolon) ) {
                        alt494=1;
                    }
                    switch (alt494) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSXParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop496:
            do {
                int alt496=2;
                alt496 = dfa496.predict(input);
                switch (alt496) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_102);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop496;
                }
            } while (true);
            int alt497=2;
            alt497 = dfa497.predict(input);
            switch (alt497) {
                case 1 :
                    {
                    pushFollow(FOLLOW_102);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_154);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt498=2;
            int LA498_0 = input.LA(1);

            if ( (LA498_0==Colon) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    pushFollow(FOLLOW_155);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==EqualsSign) ) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSXParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop500:
            do {
                int alt500=2;
                alt500 = dfa500.predict(input);
                switch (alt500) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_102);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop500;
                }
            } while (true);
            int alt501=2;
            alt501 = dfa501.predict(input);
            switch (alt501) {
                case 1 :
                    {
                    pushFollow(FOLLOW_102);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_154);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==Colon) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    pushFollow(FOLLOW_155);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==EqualsSign) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4FieldDeclaration_return retval = new InternalN4JSXParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSXParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MethodDeclaration_return retval = new InternalN4JSXParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop504:
            do {
                int alt504=2;
                alt504 = dfa504.predict(input);
                switch (alt504) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_150);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop504;
                }
            } while (true);
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==LessThanSign) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt506=2;
            alt506 = dfa506.predict(input);
            switch (alt506) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt507=2;
            int LA507_0 = input.LA(1);

            if ( (LA507_0==Asterisk) ) {
                alt507=1;
            }
            else if ( ((LA507_0>=Intersection && LA507_0<=With)||(LA507_0>=For && LA507_0<=Var)||(LA507_0>=As && LA507_0<=Of)||LA507_0==LeftSquareBracket||LA507_0==RULE_DOUBLE||LA507_0==RULE_HEX_INT||LA507_0==RULE_OCTAL_INT||LA507_0==RULE_SCIENTIFIC_INT||LA507_0==RULE_IDENTIFIER||LA507_0==RULE_STRING||LA507_0==RULE_INT) ) {
                alt507=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 507, 0, input);

                throw nvae;
            }
            switch (alt507) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==Semicolon) ) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSXParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop509:
            do {
                int alt509=2;
                alt509 = dfa509.predict(input);
                switch (alt509) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_150);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop509;
                }
            } while (true);
            int alt510=2;
            int LA510_0 = input.LA(1);

            if ( (LA510_0==LessThanSign) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt511=2;
            alt511 = dfa511.predict(input);
            switch (alt511) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( (LA512_0==Asterisk) ) {
                alt512=1;
            }
            else if ( ((LA512_0>=Intersection && LA512_0<=With)||(LA512_0>=For && LA512_0<=Var)||(LA512_0>=As && LA512_0<=Of)||LA512_0==LeftSquareBracket||LA512_0==RULE_DOUBLE||LA512_0==RULE_HEX_INT||LA512_0==RULE_OCTAL_INT||LA512_0==RULE_SCIENTIFIC_INT||LA512_0==RULE_IDENTIFIER||LA512_0==RULE_STRING||LA512_0==RULE_INT) ) {
                alt512=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 512, 0, input);

                throw nvae;
            }
            switch (alt512) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==Semicolon) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_104);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt514=2;
            int LA514_0 = input.LA(1);

            if ( (LA514_0==Semicolon) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_104);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==Semicolon) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_156);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==LeftCurlyBracket) && (synpred311_InternalN4JSXParser())) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_156);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==LeftCurlyBracket) && (synpred312_InternalN4JSXParser())) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_157);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( (LA518_0==Colon) ) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_156);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt519=2;
            alt519 = dfa519.predict(input);
            switch (alt519) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_157);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt520=2;
            int LA520_0 = input.LA(1);

            if ( (LA520_0==Colon) ) {
                alt520=1;
            }
            switch (alt520) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_156);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt521=2;
            alt521 = dfa521.predict(input);
            switch (alt521) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4GetterDeclaration_return retval = new InternalN4JSXParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop522:
            do {
                int alt522=2;
                int LA522_0 = input.LA(1);

                if ( ((LA522_0>=Protected && LA522_0<=Abstract)||LA522_0==External||(LA522_0>=Private && LA522_0<=Project)||LA522_0==Public||LA522_0==Static||LA522_0==Const) ) {
                    alt522=1;
                }


                switch (alt522) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_151);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop522;
                }
            } while (true);

            pushFollow(FOLLOW_152);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt523=2;
            alt523 = dfa523.predict(input);
            switch (alt523) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt524=2;
            int LA524_0 = input.LA(1);

            if ( (LA524_0==Semicolon) ) {
                alt524=1;
            }
            switch (alt524) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop525:
            do {
                int alt525=2;
                int LA525_0 = input.LA(1);

                if ( ((LA525_0>=Protected && LA525_0<=Abstract)||LA525_0==External||(LA525_0>=Private && LA525_0<=Project)||LA525_0==Public||LA525_0==Static||LA525_0==Const) ) {
                    alt525=1;
                }


                switch (alt525) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_151);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop525;
                }
            } while (true);

            pushFollow(FOLLOW_152);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt526=2;
            alt526 = dfa526.predict(input);
            switch (alt526) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt527=2;
            int LA527_0 = input.LA(1);

            if ( (LA527_0==Semicolon) ) {
                alt527=1;
            }
            switch (alt527) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSXParser.ruleGetterHeader_return retval = new InternalN4JSXParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt528=2;
            int LA528_0 = input.LA(1);

            if ( ((LA528_0>=Intersection && LA528_0<=Constructor)||LA528_0==Promisify||LA528_0==Target||LA528_0==Await||LA528_0==Union||LA528_0==This||LA528_0==This_1||(LA528_0>=Type && LA528_0<=Void)||LA528_0==QuestionMark||LA528_0==LeftCurlyBracket||LA528_0==Tilde||LA528_0==RULE_IDENTIFIER) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    pushFollow(FOLLOW_158);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt529=2;
            int LA529_0 = input.LA(1);

            if ( (LA529_0==Colon) ) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_GetterHeader_return retval = new InternalN4JSXParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt530=2;
            int LA530_0 = input.LA(1);

            if ( ((LA530_0>=Intersection && LA530_0<=Constructor)||LA530_0==Promisify||LA530_0==Target||LA530_0==Await||LA530_0==Union||LA530_0==This||LA530_0==This_1||(LA530_0>=Type && LA530_0<=Void)||LA530_0==QuestionMark||LA530_0==LeftCurlyBracket||LA530_0==Tilde||LA530_0==RULE_IDENTIFIER) ) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    pushFollow(FOLLOW_158);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt531=2;
            int LA531_0 = input.LA(1);

            if ( (LA531_0==Colon) ) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4SetterDeclaration_return retval = new InternalN4JSXParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop532:
            do {
                int alt532=2;
                int LA532_0 = input.LA(1);

                if ( ((LA532_0>=Protected && LA532_0<=Abstract)||LA532_0==External||(LA532_0>=Private && LA532_0<=Project)||LA532_0==Public||LA532_0==Static||LA532_0==Const) ) {
                    alt532=1;
                }


                switch (alt532) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_153);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop532;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt533=2;
            alt533 = dfa533.predict(input);
            switch (alt533) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt534=2;
            int LA534_0 = input.LA(1);

            if ( (LA534_0==Semicolon) ) {
                alt534=1;
            }
            switch (alt534) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop535:
            do {
                int alt535=2;
                int LA535_0 = input.LA(1);

                if ( ((LA535_0>=Protected && LA535_0<=Abstract)||LA535_0==External||(LA535_0>=Private && LA535_0<=Project)||LA535_0==Public||LA535_0==Static||LA535_0==Const) ) {
                    alt535=1;
                }


                switch (alt535) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_153);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop535;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt536=2;
            alt536 = dfa536.predict(input);
            switch (alt536) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_4_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt537=2;
            int LA537_0 = input.LA(1);

            if ( (LA537_0==Semicolon) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleBindingPattern_return retval = new InternalN4JSXParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt538=2;
            int LA538_0 = input.LA(1);

            if ( (LA538_0==LeftCurlyBracket) ) {
                alt538=1;
            }
            else if ( (LA538_0==LeftSquareBracket) ) {
                alt538=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 538, 0, input);

                throw nvae;
            }
            switch (alt538) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingPattern_return retval = new InternalN4JSXParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt539=2;
            int LA539_0 = input.LA(1);

            if ( (LA539_0==LeftCurlyBracket) ) {
                alt539=1;
            }
            else if ( (LA539_0==LeftSquareBracket) ) {
                alt539=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 539, 0, input);

                throw nvae;
            }
            switch (alt539) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleObjectBindingPattern_return retval = new InternalN4JSXParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt541=2;
            int LA541_0 = input.LA(1);

            if ( ((LA541_0>=Intersection && LA541_0<=With)||(LA541_0>=For && LA541_0<=Var)||(LA541_0>=As && LA541_0<=Of)||(LA541_0>=CommercialAt && LA541_0<=LeftSquareBracket)||LA541_0==RULE_DOUBLE||LA541_0==RULE_HEX_INT||LA541_0==RULE_OCTAL_INT||LA541_0==RULE_SCIENTIFIC_INT||LA541_0==RULE_IDENTIFIER||LA541_0==RULE_STRING||LA541_0==RULE_INT) ) {
                alt541=1;
            }
            switch (alt541) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop540:
                    do {
                        int alt540=2;
                        int LA540_0 = input.LA(1);

                        if ( (LA540_0==Comma) ) {
                            alt540=1;
                        }


                        switch (alt540) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_160); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop540;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSXParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( ((LA543_0>=Intersection && LA543_0<=With)||(LA543_0>=For && LA543_0<=Var)||(LA543_0>=As && LA543_0<=Of)||(LA543_0>=CommercialAt && LA543_0<=LeftSquareBracket)||LA543_0==RULE_DOUBLE||LA543_0==RULE_HEX_INT||LA543_0==RULE_OCTAL_INT||LA543_0==RULE_SCIENTIFIC_INT||LA543_0==RULE_IDENTIFIER||LA543_0==RULE_STRING||LA543_0==RULE_INT) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop542:
                    do {
                        int alt542=2;
                        int LA542_0 = input.LA(1);

                        if ( (LA542_0==Comma) ) {
                            alt542=1;
                        }


                        switch (alt542) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_160); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop542;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleArrayBindingPattern_return retval = new InternalN4JSXParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop544:
            do {
                int alt544=2;
                int LA544_0 = input.LA(1);

                if ( (LA544_0==Comma) ) {
                    alt544=1;
                }


                switch (alt544) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_161);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop544;
                }
            } while (true);
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( ((LA549_0>=Intersection && LA549_0<=Implements)||(LA549_0>=Promisify && LA549_0<=Abstract)||LA549_0==External||(LA549_0>=Private && LA549_0<=Project)||LA549_0==Public||LA549_0==Static||LA549_0==Target||(LA549_0>=Async && LA549_0<=Await)||LA549_0==Union||(LA549_0>=Yield && LA549_0<=This)||LA549_0==From||LA549_0==Type||LA549_0==FullStopFullStopFullStop||(LA549_0>=Get && LA549_0<=Let)||(LA549_0>=Out && LA549_0<=Set)||LA549_0==As||LA549_0==Of||(LA549_0>=CommercialAt && LA549_0<=LeftSquareBracket)||LA549_0==LeftCurlyBracket||LA549_0==RULE_IDENTIFIER) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop546:
                    do {
                        int alt546=2;
                        alt546 = dfa546.predict(input);
                        switch (alt546) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_162); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop545:
                    	    do {
                    	        int alt545=2;
                    	        int LA545_0 = input.LA(1);

                    	        if ( (LA545_0==Comma) ) {
                    	            alt545=1;
                    	        }


                    	        switch (alt545) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_162);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop545;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop546;
                        }
                    } while (true);
                    int alt548=2;
                    int LA548_0 = input.LA(1);

                    if ( (LA548_0==Comma) ) {
                        alt548=1;
                    }
                    switch (alt548) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop547:
                            do {
                                int alt547=2;
                                int LA547_0 = input.LA(1);

                                if ( (LA547_0==Comma) ) {
                                    alt547=1;
                                }


                                switch (alt547) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop547;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSXParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop550:
            do {
                int alt550=2;
                int LA550_0 = input.LA(1);

                if ( (LA550_0==Comma) ) {
                    alt550=1;
                }


                switch (alt550) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_161);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop550;
                }
            } while (true);
            int alt555=2;
            int LA555_0 = input.LA(1);

            if ( ((LA555_0>=Intersection && LA555_0<=Implements)||(LA555_0>=Promisify && LA555_0<=Abstract)||LA555_0==External||(LA555_0>=Private && LA555_0<=Project)||LA555_0==Public||LA555_0==Static||LA555_0==Target||(LA555_0>=Async && LA555_0<=Await)||LA555_0==Union||LA555_0==This||LA555_0==From||LA555_0==Type||LA555_0==FullStopFullStopFullStop||(LA555_0>=Get && LA555_0<=Let)||(LA555_0>=Out && LA555_0<=Set)||LA555_0==As||LA555_0==Of||(LA555_0>=CommercialAt && LA555_0<=LeftSquareBracket)||LA555_0==LeftCurlyBracket||LA555_0==RULE_IDENTIFIER) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop552:
                    do {
                        int alt552=2;
                        alt552 = dfa552.predict(input);
                        switch (alt552) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_162); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop551:
                    	    do {
                    	        int alt551=2;
                    	        int LA551_0 = input.LA(1);

                    	        if ( (LA551_0==Comma) ) {
                    	            alt551=1;
                    	        }


                    	        switch (alt551) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_162);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop551;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop552;
                        }
                    } while (true);
                    int alt554=2;
                    int LA554_0 = input.LA(1);

                    if ( (LA554_0==Comma) ) {
                        alt554=1;
                    }
                    switch (alt554) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop553:
                            do {
                                int alt553=2;
                                int LA553_0 = input.LA(1);

                                if ( (LA553_0==Comma) ) {
                                    alt553=1;
                                }


                                switch (alt553) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop553;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSXParser.ruleBindingProperty_return retval = new InternalN4JSXParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt556=2;
            alt556 = dfa556.predict(input);
            switch (alt556) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingProperty_return retval = new InternalN4JSXParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt557=2;
            alt557 = dfa557.predict(input);
            switch (alt557) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.ruleSingleNameBinding_return retval = new InternalN4JSXParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_SingleNameBinding_return retval = new InternalN4JSXParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElement_return retval = new InternalN4JSXParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt559=2;
            int LA559_0 = input.LA(1);

            if ( (LA559_0==LeftCurlyBracket) && (synpred329_InternalN4JSXParser())) {
                alt559=1;
            }
            else if ( (LA559_0==LeftSquareBracket) && (synpred329_InternalN4JSXParser())) {
                alt559=1;
            }
            else if ( ((LA559_0>=Intersection && LA559_0<=Implements)||(LA559_0>=Promisify && LA559_0<=Abstract)||LA559_0==External||(LA559_0>=Private && LA559_0<=Project)||LA559_0==Public||LA559_0==Static||LA559_0==Target||(LA559_0>=Async && LA559_0<=Await)||LA559_0==Union||(LA559_0>=Yield && LA559_0<=This)||LA559_0==From||LA559_0==Type||(LA559_0>=Get && LA559_0<=Let)||(LA559_0>=Out && LA559_0<=Set)||LA559_0==As||LA559_0==Of||LA559_0==CommercialAt||LA559_0==RULE_IDENTIFIER) ) {
                alt559=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 559, 0, input);

                throw nvae;
            }
            switch (alt559) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt558=2;
                    int LA558_0 = input.LA(1);

                    if ( (LA558_0==EqualsSign) ) {
                        alt558=1;
                    }
                    switch (alt558) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElement_return retval = new InternalN4JSXParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt561=2;
            int LA561_0 = input.LA(1);

            if ( (LA561_0==LeftCurlyBracket) && (synpred330_InternalN4JSXParser())) {
                alt561=1;
            }
            else if ( (LA561_0==LeftSquareBracket) && (synpred330_InternalN4JSXParser())) {
                alt561=1;
            }
            else if ( ((LA561_0>=Intersection && LA561_0<=Implements)||(LA561_0>=Promisify && LA561_0<=Abstract)||LA561_0==External||(LA561_0>=Private && LA561_0<=Project)||LA561_0==Public||LA561_0==Static||LA561_0==Target||(LA561_0>=Async && LA561_0<=Await)||LA561_0==Union||LA561_0==This||LA561_0==From||LA561_0==Type||(LA561_0>=Get && LA561_0<=Let)||(LA561_0>=Out && LA561_0<=Set)||LA561_0==As||LA561_0==Of||LA561_0==CommercialAt||LA561_0==RULE_IDENTIFIER) ) {
                alt561=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 561, 0, input);

                throw nvae;
            }
            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt560=2;
                    int LA560_0 = input.LA(1);

                    if ( (LA560_0==EqualsSign) ) {
                        alt560=1;
                    }
                    switch (alt560) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingRestElement_return retval = new InternalN4JSXParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt562=2;
            int LA562_0 = input.LA(1);

            if ( (LA562_0==FullStopFullStopFullStop) ) {
                alt562=1;
            }
            switch (alt562) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt564=2;
            int LA564_0 = input.LA(1);

            if ( (LA564_0==LeftCurlyBracket) && (synpred331_InternalN4JSXParser())) {
                alt564=1;
            }
            else if ( (LA564_0==LeftSquareBracket) && (synpred331_InternalN4JSXParser())) {
                alt564=1;
            }
            else if ( ((LA564_0>=Intersection && LA564_0<=Implements)||(LA564_0>=Promisify && LA564_0<=Abstract)||LA564_0==External||(LA564_0>=Private && LA564_0<=Project)||LA564_0==Public||LA564_0==Static||LA564_0==Target||(LA564_0>=Async && LA564_0<=Await)||LA564_0==Union||(LA564_0>=Yield && LA564_0<=This)||LA564_0==From||LA564_0==Type||(LA564_0>=Get && LA564_0<=Let)||(LA564_0>=Out && LA564_0<=Set)||LA564_0==As||LA564_0==Of||LA564_0==CommercialAt||LA564_0==RULE_IDENTIFIER) ) {
                alt564=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 564, 0, input);

                throw nvae;
            }
            switch (alt564) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt563=2;
                    int LA563_0 = input.LA(1);

                    if ( (LA563_0==EqualsSign) ) {
                        alt563=1;
                    }
                    switch (alt563) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingRestElement_return retval = new InternalN4JSXParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt565=2;
            int LA565_0 = input.LA(1);

            if ( (LA565_0==FullStopFullStopFullStop) ) {
                alt565=1;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt567=2;
            int LA567_0 = input.LA(1);

            if ( (LA567_0==LeftCurlyBracket) && (synpred332_InternalN4JSXParser())) {
                alt567=1;
            }
            else if ( (LA567_0==LeftSquareBracket) && (synpred332_InternalN4JSXParser())) {
                alt567=1;
            }
            else if ( ((LA567_0>=Intersection && LA567_0<=Implements)||(LA567_0>=Promisify && LA567_0<=Abstract)||LA567_0==External||(LA567_0>=Private && LA567_0<=Project)||LA567_0==Public||LA567_0==Static||LA567_0==Target||(LA567_0>=Async && LA567_0<=Await)||LA567_0==Union||LA567_0==This||LA567_0==From||LA567_0==Type||(LA567_0>=Get && LA567_0<=Let)||(LA567_0>=Out && LA567_0<=Set)||LA567_0==As||LA567_0==Of||LA567_0==CommercialAt||LA567_0==RULE_IDENTIFIER) ) {
                alt567=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 567, 0, input);

                throw nvae;
            }
            switch (alt567) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt566=2;
                    int LA566_0 = input.LA(1);

                    if ( (LA566_0==EqualsSign) ) {
                        alt566=1;
                    }
                    switch (alt566) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSXParser.ruleElision_return retval = new InternalN4JSXParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt568=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt568=1;
                }
                break;
            case RULE_STRING:
                {
                alt568=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt568=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt568=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 568, 0, input);

                throw nvae;
            }

            switch (alt568) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt569=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt569=1;
                }
                break;
            case RULE_STRING:
                {
                alt569=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt569=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt569=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 569, 0, input);

                throw nvae;
            }

            switch (alt569) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRef_return retval = new InternalN4JSXParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            UnionTypeExpressionParserRuleCall=ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.start):null), (UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.stop):null), grammarAccess.getTypeRefAccess().getUnionTypeExpressionParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpression_return retval = new InternalN4JSXParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSXParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt571=2;
            int LA571_0 = input.LA(1);

            if ( (LA571_0==VerticalLine) ) {
                alt571=1;
            }
            switch (alt571) {
                case 1 :
                    {
                    int cnt570=0;
                    loop570:
                    do {
                        int alt570=2;
                        int LA570_0 = input.LA(1);

                        if ( (LA570_0==VerticalLine) ) {
                            alt570=1;
                        }


                        switch (alt570) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(VerticalLineKeyword_1_1_0, grammarAccess.getUnionTypeExpressionAccess().getVerticalLineKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_126);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt570 >= 1 ) break loop570;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(570, input);
                                throw eee;
                        }
                        cnt570++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSXParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            PrimaryTypeExpressionParserRuleCall_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.start):null), (PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0()); 
            }
            int alt573=2;
            int LA573_0 = input.LA(1);

            if ( (LA573_0==Ampersand) ) {
                alt573=1;
            }
            switch (alt573) {
                case 1 :
                    {
                    int cnt572=0;
                    loop572:
                    do {
                        int alt572=2;
                        int LA572_0 = input.LA(1);

                        if ( (LA572_0==Ampersand) ) {
                            alt572=1;
                        }


                        switch (alt572) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_124);
                    	    TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt572 >= 1 ) break loop572;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(572, input);
                                throw eee;
                        }
                        cnt572++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryTypeExpression_return retval = new InternalN4JSXParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_1=null;
        Token RightParenthesisKeyword_0_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_0_4=null;
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_0_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;



            
        try {
            {
            int alt574=4;
            alt574 = dfa574.predict(input);
            switch (alt574) {
                case 1 :
                    {
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1()); 
                    }
                    pushFollow(FOLLOW_75);
                    TAnonymousFormalParameterListParserRuleCall_0_0_0_2=ruleTAnonymousFormalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2()); 
                    }
                    RightParenthesisKeyword_0_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3()); 
                    }
                    EqualsSignGreaterThanSignKeyword_0_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignGreaterThanSignKeyword_0_0_0_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_75);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBogusTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBogusTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRef_return ruleBogusTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRef_return retval = new InternalN4JSXParser.ruleBogusTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            TypeRefWithModifiersParserRuleCall=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.start):null), (TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.stop):null), grammarAccess.getBogusTypeRefAccess().getTypeRefWithModifiersParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt576=2;
            int LA576_0 = input.LA(1);

            if ( ((LA576_0>=Intersection && LA576_0<=Constructor)||LA576_0==Promisify||LA576_0==Target||LA576_0==Await||LA576_0==Union||LA576_0==This||LA576_0==This_1||(LA576_0>=Type && LA576_0<=Void)||LA576_0==LeftCurlyBracket||LA576_0==Tilde||LA576_0==RULE_IDENTIFIER) ) {
                alt576=1;
            }
            else if ( (LA576_0==QuestionMark) ) {
                alt576=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 576, 0, input);

                throw nvae;
            }
            switch (alt576) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_164);
                    TypeRefWithoutModifiersParserRuleCall_0_0=ruleTypeRefWithoutModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0_0()); 
                    }
                    int alt575=2;
                    int LA575_0 = input.LA(1);

                    if ( (LA575_0==QuestionMark) ) {
                        int LA575_1 = input.LA(2);

                        if ( (synpred334_InternalN4JSXParser()) ) {
                            alt575=1;
                        }
                    }
                    switch (alt575) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            UndefModifierUndefModifierTokenParserRuleCall_0_1_0=ruleUndefModifierToken();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    UndefModifierUndefModifierTokenParserRuleCall_1_1_0=ruleUndefModifierToken();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt579=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt579=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt579=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt579=3;
                }
                break;
            case Union:
                {
                alt579=4;
                }
                break;
            case Intersection:
                {
                alt579=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 579, 0, input);

                throw nvae;
            }

            switch (alt579) {
                case 1 :
                    {
                    {
                    int alt577=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt577=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA577_4 = input.LA(3);

                            if ( (LA577_4==Promisify||LA577_4==Target||LA577_4==Await||LA577_4==This||LA577_4==Void||LA577_4==RULE_IDENTIFIER) ) {
                                alt577=1;
                            }
                            else if ( (LA577_4==This_1) ) {
                                alt577=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 577, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA577_5 = input.LA(3);

                            if ( (LA577_5==Promisify||LA577_5==Target||LA577_5==Await||LA577_5==This||LA577_5==Void||LA577_5==RULE_IDENTIFIER) ) {
                                alt577=1;
                            }
                            else if ( (LA577_5==This_1) ) {
                                alt577=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 577, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt577=2;
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt577=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 577, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt577=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 577, 0, input);

                        throw nvae;
                    }

                    switch (alt577) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_48);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_48);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt578=2;
                    alt578 = dfa578.predict(input);
                    switch (alt578) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt580=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt580=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt580=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt580=3;
                }
                break;
            case Union:
                {
                alt580=4;
                }
                break;
            case Intersection:
                {
                alt580=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 580, 0, input);

                throw nvae;
            }

            switch (alt580) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefForCast_return retval = new InternalN4JSXParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_4 = null;

        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_5 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_7 = null;



            
        try {
            {
            int alt581=8;
            alt581 = dfa581.predict(input);
            switch (alt581) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.start):null), (ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.start):null), (TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.start):null), (FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_5=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.start):null), (ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.start):null), (UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.stop):null), grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.start):null), (IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.stop):null), grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_2 = null;



            
        try {
            {
            int alt582=3;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==Promisify||LA582_0==Target||LA582_0==Await||LA582_0==This||LA582_0==Void||LA582_0==RULE_IDENTIFIER) ) {
                alt582=1;
            }
            else if ( (LA582_0==This_1) ) {
                alt582=2;
            }
            else if ( (LA582_0==QuestionMark) && (synpred336_InternalN4JSXParser())) {
                alt582=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 582, 0, input);

                throw nvae;
            }
            switch (alt582) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.start):null), (WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRef_return retval = new InternalN4JSXParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt583=2;
            int LA583_0 = input.LA(1);

            if ( (LA583_0==This_1) ) {
                alt583=1;
            }
            else if ( (LA583_0==Tilde) ) {
                alt583=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 583, 0, input);

                throw nvae;
            }
            switch (alt583) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefNominal_return retval = new InternalN4JSXParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefStructural_return retval = new InternalN4JSXParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_165);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1()); 
            }
            int alt584=2;
            int LA584_0 = input.LA(1);

            if ( (LA584_0==With) ) {
                int LA584_1 = input.LA(2);

                if ( (LA584_1==LeftCurlyBracket) ) {
                    alt584=1;
                }
            }
            switch (alt584) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt585=2;
            int LA585_0 = input.LA(1);

            if ( (LA585_0==CommercialAt) ) {
                alt585=1;
            }
            switch (alt585) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0()); 
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1()); 
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4()); 
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3()); 
            }
            int alt587=2;
            int LA587_0 = input.LA(1);

            if ( (LA587_0==LessThanSign) ) {
                alt587=1;
            }
            switch (alt587) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1()); 
                    }

                    }


                    }
                    loop586:
                    do {
                        int alt586=2;
                        int LA586_0 = input.LA(1);

                        if ( (LA586_0==Comma) ) {
                            alt586=1;
                        }


                        switch (alt586) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop586;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3()); 
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5()); 
            }
            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7()); 
            }
            int alt588=2;
            int LA588_0 = input.LA(1);

            if ( (LA588_0==Colon) ) {
                alt588=1;
            }
            switch (alt588) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefAssignment_8_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token EqualsSignGreaterThanSignKeyword_4=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1()); 
            }
            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_2=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.start):null), (TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3()); 
            }
            EqualsSignGreaterThanSignKeyword_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt590=2;
            int LA590_0 = input.LA(1);

            if ( ((LA590_0>=Intersection && LA590_0<=Implements)||(LA590_0>=Promisify && LA590_0<=Abstract)||LA590_0==External||(LA590_0>=Private && LA590_0<=Project)||LA590_0==Public||LA590_0==Static||LA590_0==Target||(LA590_0>=Async && LA590_0<=Await)||LA590_0==Union||(LA590_0>=Yield && LA590_0<=This)||LA590_0==From||LA590_0==This_1||(LA590_0>=Type && LA590_0<=Void)||LA590_0==FullStopFullStopFullStop||(LA590_0>=Get && LA590_0<=Let)||(LA590_0>=Out && LA590_0<=Set)||LA590_0==As||LA590_0==Of||LA590_0==LeftParenthesis||LA590_0==QuestionMark||LA590_0==LeftSquareBracket||LA590_0==LeftCurlyBracket||LA590_0==Tilde||LA590_0==RULE_IDENTIFIER) ) {
                alt590=1;
            }
            switch (alt590) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0()); 
                    }

                    }


                    }
                    loop589:
                    do {
                        int alt589=2;
                        int LA589_0 = input.LA(1);

                        if ( (LA589_0==Comma) ) {
                            alt589=1;
                        }


                        switch (alt589) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_172); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop589;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt591=2;
            int LA591_0 = input.LA(1);

            if ( (LA591_0==FullStopFullStopFullStop) ) {
                alt591=1;
            }
            switch (alt591) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt592=2;
            alt592 = dfa592.predict(input);
            switch (alt592) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0()); 
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop593:
            do {
                int alt593=2;
                int LA593_0 = input.LA(1);

                if ( (LA593_0==Comma) ) {
                    alt593=1;
                }


                switch (alt593) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_174); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop593;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop594:
            do {
                int alt594=2;
                int LA594_0 = input.LA(1);

                if ( (LA594_0==Comma) ) {
                    alt594=1;
                }


                switch (alt594) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_174); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop594;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRef_return retval = new InternalN4JSXParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt595=2;
            int LA595_0 = input.LA(1);

            if ( (LA595_0==Promisify||LA595_0==Target||LA595_0==Await||LA595_0==This||LA595_0==Void||LA595_0==RULE_IDENTIFIER) ) {
                alt595=1;
            }
            else if ( (LA595_0==Tilde) ) {
                alt595=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 595, 0, input);

                throw nvae;
            }
            switch (alt595) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_175);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0()); 
            }

            }


            }
            int alt597=2;
            alt597 = dfa597.predict(input);
            switch (alt597) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1()); 
                    }

                    }


                    }
                    loop596:
                    do {
                        int alt596=2;
                        int LA596_0 = input.LA(1);

                        if ( (LA596_0==Comma) ) {
                            alt596=1;
                        }


                        switch (alt596) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_176); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop596;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayTypeRef_return ruleArrayTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleArrayTypeRef_return retval = new InternalN4JSXParser.ruleArrayTypeRef_return();
        retval.start = input.LT(1);

        Token ArrayTypeLiteralLeftSquareBracketKeyword_0_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            ArrayTypeLiteralLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ArrayTypeLiteralLeftSquareBracketKeyword_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_113);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getArrayTypeRefAccess().getTypeArgsAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_146);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_177);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1()); 
            }

            }


            }
            int alt599=2;
            alt599 = dfa599.predict(input);
            switch (alt599) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1()); 
                    }

                    }


                    }
                    loop598:
                    do {
                        int alt598=2;
                        int LA598_0 = input.LA(1);

                        if ( (LA598_0==Comma) ) {
                            alt598=1;
                        }


                        switch (alt598) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_176); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop598;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3()); 
                    }

                    }
                    break;

            }
            int alt600=2;
            int LA600_0 = input.LA(1);

            if ( (LA600_0==With) ) {
                int LA600_1 = input.LA(2);

                if ( (LA600_1==LeftCurlyBracket) ) {
                    alt600=1;
                }
            }
            switch (alt600) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMemberList_return retval = new InternalN4JSXParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop602:
            do {
                int alt602=2;
                int LA602_0 = input.LA(1);

                if ( ((LA602_0>=Intersection && LA602_0<=With)||(LA602_0>=For && LA602_0<=Var)||(LA602_0>=As && LA602_0<=Of)||LA602_0==LessThanSign||LA602_0==RULE_IDENTIFIER) ) {
                    alt602=1;
                }


                switch (alt602) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_179);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0()); 
            	    }

            	    }


            	    }
            	    int alt601=3;
            	    int LA601_0 = input.LA(1);

            	    if ( (LA601_0==Semicolon) ) {
            	        alt601=1;
            	    }
            	    else if ( (LA601_0==Comma) ) {
            	        alt601=2;
            	    }
            	    switch (alt601) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_178); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_178); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1()); 
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop602;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMember_return retval = new InternalN4JSXParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;



            
        try {
            {
            int alt603=4;
            alt603 = dfa603.predict(input);
            switch (alt603) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMethod_return retval = new InternalN4JSXParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt605=2;
            int LA605_0 = input.LA(1);

            if ( (LA605_0==LessThanSign) ) {
                alt605=1;
            }
            switch (alt605) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1()); 
                    }

                    }


                    }
                    loop604:
                    do {
                        int alt604=2;
                        int LA604_0 = input.LA(1);

                        if ( (LA604_0==Comma) ) {
                            alt604=1;
                        }


                        switch (alt604) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop604;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2()); 
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3()); 
            }

            }


            }

            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2()); 
            }
            int alt606=2;
            int LA606_0 = input.LA(1);

            if ( (LA606_0==Colon) ) {
                alt606=1;
            }
            switch (alt606) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSXParser.ruleTStructField_return retval = new InternalN4JSXParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt607=2;
            int LA607_0 = input.LA(1);

            if ( (LA607_0==Colon) ) {
                alt607=1;
            }
            switch (alt607) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getTStructFieldAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructGetter_return retval = new InternalN4JSXParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_2()); 
            }
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( (LA608_0==Colon) ) {
                alt608=1;
            }
            switch (alt608) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructGetterAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructSetter_return retval = new InternalN4JSXParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparTAnonymousFormalParameterParserRuleCall_2_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;


            
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0()); 
            }
            int alt609=3;
            int LA609_0 = input.LA(1);

            if ( (LA609_0==Tilde) ) {
                alt609=1;
            }
            else if ( (LA609_0==RULE_STRUCTMODSUFFIX) ) {
                alt609=2;
            }
            switch (alt609) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;


            
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;



            
        try {
            {
            {
            int alt610=2;
            int LA610_0 = input.LA(1);

            if ( (LA610_0==Type) ) {
                alt610=1;
            }
            else if ( (LA610_0==Constructor) ) {
                alt610=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 610, 0, input);

                throw nvae;
            }
            switch (alt610) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }

            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_12);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3()); 
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgument_return retval = new InternalN4JSXParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_2 = null;



            
        try {
            {
            int alt611=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA611_1 = input.LA(2);

                if ( (synpred346_InternalN4JSXParser()) ) {
                    alt611=1;
                }
                else if ( (true) ) {
                    alt611=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 611, 1, input);

                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt611=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt611=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 611, 0, input);

                throw nvae;
            }

            switch (alt611) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.start):null), (TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSXParser.ruleWildcard_return retval = new InternalN4JSXParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1()); 
            }

            }


            }
            int alt612=3;
            int LA612_0 = input.LA(1);

            if ( (LA612_0==Extends) ) {
                alt612=1;
            }
            else if ( (LA612_0==Super) ) {
                alt612=2;
            }
            switch (alt612) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSXParser.ruleWildcardNewNotation_return retval = new InternalN4JSXParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);

        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt613=2;
            int LA613_0 = input.LA(1);

            if ( (LA613_0==Out) ) {
                alt613=1;
            }
            else if ( (LA613_0==In) ) {
                alt613=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 613, 0, input);

                throw nvae;
            }
            switch (alt613) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUndefModifierToken() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUndefModifierToken();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUndefModifierToken_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUndefModifierToken_return ruleUndefModifierToken() throws RecognitionException {
        InternalN4JSXParser.ruleUndefModifierToken_return retval = new InternalN4JSXParser.ruleUndefModifierToken_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword=null;


            
        try {
            {
            QuestionMarkKeyword=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword, grammarAccess.getUndefModifierTokenAccess().getQuestionMarkKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifier_return retval = new InternalN4JSXParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;


            
        try {
            {
            int alt614=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt614=1;
                }
                break;
            case Yield:
                {
                alt614=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt614=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 614, 0, input);

                throw nvae;
            }

            switch (alt614) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifier_return retval = new InternalN4JSXParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt615=2;
            int LA615_0 = input.LA(1);

            if ( (LA615_0==RULE_IDENTIFIER) ) {
                alt615=1;
            }
            else if ( ((LA615_0>=Intersection && LA615_0<=Implements)||(LA615_0>=Promisify && LA615_0<=Abstract)||LA615_0==External||(LA615_0>=Private && LA615_0<=Project)||LA615_0==Public||LA615_0==Static||LA615_0==Target||(LA615_0>=Async && LA615_0<=Await)||LA615_0==Union||LA615_0==This||LA615_0==From||LA615_0==Type||(LA615_0>=Get && LA615_0<=Let)||(LA615_0>=Out && LA615_0<=Set)||LA615_0==As||LA615_0==Of) ) {
                alt615=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 615, 0, input);

                throw nvae;
            }
            switch (alt615) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierName_return retval = new InternalN4JSXParser.ruleIdentifierName_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt616=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt616=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt616=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt616=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 616, 0, input);

                throw nvae;
            }

            switch (alt616) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;


            
        try {
            {
            int alt617=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt617=1;
                }
                break;
            case Case:
                {
                alt617=2;
                }
                break;
            case Catch:
                {
                alt617=3;
                }
                break;
            case Class:
                {
                alt617=4;
                }
                break;
            case Const:
                {
                alt617=5;
                }
                break;
            case Continue:
                {
                alt617=6;
                }
                break;
            case Debugger:
                {
                alt617=7;
                }
                break;
            case Default:
                {
                alt617=8;
                }
                break;
            case Delete:
                {
                alt617=9;
                }
                break;
            case Do:
                {
                alt617=10;
                }
                break;
            case Else:
                {
                alt617=11;
                }
                break;
            case Export:
                {
                alt617=12;
                }
                break;
            case Extends:
                {
                alt617=13;
                }
                break;
            case Finally:
                {
                alt617=14;
                }
                break;
            case For:
                {
                alt617=15;
                }
                break;
            case Function:
                {
                alt617=16;
                }
                break;
            case If:
                {
                alt617=17;
                }
                break;
            case Import:
                {
                alt617=18;
                }
                break;
            case In:
                {
                alt617=19;
                }
                break;
            case Instanceof:
                {
                alt617=20;
                }
                break;
            case New:
                {
                alt617=21;
                }
                break;
            case Return:
                {
                alt617=22;
                }
                break;
            case Super:
                {
                alt617=23;
                }
                break;
            case Switch:
                {
                alt617=24;
                }
                break;
            case This_1:
                {
                alt617=25;
                }
                break;
            case Throw:
                {
                alt617=26;
                }
                break;
            case Try:
                {
                alt617=27;
                }
                break;
            case Typeof:
                {
                alt617=28;
                }
                break;
            case Var:
                {
                alt617=29;
                }
                break;
            case Void:
                {
                alt617=30;
                }
                break;
            case While:
                {
                alt617=31;
                }
                break;
            case With:
                {
                alt617=32;
                }
                break;
            case Yield:
                {
                alt617=33;
                }
                break;
            case Null:
                {
                alt617=34;
                }
                break;
            case True:
                {
                alt617=35;
                }
                break;
            case False:
                {
                alt617=36;
                }
                break;
            case Enum:
                {
                alt617=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 617, 0, input);

                throw nvae;
            }

            switch (alt617) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24()); 
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25()); 
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26()); 
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27()); 
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28()); 
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29()); 
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30()); 
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31()); 
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32()); 
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33()); 
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34()); 
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35()); 
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;


            
        try {
            {
            int alt618=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt618=1;
                }
                break;
            case Set:
                {
                alt618=2;
                }
                break;
            case Let:
                {
                alt618=3;
                }
                break;
            case Project:
                {
                alt618=4;
                }
                break;
            case External:
                {
                alt618=5;
                }
                break;
            case Abstract:
                {
                alt618=6;
                }
                break;
            case Static:
                {
                alt618=7;
                }
                break;
            case As:
                {
                alt618=8;
                }
                break;
            case From:
                {
                alt618=9;
                }
                break;
            case Constructor:
                {
                alt618=10;
                }
                break;
            case Of:
                {
                alt618=11;
                }
                break;
            case Target:
                {
                alt618=12;
                }
                break;
            case Type:
                {
                alt618=13;
                }
                break;
            case Union:
                {
                alt618=14;
                }
                break;
            case Intersection:
                {
                alt618=15;
                }
                break;
            case This:
                {
                alt618=16;
                }
                break;
            case Promisify:
                {
                alt618=17;
                }
                break;
            case Await:
                {
                alt618=18;
                }
                break;
            case Async:
                {
                alt618=19;
                }
                break;
            case Implements:
                {
                alt618=20;
                }
                break;
            case Interface:
                {
                alt618=21;
                }
                break;
            case Private:
                {
                alt618=22;
                }
                break;
            case Protected:
                {
                alt618=23;
                }
                break;
            case Public:
                {
                alt618=24;
                }
                break;
            case Out:
                {
                alt618=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 618, 0, input);

                throw nvae;
            }

            switch (alt618) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt619=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt619=1;
                }
                break;
            case Const:
                {
                alt619=2;
                }
                break;
            case Let:
                {
                alt619=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 619, 0, input);

                throw nvae;
            }

            switch (alt619) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt620=2;
            int LA620_0 = input.LA(1);

            if ( (LA620_0==PlusSignPlusSign) ) {
                alt620=1;
            }
            else if ( (LA620_0==HyphenMinusHyphenMinus) ) {
                alt620=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 620, 0, input);

                throw nvae;
            }
            switch (alt620) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt621=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt621=1;
                }
                break;
            case Void:
                {
                alt621=2;
                }
                break;
            case Typeof:
                {
                alt621=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt621=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt621=5;
                }
                break;
            case PlusSign:
                {
                alt621=6;
                }
                break;
            case HyphenMinus:
                {
                alt621=7;
                }
                break;
            case Tilde:
                {
                alt621=8;
                }
                break;
            case ExclamationMark:
                {
                alt621=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 621, 0, input);

                throw nvae;
            }

            switch (alt621) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt622=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt622=1;
                }
                break;
            case Solidus:
                {
                alt622=2;
                }
                break;
            case PercentSign:
                {
                alt622=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 622, 0, input);

                throw nvae;
            }

            switch (alt622) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt623=2;
            int LA623_0 = input.LA(1);

            if ( (LA623_0==PlusSign) ) {
                alt623=1;
            }
            else if ( (LA623_0==HyphenMinus) ) {
                alt623=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 623, 0, input);

                throw nvae;
            }
            switch (alt623) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt624=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt624=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt624=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt624=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt624=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 624, 0, input);

                throw nvae;
            }

            switch (alt624) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt625=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt625=1;
                }
                break;
            case Project:
                {
                alt625=2;
                }
                break;
            case Protected:
                {
                alt625=3;
                }
                break;
            case Public:
                {
                alt625=4;
                }
                break;
            case External:
                {
                alt625=5;
                }
                break;
            case Abstract:
                {
                alt625=6;
                }
                break;
            case Static:
                {
                alt625=7;
                }
                break;
            case Const:
                {
                alt625=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 625, 0, input);

                throw nvae;
            }

            switch (alt625) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred2_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred3_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred4_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop626:
        do {
            int alt626=2;
            int LA626_0 = input.LA(1);

            if ( ((LA626_0>=Protected && LA626_0<=Abstract)||LA626_0==External||(LA626_0>=Private && LA626_0<=Project)||LA626_0==Public||LA626_0==Static||LA626_0==Const) ) {
                alt626=1;
            }


            switch (alt626) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop626;
            }
        } while (true);

        match(input,Class,FOLLOW_183); if (state.failed) return ;
        int alt627=2;
        int LA627_0 = input.LA(1);

        if ( (LA627_0==Tilde) ) {
            alt627=1;
        }
        switch (alt627) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_184);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt628=2;
        int LA628_0 = input.LA(1);

        if ( ((LA628_0>=Intersection && LA628_0<=Implements)||(LA628_0>=Promisify && LA628_0<=Abstract)||LA628_0==External||(LA628_0>=Private && LA628_0<=Project)||LA628_0==Public||LA628_0==Static||LA628_0==Target||(LA628_0>=Async && LA628_0<=Await)||LA628_0==Union||(LA628_0>=Yield && LA628_0<=This)||LA628_0==From||LA628_0==Type||(LA628_0>=Get && LA628_0<=Let)||(LA628_0>=Out && LA628_0<=Set)||LA628_0==As||LA628_0==Of||LA628_0==RULE_IDENTIFIER) ) {
            alt628=1;
        }
        switch (alt628) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred5_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop629:
        do {
            int alt629=2;
            int LA629_0 = input.LA(1);

            if ( ((LA629_0>=Protected && LA629_0<=Abstract)||LA629_0==External||(LA629_0>=Private && LA629_0<=Project)||LA629_0==Public||LA629_0==Static||LA629_0==Const) ) {
                alt629=1;
            }


            switch (alt629) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop629;
            }
        } while (true);

        match(input,Interface,FOLLOW_183); if (state.failed) return ;
        int alt630=2;
        int LA630_0 = input.LA(1);

        if ( (LA630_0==Tilde) ) {
            alt630=1;
        }
        switch (alt630) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_184);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt631=2;
        int LA631_0 = input.LA(1);

        if ( ((LA631_0>=Intersection && LA631_0<=Implements)||(LA631_0>=Promisify && LA631_0<=Abstract)||LA631_0==External||(LA631_0>=Private && LA631_0<=Project)||LA631_0==Public||LA631_0==Static||LA631_0==Target||(LA631_0>=Async && LA631_0<=Await)||LA631_0==Union||(LA631_0>=Yield && LA631_0<=This)||LA631_0==From||LA631_0==Type||(LA631_0>=Get && LA631_0<=Let)||(LA631_0>=Out && LA631_0<=Set)||LA631_0==As||LA631_0==Of||LA631_0==RULE_IDENTIFIER) ) {
            alt631=1;
        }
        switch (alt631) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop632:
        do {
            int alt632=2;
            int LA632_0 = input.LA(1);

            if ( ((LA632_0>=Protected && LA632_0<=Abstract)||LA632_0==External||(LA632_0>=Private && LA632_0<=Project)||LA632_0==Public||LA632_0==Static||LA632_0==Const) ) {
                alt632=1;
            }


            switch (alt632) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop632;
            }
        } while (true);

        match(input,Enum,FOLLOW_184); if (state.failed) return ;
        int alt633=2;
        int LA633_0 = input.LA(1);

        if ( ((LA633_0>=Intersection && LA633_0<=Implements)||(LA633_0>=Promisify && LA633_0<=Abstract)||LA633_0==External||(LA633_0>=Private && LA633_0<=Project)||LA633_0==Public||LA633_0==Static||LA633_0==Target||(LA633_0>=Async && LA633_0<=Await)||LA633_0==Union||(LA633_0>=Yield && LA633_0<=This)||LA633_0==From||LA633_0==Type||(LA633_0>=Get && LA633_0<=Let)||(LA633_0>=Out && LA633_0<=Set)||LA633_0==As||LA633_0==Of||LA633_0==RULE_IDENTIFIER) ) {
            alt633=1;
        }
        switch (alt633) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred8_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop634:
        do {
            int alt634=2;
            int LA634_0 = input.LA(1);

            if ( ((LA634_0>=Protected && LA634_0<=Abstract)||LA634_0==External||(LA634_0>=Private && LA634_0<=Project)||LA634_0==Public||LA634_0==Static||LA634_0==Const) ) {
                alt634=1;
            }


            switch (alt634) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop634;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred10_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred11_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred12_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred13_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop635:
        do {
            int alt635=2;
            int LA635_0 = input.LA(1);

            if ( ((LA635_0>=Protected && LA635_0<=Abstract)||LA635_0==External||(LA635_0>=Private && LA635_0<=Project)||LA635_0==Public||LA635_0==Static||LA635_0==Const) ) {
                alt635=1;
            }


            switch (alt635) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop635;
            }
        } while (true);

        match(input,Class,FOLLOW_183); if (state.failed) return ;
        int alt636=2;
        int LA636_0 = input.LA(1);

        if ( (LA636_0==Tilde) ) {
            alt636=1;
        }
        switch (alt636) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_184);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt637=2;
        int LA637_0 = input.LA(1);

        if ( ((LA637_0>=Intersection && LA637_0<=Implements)||(LA637_0>=Promisify && LA637_0<=Abstract)||LA637_0==External||(LA637_0>=Private && LA637_0<=Project)||LA637_0==Public||LA637_0==Static||LA637_0==Target||(LA637_0>=Async && LA637_0<=Await)||LA637_0==Union||(LA637_0>=Yield && LA637_0<=This)||LA637_0==From||LA637_0==Type||(LA637_0>=Get && LA637_0<=Let)||(LA637_0>=Out && LA637_0<=Set)||LA637_0==As||LA637_0==Of||LA637_0==RULE_IDENTIFIER) ) {
            alt637=1;
        }
        switch (alt637) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred14_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop638:
        do {
            int alt638=2;
            int LA638_0 = input.LA(1);

            if ( ((LA638_0>=Protected && LA638_0<=Abstract)||LA638_0==External||(LA638_0>=Private && LA638_0<=Project)||LA638_0==Public||LA638_0==Static||LA638_0==Const) ) {
                alt638=1;
            }


            switch (alt638) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop638;
            }
        } while (true);

        match(input,Interface,FOLLOW_183); if (state.failed) return ;
        int alt639=2;
        int LA639_0 = input.LA(1);

        if ( (LA639_0==Tilde) ) {
            alt639=1;
        }
        switch (alt639) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_184);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt640=2;
        int LA640_0 = input.LA(1);

        if ( ((LA640_0>=Intersection && LA640_0<=Implements)||(LA640_0>=Promisify && LA640_0<=Abstract)||LA640_0==External||(LA640_0>=Private && LA640_0<=Project)||LA640_0==Public||LA640_0==Static||LA640_0==Target||(LA640_0>=Async && LA640_0<=Await)||LA640_0==Union||(LA640_0>=Yield && LA640_0<=This)||LA640_0==From||LA640_0==Type||(LA640_0>=Get && LA640_0<=Let)||(LA640_0>=Out && LA640_0<=Set)||LA640_0==As||LA640_0==Of||LA640_0==RULE_IDENTIFIER) ) {
            alt640=1;
        }
        switch (alt640) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred15_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop641:
        do {
            int alt641=2;
            int LA641_0 = input.LA(1);

            if ( ((LA641_0>=Protected && LA641_0<=Abstract)||LA641_0==External||(LA641_0>=Private && LA641_0<=Project)||LA641_0==Public||LA641_0==Static||LA641_0==Const) ) {
                alt641=1;
            }


            switch (alt641) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop641;
            }
        } while (true);

        match(input,Enum,FOLLOW_184); if (state.failed) return ;
        int alt642=2;
        int LA642_0 = input.LA(1);

        if ( ((LA642_0>=Intersection && LA642_0<=Implements)||(LA642_0>=Promisify && LA642_0<=Abstract)||LA642_0==External||(LA642_0>=Private && LA642_0<=Project)||LA642_0==Public||LA642_0==Static||LA642_0==Target||(LA642_0>=Async && LA642_0<=Await)||LA642_0==Union||(LA642_0>=Yield && LA642_0<=This)||LA642_0==From||LA642_0==Type||(LA642_0>=Get && LA642_0<=Let)||(LA642_0>=Out && LA642_0<=Set)||LA642_0==As||LA642_0==Of||LA642_0==RULE_IDENTIFIER) ) {
            alt642=1;
        }
        switch (alt642) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred19_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred26_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred27_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred28_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred39_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred40_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred41_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred42_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred47_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred48_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred50_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred55_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred56_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred57_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred58_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred63_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred64_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred65_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred66_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred67_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred71_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred72_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop686:
        do {
            int alt686=2;
            int LA686_0 = input.LA(1);

            if ( ((LA686_0>=Protected && LA686_0<=Abstract)||LA686_0==External||(LA686_0>=Private && LA686_0<=Project)||LA686_0==Public||LA686_0==Static||LA686_0==Const) ) {
                alt686=1;
            }


            switch (alt686) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop686;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred73_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred74_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred75_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred76_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop687:
        do {
            int alt687=2;
            int LA687_0 = input.LA(1);

            if ( ((LA687_0>=Protected && LA687_0<=Abstract)||LA687_0==External||(LA687_0>=Private && LA687_0<=Project)||LA687_0==Public||LA687_0==Static||LA687_0==Const) ) {
                alt687=1;
            }


            switch (alt687) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop687;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred77_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred78_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred79_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred80_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred83_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred84_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred85_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred86_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred87_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred88_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred97_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred98_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred99_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred100_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred101_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt688=2;
        int LA688_0 = input.LA(1);

        if ( (LA688_0==Colon) ) {
            alt688=1;
        }
        switch (alt688) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred102_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt689=2;
        int LA689_0 = input.LA(1);

        if ( (LA689_0==Colon) ) {
            alt689=1;
        }
        switch (alt689) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred103_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt690=2;
        int LA690_0 = input.LA(1);

        if ( (LA690_0==Colon) ) {
            alt690=1;
        }
        switch (alt690) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred104_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt691=2;
        int LA691_0 = input.LA(1);

        if ( (LA691_0==Colon) ) {
            alt691=1;
        }
        switch (alt691) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred105_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred106_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred109_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred110_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred111_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred112_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred113_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_11); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_75);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred114_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred115_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt692=2;
        int LA692_0 = input.LA(1);

        if ( (LA692_0==In) ) {
            alt692=1;
        }
        else if ( (LA692_0==Of) ) {
            alt692=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 692, 0, input);

            throw nvae;
        }
        switch (alt692) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_131); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_131); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt693=2;
        int LA693_0 = input.LA(1);

        if ( ((LA693_0>=Intersection && LA693_0<=Implements)||(LA693_0>=Promisify && LA693_0<=Abstract)||(LA693_0>=External && LA693_0<=Function)||(LA693_0>=Private && LA693_0<=Delete)||LA693_0==Public||LA693_0==Static||(LA693_0>=Target && LA693_0<=Await)||LA693_0==Class||(LA693_0>=False && LA693_0<=Super)||LA693_0==Union||(LA693_0>=Yield && LA693_0<=This)||(LA693_0>=From && LA693_0<=Void)||(LA693_0>=Get && LA693_0<=Set)||LA693_0==PlusSignPlusSign||LA693_0==HyphenMinusHyphenMinus||LA693_0==SolidusEqualsSign||LA693_0==As||LA693_0==Of||LA693_0==ExclamationMark||LA693_0==LeftParenthesis||(LA693_0>=Asterisk && LA693_0<=PlusSign)||LA693_0==HyphenMinus||LA693_0==Solidus||LA693_0==LessThanSign||(LA693_0>=CommercialAt && LA693_0<=LeftSquareBracket)||LA693_0==LeftCurlyBracket||LA693_0==Tilde||LA693_0==RULE_DOUBLE||(LA693_0>=RULE_HEX_INT && LA693_0<=RULE_LEGACY_OCTAL_INT)||LA693_0==RULE_SCIENTIFIC_INT||LA693_0==RULE_IDENTIFIER||LA693_0==RULE_STRING||(LA693_0>=RULE_TEMPLATE_HEAD && LA693_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA693_0==RULE_INT) ) {
            alt693=1;
        }
        switch (alt693) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred116_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred117_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_11); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_75);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred118_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred119_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt694=2;
        int LA694_0 = input.LA(1);

        if ( (LA694_0==In) ) {
            alt694=1;
        }
        else if ( (LA694_0==Of) ) {
            alt694=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 694, 0, input);

            throw nvae;
        }
        switch (alt694) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_131); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_131); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt695=2;
        int LA695_0 = input.LA(1);

        if ( ((LA695_0>=Intersection && LA695_0<=Implements)||(LA695_0>=Promisify && LA695_0<=Abstract)||(LA695_0>=External && LA695_0<=Function)||(LA695_0>=Private && LA695_0<=Delete)||LA695_0==Public||LA695_0==Static||(LA695_0>=Target && LA695_0<=Await)||LA695_0==Class||(LA695_0>=False && LA695_0<=Super)||LA695_0==Union||(LA695_0>=Yield && LA695_0<=This)||(LA695_0>=From && LA695_0<=Void)||(LA695_0>=Get && LA695_0<=Set)||LA695_0==PlusSignPlusSign||LA695_0==HyphenMinusHyphenMinus||LA695_0==SolidusEqualsSign||LA695_0==As||LA695_0==Of||LA695_0==ExclamationMark||LA695_0==LeftParenthesis||(LA695_0>=Asterisk && LA695_0<=PlusSign)||LA695_0==HyphenMinus||LA695_0==Solidus||LA695_0==LessThanSign||(LA695_0>=CommercialAt && LA695_0<=LeftSquareBracket)||LA695_0==LeftCurlyBracket||LA695_0==Tilde||LA695_0==RULE_DOUBLE||(LA695_0>=RULE_HEX_INT && LA695_0<=RULE_LEGACY_OCTAL_INT)||LA695_0==RULE_SCIENTIFIC_INT||LA695_0==RULE_IDENTIFIER||LA695_0==RULE_STRING||(LA695_0>=RULE_TEMPLATE_HEAD && LA695_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA695_0==RULE_INT) ) {
            alt695=1;
        }
        switch (alt695) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred120_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred127_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred131_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred135_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt696=2;
        alt696 = dfa696.predict(input);
        switch (alt696) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred136_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred138_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt697=2;
        int LA697_0 = input.LA(1);

        if ( (LA697_0==LessThanSign) ) {
            alt697=1;
        }
        switch (alt697) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt698=2;
        alt698 = dfa698.predict(input);
        switch (alt698) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt699=2;
        int LA699_0 = input.LA(1);

        if ( (LA699_0==Asterisk) ) {
            alt699=1;
        }
        else if ( ((LA699_0>=Intersection && LA699_0<=With)||(LA699_0>=For && LA699_0<=Var)||(LA699_0>=As && LA699_0<=Of)||LA699_0==LeftSquareBracket||LA699_0==RULE_DOUBLE||LA699_0==RULE_HEX_INT||LA699_0==RULE_OCTAL_INT||LA699_0==RULE_SCIENTIFIC_INT||LA699_0==RULE_IDENTIFIER||LA699_0==RULE_STRING||LA699_0==RULE_INT) ) {
            alt699=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 699, 0, input);

            throw nvae;
        }
        switch (alt699) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred139_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt700=2;
        alt700 = dfa700.predict(input);
        switch (alt700) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred140_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred141_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt701=2;
        int LA701_0 = input.LA(1);

        if ( (LA701_0==LessThanSign) ) {
            alt701=1;
        }
        switch (alt701) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt702=2;
        alt702 = dfa702.predict(input);
        switch (alt702) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt703=2;
        int LA703_0 = input.LA(1);

        if ( (LA703_0==Asterisk) ) {
            alt703=1;
        }
        else if ( ((LA703_0>=Intersection && LA703_0<=With)||(LA703_0>=For && LA703_0<=Var)||(LA703_0>=As && LA703_0<=Of)||LA703_0==LeftSquareBracket||LA703_0==RULE_DOUBLE||LA703_0==RULE_HEX_INT||LA703_0==RULE_OCTAL_INT||LA703_0==RULE_SCIENTIFIC_INT||LA703_0==RULE_IDENTIFIER||LA703_0==RULE_STRING||LA703_0==RULE_INT) ) {
            alt703=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 703, 0, input);

            throw nvae;
        }
        switch (alt703) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred143_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt704=2;
        alt704 = dfa704.predict(input);
        switch (alt704) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred144_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred146_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred149_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt705=2;
        int LA705_0 = input.LA(1);

        if ( (LA705_0==LessThanSign) ) {
            alt705=1;
        }
        switch (alt705) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt706=2;
        alt706 = dfa706.predict(input);
        switch (alt706) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt707=2;
        int LA707_0 = input.LA(1);

        if ( (LA707_0==Asterisk) ) {
            alt707=1;
        }
        else if ( ((LA707_0>=Intersection && LA707_0<=With)||(LA707_0>=For && LA707_0<=Var)||(LA707_0>=As && LA707_0<=Of)||LA707_0==LeftSquareBracket||LA707_0==RULE_DOUBLE||LA707_0==RULE_HEX_INT||LA707_0==RULE_OCTAL_INT||LA707_0==RULE_SCIENTIFIC_INT||LA707_0==RULE_IDENTIFIER||LA707_0==RULE_STRING||LA707_0==RULE_INT) ) {
            alt707=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 707, 0, input);

            throw nvae;
        }
        switch (alt707) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred152_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt708=2;
        alt708 = dfa708.predict(input);
        switch (alt708) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred153_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred155_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred158_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt709=2;
        int LA709_0 = input.LA(1);

        if ( (LA709_0==LessThanSign) ) {
            alt709=1;
        }
        switch (alt709) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt710=2;
        alt710 = dfa710.predict(input);
        switch (alt710) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt711=2;
        int LA711_0 = input.LA(1);

        if ( (LA711_0==Asterisk) ) {
            alt711=1;
        }
        else if ( ((LA711_0>=Intersection && LA711_0<=With)||(LA711_0>=For && LA711_0<=Var)||(LA711_0>=As && LA711_0<=Of)||LA711_0==LeftSquareBracket||LA711_0==RULE_DOUBLE||LA711_0==RULE_HEX_INT||LA711_0==RULE_OCTAL_INT||LA711_0==RULE_SCIENTIFIC_INT||LA711_0==RULE_IDENTIFIER||LA711_0==RULE_STRING||LA711_0==RULE_INT) ) {
            alt711=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 711, 0, input);

            throw nvae;
        }
        switch (alt711) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred179_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred180_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred181_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_109); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred182_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred183_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred184_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred185_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_109); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred186_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred187_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred188_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred189_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred190_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred191_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred192_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred193_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_186);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred201_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_186);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred203_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_187);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred205_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_187);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred207_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred216_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred217_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred218_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred219_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred220_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred221_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred222_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred223_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred225_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred226_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred227_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred228_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred230_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred231_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred234_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_134); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred238_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred239_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred240_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt729=4;
        int LA729_0 = input.LA(1);

        if ( (LA729_0==LeftParenthesis) && (synpred237_InternalN4JSXParser())) {
            alt729=1;
        }
        else if ( (LA729_0==Async) ) {
            int LA729_2 = input.LA(2);

            if ( (LA729_2==EqualsSignGreaterThanSign) ) {
                alt729=4;
            }
            else if ( (LA729_2==RULE_NO_LINE_TERMINATOR) && (synpred238_InternalN4JSXParser())) {
                alt729=2;
            }
            else if ( (LA729_2==LeftParenthesis) && (synpred238_InternalN4JSXParser())) {
                alt729=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 729, 2, input);

                throw nvae;
            }
        }
        else if ( (LA729_0==Asterisk) && (synpred239_InternalN4JSXParser())) {
            alt729=3;
        }
        else if ( ((LA729_0>=Intersection && LA729_0<=Implements)||(LA729_0>=Promisify && LA729_0<=Abstract)||LA729_0==External||(LA729_0>=Private && LA729_0<=Project)||LA729_0==Public||LA729_0==Static||LA729_0==Target||LA729_0==Await||LA729_0==Union||(LA729_0>=Yield && LA729_0<=This)||LA729_0==From||LA729_0==Type||(LA729_0>=Get && LA729_0<=Let)||(LA729_0>=Out && LA729_0<=Set)||LA729_0==As||LA729_0==Of||LA729_0==RULE_IDENTIFIER) ) {
            alt729=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 729, 0, input);

            throw nvae;
        }
        switch (alt729) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }
                int alt721=2;
                int LA721_0 = input.LA(1);

                if ( ((LA721_0>=Intersection && LA721_0<=Implements)||(LA721_0>=Promisify && LA721_0<=Abstract)||LA721_0==External||(LA721_0>=Private && LA721_0<=Project)||LA721_0==Public||LA721_0==Static||LA721_0==Target||(LA721_0>=Async && LA721_0<=Await)||LA721_0==Union||(LA721_0>=Yield && LA721_0<=This)||LA721_0==From||LA721_0==This_1||(LA721_0>=Type && LA721_0<=Void)||LA721_0==FullStopFullStopFullStop||(LA721_0>=Get && LA721_0<=Let)||(LA721_0>=Out && LA721_0<=Set)||LA721_0==As||LA721_0==Of||(LA721_0>=QuestionMark && LA721_0<=LeftSquareBracket)||LA721_0==LeftCurlyBracket||LA721_0==Tilde||LA721_0==RULE_IDENTIFIER) ) {
                    alt721=1;
                }
                switch (alt721) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop720:
                        do {
                            int alt720=2;
                            int LA720_0 = input.LA(1);

                            if ( (LA720_0==Comma) ) {
                                alt720=1;
                            }


                            switch (alt720) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop720;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt722=2;
                int LA722_0 = input.LA(1);

                if ( (LA722_0==Colon) ) {
                    alt722=1;
                }
                switch (alt722) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt724=2;
                int LA724_0 = input.LA(1);

                if ( ((LA724_0>=Intersection && LA724_0<=Implements)||(LA724_0>=Promisify && LA724_0<=Abstract)||LA724_0==External||(LA724_0>=Private && LA724_0<=Project)||LA724_0==Public||LA724_0==Static||LA724_0==Target||(LA724_0>=Async && LA724_0<=Await)||LA724_0==Union||(LA724_0>=Yield && LA724_0<=This)||LA724_0==From||LA724_0==This_1||(LA724_0>=Type && LA724_0<=Void)||LA724_0==FullStopFullStopFullStop||(LA724_0>=Get && LA724_0<=Let)||(LA724_0>=Out && LA724_0<=Set)||LA724_0==As||LA724_0==Of||(LA724_0>=QuestionMark && LA724_0<=LeftSquareBracket)||LA724_0==LeftCurlyBracket||LA724_0==Tilde||LA724_0==RULE_IDENTIFIER) ) {
                    alt724=1;
                }
                switch (alt724) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop723:
                        do {
                            int alt723=2;
                            int LA723_0 = input.LA(1);

                            if ( (LA723_0==Comma) ) {
                                alt723=1;
                            }


                            switch (alt723) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop723;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt725=2;
                int LA725_0 = input.LA(1);

                if ( (LA725_0==Colon) ) {
                    alt725=1;
                }
                switch (alt725) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt727=2;
                int LA727_0 = input.LA(1);

                if ( ((LA727_0>=Intersection && LA727_0<=Implements)||(LA727_0>=Promisify && LA727_0<=Abstract)||LA727_0==External||(LA727_0>=Private && LA727_0<=Project)||LA727_0==Public||LA727_0==Static||LA727_0==Target||(LA727_0>=Async && LA727_0<=Await)||LA727_0==Union||(LA727_0>=Yield && LA727_0<=This)||LA727_0==From||LA727_0==This_1||(LA727_0>=Type && LA727_0<=Void)||LA727_0==FullStopFullStopFullStop||(LA727_0>=Get && LA727_0<=Let)||(LA727_0>=Out && LA727_0<=Set)||LA727_0==As||LA727_0==Of||(LA727_0>=QuestionMark && LA727_0<=LeftSquareBracket)||LA727_0==LeftCurlyBracket||LA727_0==Tilde||LA727_0==RULE_IDENTIFIER) ) {
                    alt727=1;
                }
                switch (alt727) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop726:
                        do {
                            int alt726=2;
                            int LA726_0 = input.LA(1);

                            if ( (LA726_0==Comma) ) {
                                alt726=1;
                            }


                            switch (alt726) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop726;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt728=2;
                int LA728_0 = input.LA(1);

                if ( (LA728_0==Colon) ) {
                    alt728=1;
                }
                switch (alt728) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred241_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred242_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred243_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_134); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred244_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred245_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred246_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred247_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt739=4;
        int LA739_0 = input.LA(1);

        if ( (LA739_0==LeftParenthesis) && (synpred244_InternalN4JSXParser())) {
            alt739=1;
        }
        else if ( (LA739_0==Async) ) {
            int LA739_2 = input.LA(2);

            if ( (LA739_2==RULE_NO_LINE_TERMINATOR) && (synpred245_InternalN4JSXParser())) {
                alt739=2;
            }
            else if ( (LA739_2==LeftParenthesis) && (synpred245_InternalN4JSXParser())) {
                alt739=2;
            }
            else if ( (LA739_2==EqualsSignGreaterThanSign) ) {
                alt739=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 739, 2, input);

                throw nvae;
            }
        }
        else if ( (LA739_0==Asterisk) && (synpred246_InternalN4JSXParser())) {
            alt739=3;
        }
        else if ( ((LA739_0>=Intersection && LA739_0<=Implements)||(LA739_0>=Promisify && LA739_0<=Abstract)||LA739_0==External||(LA739_0>=Private && LA739_0<=Project)||LA739_0==Public||LA739_0==Static||LA739_0==Target||LA739_0==Await||LA739_0==Union||(LA739_0>=Yield && LA739_0<=This)||LA739_0==From||LA739_0==Type||(LA739_0>=Get && LA739_0<=Let)||(LA739_0>=Out && LA739_0<=Set)||LA739_0==As||LA739_0==Of||LA739_0==RULE_IDENTIFIER) ) {
            alt739=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 739, 0, input);

            throw nvae;
        }
        switch (alt739) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }
                int alt731=2;
                int LA731_0 = input.LA(1);

                if ( ((LA731_0>=Intersection && LA731_0<=Implements)||(LA731_0>=Promisify && LA731_0<=Abstract)||LA731_0==External||(LA731_0>=Private && LA731_0<=Project)||LA731_0==Public||LA731_0==Static||LA731_0==Target||(LA731_0>=Async && LA731_0<=Await)||LA731_0==Union||(LA731_0>=Yield && LA731_0<=This)||LA731_0==From||LA731_0==This_1||(LA731_0>=Type && LA731_0<=Void)||LA731_0==FullStopFullStopFullStop||(LA731_0>=Get && LA731_0<=Let)||(LA731_0>=Out && LA731_0<=Set)||LA731_0==As||LA731_0==Of||(LA731_0>=QuestionMark && LA731_0<=LeftSquareBracket)||LA731_0==LeftCurlyBracket||LA731_0==Tilde||LA731_0==RULE_IDENTIFIER) ) {
                    alt731=1;
                }
                switch (alt731) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop730:
                        do {
                            int alt730=2;
                            int LA730_0 = input.LA(1);

                            if ( (LA730_0==Comma) ) {
                                alt730=1;
                            }


                            switch (alt730) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop730;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt732=2;
                int LA732_0 = input.LA(1);

                if ( (LA732_0==Colon) ) {
                    alt732=1;
                }
                switch (alt732) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt734=2;
                int LA734_0 = input.LA(1);

                if ( ((LA734_0>=Intersection && LA734_0<=Implements)||(LA734_0>=Promisify && LA734_0<=Abstract)||LA734_0==External||(LA734_0>=Private && LA734_0<=Project)||LA734_0==Public||LA734_0==Static||LA734_0==Target||(LA734_0>=Async && LA734_0<=Await)||LA734_0==Union||(LA734_0>=Yield && LA734_0<=This)||LA734_0==From||LA734_0==This_1||(LA734_0>=Type && LA734_0<=Void)||LA734_0==FullStopFullStopFullStop||(LA734_0>=Get && LA734_0<=Let)||(LA734_0>=Out && LA734_0<=Set)||LA734_0==As||LA734_0==Of||(LA734_0>=QuestionMark && LA734_0<=LeftSquareBracket)||LA734_0==LeftCurlyBracket||LA734_0==Tilde||LA734_0==RULE_IDENTIFIER) ) {
                    alt734=1;
                }
                switch (alt734) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop733:
                        do {
                            int alt733=2;
                            int LA733_0 = input.LA(1);

                            if ( (LA733_0==Comma) ) {
                                alt733=1;
                            }


                            switch (alt733) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop733;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt735=2;
                int LA735_0 = input.LA(1);

                if ( (LA735_0==Colon) ) {
                    alt735=1;
                }
                switch (alt735) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt737=2;
                int LA737_0 = input.LA(1);

                if ( ((LA737_0>=Intersection && LA737_0<=Implements)||(LA737_0>=Promisify && LA737_0<=Abstract)||LA737_0==External||(LA737_0>=Private && LA737_0<=Project)||LA737_0==Public||LA737_0==Static||LA737_0==Target||(LA737_0>=Async && LA737_0<=Await)||LA737_0==Union||(LA737_0>=Yield && LA737_0<=This)||LA737_0==From||LA737_0==This_1||(LA737_0>=Type && LA737_0<=Void)||LA737_0==FullStopFullStopFullStop||(LA737_0>=Get && LA737_0<=Let)||(LA737_0>=Out && LA737_0<=Set)||LA737_0==As||LA737_0==Of||(LA737_0>=QuestionMark && LA737_0<=LeftSquareBracket)||LA737_0==LeftCurlyBracket||LA737_0==Tilde||LA737_0==RULE_IDENTIFIER) ) {
                    alt737=1;
                }
                switch (alt737) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop736:
                        do {
                            int alt736=2;
                            int LA736_0 = input.LA(1);

                            if ( (LA736_0==Comma) ) {
                                alt736=1;
                            }


                            switch (alt736) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop736;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt738=2;
                int LA738_0 = input.LA(1);

                if ( (LA738_0==Colon) ) {
                    alt738=1;
                }
                switch (alt738) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred248_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred249_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred250_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_134); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred251_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred252_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred253_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred254_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt749=4;
        int LA749_0 = input.LA(1);

        if ( (LA749_0==LeftParenthesis) && (synpred251_InternalN4JSXParser())) {
            alt749=1;
        }
        else if ( (LA749_0==Async) ) {
            int LA749_2 = input.LA(2);

            if ( (LA749_2==EqualsSignGreaterThanSign) ) {
                alt749=4;
            }
            else if ( (LA749_2==RULE_NO_LINE_TERMINATOR) && (synpred252_InternalN4JSXParser())) {
                alt749=2;
            }
            else if ( (LA749_2==LeftParenthesis) && (synpred252_InternalN4JSXParser())) {
                alt749=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 749, 2, input);

                throw nvae;
            }
        }
        else if ( (LA749_0==Asterisk) && (synpred253_InternalN4JSXParser())) {
            alt749=3;
        }
        else if ( ((LA749_0>=Intersection && LA749_0<=Implements)||(LA749_0>=Promisify && LA749_0<=Abstract)||LA749_0==External||(LA749_0>=Private && LA749_0<=Project)||LA749_0==Public||LA749_0==Static||LA749_0==Target||LA749_0==Await||LA749_0==Union||LA749_0==This||LA749_0==From||LA749_0==Type||(LA749_0>=Get && LA749_0<=Let)||(LA749_0>=Out && LA749_0<=Set)||LA749_0==As||LA749_0==Of||LA749_0==RULE_IDENTIFIER) ) {
            alt749=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 749, 0, input);

            throw nvae;
        }
        switch (alt749) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }
                int alt741=2;
                int LA741_0 = input.LA(1);

                if ( ((LA741_0>=Intersection && LA741_0<=Implements)||(LA741_0>=Promisify && LA741_0<=Abstract)||LA741_0==External||(LA741_0>=Private && LA741_0<=Project)||LA741_0==Public||LA741_0==Static||LA741_0==Target||(LA741_0>=Async && LA741_0<=Await)||LA741_0==Union||LA741_0==This||LA741_0==From||LA741_0==This_1||(LA741_0>=Type && LA741_0<=Void)||LA741_0==FullStopFullStopFullStop||(LA741_0>=Get && LA741_0<=Let)||(LA741_0>=Out && LA741_0<=Set)||LA741_0==As||LA741_0==Of||(LA741_0>=QuestionMark && LA741_0<=LeftSquareBracket)||LA741_0==LeftCurlyBracket||LA741_0==Tilde||LA741_0==RULE_IDENTIFIER) ) {
                    alt741=1;
                }
                switch (alt741) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop740:
                        do {
                            int alt740=2;
                            int LA740_0 = input.LA(1);

                            if ( (LA740_0==Comma) ) {
                                alt740=1;
                            }


                            switch (alt740) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop740;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt742=2;
                int LA742_0 = input.LA(1);

                if ( (LA742_0==Colon) ) {
                    alt742=1;
                }
                switch (alt742) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt744=2;
                int LA744_0 = input.LA(1);

                if ( ((LA744_0>=Intersection && LA744_0<=Implements)||(LA744_0>=Promisify && LA744_0<=Abstract)||LA744_0==External||(LA744_0>=Private && LA744_0<=Project)||LA744_0==Public||LA744_0==Static||LA744_0==Target||(LA744_0>=Async && LA744_0<=Await)||LA744_0==Union||LA744_0==This||LA744_0==From||LA744_0==This_1||(LA744_0>=Type && LA744_0<=Void)||LA744_0==FullStopFullStopFullStop||(LA744_0>=Get && LA744_0<=Let)||(LA744_0>=Out && LA744_0<=Set)||LA744_0==As||LA744_0==Of||(LA744_0>=QuestionMark && LA744_0<=LeftSquareBracket)||LA744_0==LeftCurlyBracket||LA744_0==Tilde||LA744_0==RULE_IDENTIFIER) ) {
                    alt744=1;
                }
                switch (alt744) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop743:
                        do {
                            int alt743=2;
                            int LA743_0 = input.LA(1);

                            if ( (LA743_0==Comma) ) {
                                alt743=1;
                            }


                            switch (alt743) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop743;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt745=2;
                int LA745_0 = input.LA(1);

                if ( (LA745_0==Colon) ) {
                    alt745=1;
                }
                switch (alt745) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt747=2;
                int LA747_0 = input.LA(1);

                if ( ((LA747_0>=Intersection && LA747_0<=Implements)||(LA747_0>=Promisify && LA747_0<=Abstract)||LA747_0==External||(LA747_0>=Private && LA747_0<=Project)||LA747_0==Public||LA747_0==Static||LA747_0==Target||(LA747_0>=Async && LA747_0<=Await)||LA747_0==Union||LA747_0==This||LA747_0==From||LA747_0==This_1||(LA747_0>=Type && LA747_0<=Void)||LA747_0==FullStopFullStopFullStop||(LA747_0>=Get && LA747_0<=Let)||(LA747_0>=Out && LA747_0<=Set)||LA747_0==As||LA747_0==Of||(LA747_0>=QuestionMark && LA747_0<=LeftSquareBracket)||LA747_0==LeftCurlyBracket||LA747_0==Tilde||LA747_0==RULE_IDENTIFIER) ) {
                    alt747=1;
                }
                switch (alt747) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop746:
                        do {
                            int alt746=2;
                            int LA746_0 = input.LA(1);

                            if ( (LA746_0==Comma) ) {
                                alt746=1;
                            }


                            switch (alt746) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop746;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt748=2;
                int LA748_0 = input.LA(1);

                if ( (LA748_0==Colon) ) {
                    alt748=1;
                }
                switch (alt748) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred255_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred256_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred257_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_134); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred258_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred259_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred260_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred261_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt759=4;
        int LA759_0 = input.LA(1);

        if ( (LA759_0==LeftParenthesis) && (synpred258_InternalN4JSXParser())) {
            alt759=1;
        }
        else if ( (LA759_0==Async) ) {
            int LA759_2 = input.LA(2);

            if ( (LA759_2==EqualsSignGreaterThanSign) ) {
                alt759=4;
            }
            else if ( (LA759_2==RULE_NO_LINE_TERMINATOR) && (synpred259_InternalN4JSXParser())) {
                alt759=2;
            }
            else if ( (LA759_2==LeftParenthesis) && (synpred259_InternalN4JSXParser())) {
                alt759=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 759, 2, input);

                throw nvae;
            }
        }
        else if ( (LA759_0==Asterisk) && (synpred260_InternalN4JSXParser())) {
            alt759=3;
        }
        else if ( ((LA759_0>=Intersection && LA759_0<=Implements)||(LA759_0>=Promisify && LA759_0<=Abstract)||LA759_0==External||(LA759_0>=Private && LA759_0<=Project)||LA759_0==Public||LA759_0==Static||LA759_0==Target||LA759_0==Await||LA759_0==Union||LA759_0==This||LA759_0==From||LA759_0==Type||(LA759_0>=Get && LA759_0<=Let)||(LA759_0>=Out && LA759_0<=Set)||LA759_0==As||LA759_0==Of||LA759_0==RULE_IDENTIFIER) ) {
            alt759=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 759, 0, input);

            throw nvae;
        }
        switch (alt759) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }
                int alt751=2;
                int LA751_0 = input.LA(1);

                if ( ((LA751_0>=Intersection && LA751_0<=Implements)||(LA751_0>=Promisify && LA751_0<=Abstract)||LA751_0==External||(LA751_0>=Private && LA751_0<=Project)||LA751_0==Public||LA751_0==Static||LA751_0==Target||(LA751_0>=Async && LA751_0<=Await)||LA751_0==Union||LA751_0==This||LA751_0==From||LA751_0==This_1||(LA751_0>=Type && LA751_0<=Void)||LA751_0==FullStopFullStopFullStop||(LA751_0>=Get && LA751_0<=Let)||(LA751_0>=Out && LA751_0<=Set)||LA751_0==As||LA751_0==Of||(LA751_0>=QuestionMark && LA751_0<=LeftSquareBracket)||LA751_0==LeftCurlyBracket||LA751_0==Tilde||LA751_0==RULE_IDENTIFIER) ) {
                    alt751=1;
                }
                switch (alt751) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop750:
                        do {
                            int alt750=2;
                            int LA750_0 = input.LA(1);

                            if ( (LA750_0==Comma) ) {
                                alt750=1;
                            }


                            switch (alt750) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop750;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt752=2;
                int LA752_0 = input.LA(1);

                if ( (LA752_0==Colon) ) {
                    alt752=1;
                }
                switch (alt752) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt754=2;
                int LA754_0 = input.LA(1);

                if ( ((LA754_0>=Intersection && LA754_0<=Implements)||(LA754_0>=Promisify && LA754_0<=Abstract)||LA754_0==External||(LA754_0>=Private && LA754_0<=Project)||LA754_0==Public||LA754_0==Static||LA754_0==Target||(LA754_0>=Async && LA754_0<=Await)||LA754_0==Union||LA754_0==This||LA754_0==From||LA754_0==This_1||(LA754_0>=Type && LA754_0<=Void)||LA754_0==FullStopFullStopFullStop||(LA754_0>=Get && LA754_0<=Let)||(LA754_0>=Out && LA754_0<=Set)||LA754_0==As||LA754_0==Of||(LA754_0>=QuestionMark && LA754_0<=LeftSquareBracket)||LA754_0==LeftCurlyBracket||LA754_0==Tilde||LA754_0==RULE_IDENTIFIER) ) {
                    alt754=1;
                }
                switch (alt754) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop753:
                        do {
                            int alt753=2;
                            int LA753_0 = input.LA(1);

                            if ( (LA753_0==Comma) ) {
                                alt753=1;
                            }


                            switch (alt753) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop753;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt755=2;
                int LA755_0 = input.LA(1);

                if ( (LA755_0==Colon) ) {
                    alt755=1;
                }
                switch (alt755) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt757=2;
                int LA757_0 = input.LA(1);

                if ( ((LA757_0>=Intersection && LA757_0<=Implements)||(LA757_0>=Promisify && LA757_0<=Abstract)||LA757_0==External||(LA757_0>=Private && LA757_0<=Project)||LA757_0==Public||LA757_0==Static||LA757_0==Target||(LA757_0>=Async && LA757_0<=Await)||LA757_0==Union||LA757_0==This||LA757_0==From||LA757_0==This_1||(LA757_0>=Type && LA757_0<=Void)||LA757_0==FullStopFullStopFullStop||(LA757_0>=Get && LA757_0<=Let)||(LA757_0>=Out && LA757_0<=Set)||LA757_0==As||LA757_0==Of||(LA757_0>=QuestionMark && LA757_0<=LeftSquareBracket)||LA757_0==LeftCurlyBracket||LA757_0==Tilde||LA757_0==RULE_IDENTIFIER) ) {
                    alt757=1;
                }
                switch (alt757) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop756:
                        do {
                            int alt756=2;
                            int LA756_0 = input.LA(1);

                            if ( (LA756_0==Comma) ) {
                                alt756=1;
                            }


                            switch (alt756) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop756;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt758=2;
                int LA758_0 = input.LA(1);

                if ( (LA758_0==Colon) ) {
                    alt758=1;
                }
                switch (alt758) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred262_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred263_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred264_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred265_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred275_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred279_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred280_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred283_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop768:
        do {
            int alt768=2;
            int LA768_0 = input.LA(1);

            if ( ((LA768_0>=Protected && LA768_0<=Abstract)||LA768_0==External||(LA768_0>=Private && LA768_0<=Project)||LA768_0==Public||LA768_0==Static||LA768_0==Const) ) {
                alt768=1;
            }


            switch (alt768) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop768;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred284_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop769:
        do {
            int alt769=2;
            int LA769_0 = input.LA(1);

            if ( ((LA769_0>=Protected && LA769_0<=Abstract)||LA769_0==External||(LA769_0>=Private && LA769_0<=Project)||LA769_0==Public||LA769_0==Static||LA769_0==Const) ) {
                alt769=1;
            }


            switch (alt769) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop769;
            }
        } while (true);

        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred285_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop770:
        do {
            int alt770=2;
            alt770 = dfa770.predict(input);
            switch (alt770) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop770;
            }
        } while (true);
        int alt771=2;
        int LA771_0 = input.LA(1);

        if ( (LA771_0==LessThanSign) ) {
            alt771=1;
        }
        switch (alt771) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt772=2;
        alt772 = dfa772.predict(input);
        switch (alt772) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt773=2;
        int LA773_0 = input.LA(1);

        if ( (LA773_0==Asterisk) ) {
            alt773=1;
        }
        else if ( ((LA773_0>=Intersection && LA773_0<=With)||(LA773_0>=For && LA773_0<=Var)||(LA773_0>=As && LA773_0<=Of)||LA773_0==LeftSquareBracket||LA773_0==RULE_DOUBLE||LA773_0==RULE_HEX_INT||LA773_0==RULE_OCTAL_INT||LA773_0==RULE_SCIENTIFIC_INT||LA773_0==RULE_IDENTIFIER||LA773_0==RULE_STRING||LA773_0==RULE_INT) ) {
            alt773=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 773, 0, input);

            throw nvae;
        }
        switch (alt773) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred286_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop774:
        do {
            int alt774=2;
            int LA774_0 = input.LA(1);

            if ( ((LA774_0>=Protected && LA774_0<=Abstract)||LA774_0==External||(LA774_0>=Private && LA774_0<=Project)||LA774_0==Public||LA774_0==Static||LA774_0==Const) ) {
                alt774=1;
            }


            switch (alt774) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop774;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred287_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop775:
        do {
            int alt775=2;
            int LA775_0 = input.LA(1);

            if ( ((LA775_0>=Protected && LA775_0<=Abstract)||LA775_0==External||(LA775_0>=Private && LA775_0<=Project)||LA775_0==Public||LA775_0==Static||LA775_0==Const) ) {
                alt775=1;
            }


            switch (alt775) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop775;
            }
        } while (true);

        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred288_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop776:
        do {
            int alt776=2;
            alt776 = dfa776.predict(input);
            switch (alt776) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop776;
            }
        } while (true);
        int alt777=2;
        int LA777_0 = input.LA(1);

        if ( (LA777_0==LessThanSign) ) {
            alt777=1;
        }
        switch (alt777) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt778=2;
        alt778 = dfa778.predict(input);
        switch (alt778) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt779=2;
        int LA779_0 = input.LA(1);

        if ( (LA779_0==Asterisk) ) {
            alt779=1;
        }
        else if ( ((LA779_0>=Intersection && LA779_0<=With)||(LA779_0>=For && LA779_0<=Var)||(LA779_0>=As && LA779_0<=Of)||LA779_0==LeftSquareBracket||LA779_0==RULE_DOUBLE||LA779_0==RULE_HEX_INT||LA779_0==RULE_OCTAL_INT||LA779_0==RULE_SCIENTIFIC_INT||LA779_0==RULE_IDENTIFIER||LA779_0==RULE_STRING||LA779_0==RULE_INT) ) {
            alt779=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 779, 0, input);

            throw nvae;
        }
        switch (alt779) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred289_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop780:
        do {
            int alt780=2;
            int LA780_0 = input.LA(1);

            if ( ((LA780_0>=Protected && LA780_0<=Abstract)||LA780_0==External||(LA780_0>=Private && LA780_0<=Project)||LA780_0==Public||LA780_0==Static||LA780_0==Const) ) {
                alt780=1;
            }


            switch (alt780) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop780;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred291_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop781:
        do {
            int alt781=2;
            int LA781_0 = input.LA(1);

            if ( ((LA781_0>=Protected && LA781_0<=Abstract)||LA781_0==External||(LA781_0>=Private && LA781_0<=Project)||LA781_0==Public||LA781_0==Static||LA781_0==Const) ) {
                alt781=1;
            }


            switch (alt781) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop781;
            }
        } while (true);

        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred293_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop782:
        do {
            int alt782=2;
            alt782 = dfa782.predict(input);
            switch (alt782) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop782;
            }
        } while (true);
        int alt783=2;
        int LA783_0 = input.LA(1);

        if ( (LA783_0==LessThanSign) ) {
            alt783=1;
        }
        switch (alt783) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt784=2;
        alt784 = dfa784.predict(input);
        switch (alt784) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt785=2;
        int LA785_0 = input.LA(1);

        if ( (LA785_0==Asterisk) ) {
            alt785=1;
        }
        else if ( ((LA785_0>=Intersection && LA785_0<=With)||(LA785_0>=For && LA785_0<=Var)||(LA785_0>=As && LA785_0<=Of)||LA785_0==LeftSquareBracket||LA785_0==RULE_DOUBLE||LA785_0==RULE_HEX_INT||LA785_0==RULE_OCTAL_INT||LA785_0==RULE_SCIENTIFIC_INT||LA785_0==RULE_IDENTIFIER||LA785_0==RULE_STRING||LA785_0==RULE_INT) ) {
            alt785=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 785, 0, input);

            throw nvae;
        }
        switch (alt785) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred297_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop786:
        do {
            int alt786=2;
            int LA786_0 = input.LA(1);

            if ( ((LA786_0>=Protected && LA786_0<=Abstract)||LA786_0==External||(LA786_0>=Private && LA786_0<=Project)||LA786_0==Public||LA786_0==Static||LA786_0==Const) ) {
                alt786=1;
            }


            switch (alt786) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop786;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred298_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred299_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop787:
        do {
            int alt787=2;
            int LA787_0 = input.LA(1);

            if ( ((LA787_0>=Protected && LA787_0<=Abstract)||LA787_0==External||(LA787_0>=Private && LA787_0<=Project)||LA787_0==Public||LA787_0==Static||LA787_0==Const) ) {
                alt787=1;
            }


            switch (alt787) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop787;
            }
        } while (true);

        match(input,Set,FOLLOW_185); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred301_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop788:
        do {
            int alt788=2;
            alt788 = dfa788.predict(input);
            switch (alt788) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop788;
            }
        } while (true);
        int alt789=2;
        int LA789_0 = input.LA(1);

        if ( (LA789_0==LessThanSign) ) {
            alt789=1;
        }
        switch (alt789) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt790=2;
        alt790 = dfa790.predict(input);
        switch (alt790) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt791=2;
        int LA791_0 = input.LA(1);

        if ( (LA791_0==Asterisk) ) {
            alt791=1;
        }
        else if ( ((LA791_0>=Intersection && LA791_0<=With)||(LA791_0>=For && LA791_0<=Var)||(LA791_0>=As && LA791_0<=Of)||LA791_0==LeftSquareBracket||LA791_0==RULE_DOUBLE||LA791_0==RULE_HEX_INT||LA791_0==RULE_OCTAL_INT||LA791_0==RULE_SCIENTIFIC_INT||LA791_0==RULE_IDENTIFIER||LA791_0==RULE_STRING||LA791_0==RULE_INT) ) {
            alt791=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 791, 0, input);

            throw nvae;
        }
        switch (alt791) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred311_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred316_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred318_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred323_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred326_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred327_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred328_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred329_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred330_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred331_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred332_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred333_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_163); if (state.failed) return ;
        pushFollow(FOLLOW_75);
        ruleTAnonymousFormalParameterList();

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_62); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred334_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleUndefModifierToken();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred335_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred336_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred337_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred338_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred339_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred340_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred341_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred342_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt805=2;
        int LA805_0 = input.LA(1);

        if ( (LA805_0==LessThanSign) ) {
            alt805=1;
        }
        switch (alt805) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_28); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_29);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop804:
                do {
                    int alt804=2;
                    int LA804_0 = input.LA(1);

                    if ( (LA804_0==Comma) ) {
                        alt804=1;
                    }


                    switch (alt804) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_28); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_29);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop804;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_64);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred346_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred285_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA217 dfa217 = new DFA217(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA236 dfa236 = new DFA236(this);
    protected DFA235 dfa235 = new DFA235(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA258 dfa258 = new DFA258(this);
    protected DFA257 dfa257 = new DFA257(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA281 dfa281 = new DFA281(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA285 dfa285 = new DFA285(this);
    protected DFA288 dfa288 = new DFA288(this);
    protected DFA298 dfa298 = new DFA298(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA296 dfa296 = new DFA296(this);
    protected DFA300 dfa300 = new DFA300(this);
    protected DFA304 dfa304 = new DFA304(this);
    protected DFA307 dfa307 = new DFA307(this);
    protected DFA308 dfa308 = new DFA308(this);
    protected DFA309 dfa309 = new DFA309(this);
    protected DFA311 dfa311 = new DFA311(this);
    protected DFA329 dfa329 = new DFA329(this);
    protected DFA335 dfa335 = new DFA335(this);
    protected DFA348 dfa348 = new DFA348(this);
    protected DFA349 dfa349 = new DFA349(this);
    protected DFA352 dfa352 = new DFA352(this);
    protected DFA353 dfa353 = new DFA353(this);
    protected DFA354 dfa354 = new DFA354(this);
    protected DFA355 dfa355 = new DFA355(this);
    protected DFA387 dfa387 = new DFA387(this);
    protected DFA386 dfa386 = new DFA386(this);
    protected DFA389 dfa389 = new DFA389(this);
    protected DFA388 dfa388 = new DFA388(this);
    protected DFA391 dfa391 = new DFA391(this);
    protected DFA390 dfa390 = new DFA390(this);
    protected DFA393 dfa393 = new DFA393(this);
    protected DFA392 dfa392 = new DFA392(this);
    protected DFA394 dfa394 = new DFA394(this);
    protected DFA395 dfa395 = new DFA395(this);
    protected DFA396 dfa396 = new DFA396(this);
    protected DFA397 dfa397 = new DFA397(this);
    protected DFA428 dfa428 = new DFA428(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA471 dfa471 = new DFA471(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA473 dfa473 = new DFA473(this);
    protected DFA476 dfa476 = new DFA476(this);
    protected DFA478 dfa478 = new DFA478(this);
    protected DFA480 dfa480 = new DFA480(this);
    protected DFA495 dfa495 = new DFA495(this);
    protected DFA485 dfa485 = new DFA485(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA490 dfa490 = new DFA490(this);
    protected DFA492 dfa492 = new DFA492(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA497 dfa497 = new DFA497(this);
    protected DFA500 dfa500 = new DFA500(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA504 dfa504 = new DFA504(this);
    protected DFA506 dfa506 = new DFA506(this);
    protected DFA509 dfa509 = new DFA509(this);
    protected DFA511 dfa511 = new DFA511(this);
    protected DFA519 dfa519 = new DFA519(this);
    protected DFA521 dfa521 = new DFA521(this);
    protected DFA523 dfa523 = new DFA523(this);
    protected DFA526 dfa526 = new DFA526(this);
    protected DFA533 dfa533 = new DFA533(this);
    protected DFA536 dfa536 = new DFA536(this);
    protected DFA546 dfa546 = new DFA546(this);
    protected DFA552 dfa552 = new DFA552(this);
    protected DFA556 dfa556 = new DFA556(this);
    protected DFA557 dfa557 = new DFA557(this);
    protected DFA574 dfa574 = new DFA574(this);
    protected DFA578 dfa578 = new DFA578(this);
    protected DFA581 dfa581 = new DFA581(this);
    protected DFA592 dfa592 = new DFA592(this);
    protected DFA597 dfa597 = new DFA597(this);
    protected DFA599 dfa599 = new DFA599(this);
    protected DFA603 dfa603 = new DFA603(this);
    protected DFA696 dfa696 = new DFA696(this);
    protected DFA698 dfa698 = new DFA698(this);
    protected DFA700 dfa700 = new DFA700(this);
    protected DFA702 dfa702 = new DFA702(this);
    protected DFA704 dfa704 = new DFA704(this);
    protected DFA706 dfa706 = new DFA706(this);
    protected DFA708 dfa708 = new DFA708(this);
    protected DFA710 dfa710 = new DFA710(this);
    protected DFA770 dfa770 = new DFA770(this);
    protected DFA772 dfa772 = new DFA772(this);
    protected DFA776 dfa776 = new DFA776(this);
    protected DFA778 dfa778 = new DFA778(this);
    protected DFA782 dfa782 = new DFA782(this);
    protected DFA784 dfa784 = new DFA784(this);
    protected DFA788 dfa788 = new DFA788(this);
    protected DFA790 dfa790 = new DFA790(this);
    static final String dfa_1s = "\41\uffff";
    static final String dfa_2s = "\4\uffff\1\3\34\uffff";
    static final String dfa_3s = "\1\4\3\uffff\1\7\1\4\13\uffff\11\4\1\uffff\2\4\1\10\3\4";
    static final String dfa_4s = "\1\u0095\3\uffff\1\u0099\1\176\13\uffff\11\176\1\uffff\6\176";
    static final String dfa_5s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\15\1\16\2\14\1\5\11\uffff\1\4\6\uffff";
    static final String dfa_6s = "\4\uffff\1\0\34\uffff}>";
    static final String[] dfa_7s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\31\1\27\1\32\1\uffff\1\23\3\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\24\1\uffff\1\32\1\22\7\uffff\1\30\1\uffff\1\32\1\21\3\uffff\1\32\1\uffff\1\20\1\uffff\1\26\1\20\6\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\5\uffff\1\20\14\uffff\1\20\1\uffff\1\20\2\uffff\1\20\2\uffff\1\20\14\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\1\34\1\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\35\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\35\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\36\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\37\17\uffff\1\32",
            "",
            "\3\20\1\uffff\4\20\2\uffff\1\20\4\uffff\2\20\3\uffff\1\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2\20\7\uffff\1\20\1\uffff\2\20\3\uffff\1\20\3\uffff\1\20\7\uffff\2\20\1\uffff\2\20\23\uffff\1\20\3\uffff\1\20\17\uffff\1\32\7\uffff\1\32\17\uffff\1\20",
            "\61\32\4\uffff\10\32\21\uffff\5\32\17\uffff\1\32\27\uffff\1\40",
            "\1\20\23\uffff\1\20\2\uffff\1\20\12\uffff\1\20\5\uffff\1\20\2\uffff\1\20\2\uffff\1\32\62\uffff\1\20\24\uffff\1\20",
            "\2\20\2\uffff\1\20\23\uffff\1\20\2\uffff\1\20\7\uffff\1\20\2\uffff\1\20\5\uffff\1\20\1\uffff\2\20\2\uffff\1\32\67\uffff\1\20\2\uffff\1\20\14\uffff\1\20",
            "\2\20\2\uffff\1\20\23\uffff\1\20\2\uffff\1\20\7\uffff\1\20\2\uffff\1\20\5\uffff\1\20\1\uffff\2\20\2\uffff\1\32\67\uffff\1\20\2\uffff\1\20\14\uffff\1\20",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32"
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "88:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | JSXElementParserRuleCall_3= ruleJSXElement | ParameterizedCallExpressionParserRuleCall_4= ruleParameterizedCallExpression | LiteralParserRuleCall_5= ruleLiteral | ArrayLiteralParserRuleCall_6= ruleArrayLiteral | ObjectLiteralParserRuleCall_7= ruleObjectLiteral | ParenExpressionParserRuleCall_8= ruleParenExpression | AnnotatedExpressionParserRuleCall_9= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_10= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_11= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_12= ruleN4ClassExpression | TemplateLiteralParserRuleCall_13= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA3_4==RULE_NO_LINE_TERMINATOR) && (synpred1_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA3_4==Function) && (synpred1_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA3_4==EOF||LA3_4==Instanceof||LA3_4==ExclamationMarkEqualsSignEqualsSign||(LA3_4>=LessThanSignLessThanSignEqualsSign && LA3_4<=EqualsSignEqualsSignEqualsSign)||(LA3_4>=ExclamationMarkEqualsSign && LA3_4<=EqualsSignEqualsSign)||LA3_4==GreaterThanSignEqualsSign||(LA3_4>=CircumflexAccentEqualsSign && LA3_4<=As)||(LA3_4>=In && LA3_4<=VerticalLineVerticalLine)||(LA3_4>=PercentSign && LA3_4<=QuestionMark)||(LA3_4>=LeftSquareBracket && LA3_4<=RightCurlyBracket)||(LA3_4>=RULE_TEMPLATE_HEAD && LA3_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_4==RULE_ML_COMMENT||LA3_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_8s = "\1\4\3\uffff\1\7\1\4\12\uffff\1\4\1\uffff\10\4\1\uffff\2\4\1\10\3\4";
    static final String dfa_9s = "\1\u0095\3\uffff\1\u0099\1\176\12\uffff\1\176\1\uffff\10\176\1\uffff\6\176";
    static final String dfa_10s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\15\1\16\2\14\1\uffff\1\4\10\uffff\1\5\6\uffff";
    static final String[] dfa_11s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\26\1\22\1\21\1\uffff\1\30\3\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\23\1\uffff\1\21\1\31\7\uffff\1\25\1\uffff\1\21\1\27\3\uffff\1\21\1\uffff\1\32\1\uffff\1\24\1\32\6\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\5\uffff\1\32\14\uffff\1\32\1\uffff\1\32\2\uffff\1\32\2\uffff\1\32\14\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\1\33\1\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\36\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\37\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\17\uffff\1\21\27\uffff\1\40",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\7\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\17\uffff\1\21\7\uffff\1\21\17\uffff\1\32",
            "\1\32\23\uffff\1\32\2\uffff\1\32\12\uffff\1\32\5\uffff\1\32\2\uffff\1\32\2\uffff\1\21\62\uffff\1\32\24\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21"
    };
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[][] dfa_11 = unpackEncodedStringArray(dfa_11s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_6;
            this.transition = dfa_11;
        }
        public String getDescription() {
            return "134:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | JSXElementParserRuleCall_3= ruleJSXElement | ParameterizedCallExpressionParserRuleCall_4= norm1_ParameterizedCallExpression | LiteralParserRuleCall_5= ruleLiteral | ArrayLiteralParserRuleCall_6= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_7= norm1_ObjectLiteral | ParenExpressionParserRuleCall_8= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_9= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_10= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_11= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_12= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_13= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_4==RULE_NO_LINE_TERMINATOR) && (synpred2_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA4_4==Function) && (synpred2_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA4_4==EOF||LA4_4==Instanceof||LA4_4==ExclamationMarkEqualsSignEqualsSign||(LA4_4>=LessThanSignLessThanSignEqualsSign && LA4_4<=EqualsSignEqualsSignEqualsSign)||(LA4_4>=ExclamationMarkEqualsSign && LA4_4<=EqualsSignEqualsSign)||LA4_4==GreaterThanSignEqualsSign||(LA4_4>=CircumflexAccentEqualsSign && LA4_4<=As)||(LA4_4>=In && LA4_4<=VerticalLineVerticalLine)||(LA4_4>=PercentSign && LA4_4<=QuestionMark)||(LA4_4>=LeftSquareBracket && LA4_4<=RightCurlyBracket)||(LA4_4>=RULE_TEMPLATE_HEAD && LA4_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA4_4==RULE_ML_COMMENT||LA4_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_12s = "\124\uffff";
    static final String dfa_13s = "\1\4\13\0\110\uffff";
    static final String dfa_14s = "\1\u0095\13\0\110\uffff";
    static final String dfa_15s = "\14\uffff\1\4\1\5\1\6\1\7\101\uffff\1\1\1\2\1\3";
    static final String dfa_16s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\110\uffff}>";
    static final String[] dfa_17s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\2\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final char[] dfa_13 = DFA.unpackEncodedStringToUnsignedChars(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[][] dfa_17 = unpackEncodedStringArray(dfa_17s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_12;
            this.eof = dfa_12;
            this.min = dfa_13;
            this.max = dfa_14;
            this.accept = dfa_15;
            this.special = dfa_16;
            this.transition = dfa_17;
        }
        public String getDescription() {
            return "424:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_0 = input.LA(1);

                         
                        int index13_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA13_0>=9 && LA13_0<=106 && (s=T2S.M_0[LA13_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA13_0==Enum) && (synpred6_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA13_0==Import) ) {s = 13;}

                        else if ( (LA13_0==Export) ) {s = 14;}

                        else if ( ((LA13_0>=Intersection && LA13_0<=Implements)||LA13_0==Promisify||(LA13_0>=Continue && LA13_0<=Debugger)||LA13_0==Function||LA13_0==Delete||LA13_0==Return||(LA13_0>=Switch && LA13_0<=Break)||(LA13_0>=False && LA13_0<=This)||(LA13_0>=From && LA13_0<=With)||(LA13_0>=For && LA13_0<=Var)||LA13_0==PlusSignPlusSign||LA13_0==HyphenMinusHyphenMinus||LA13_0==SolidusEqualsSign||(LA13_0>=As && LA13_0<=If)||LA13_0==Of||LA13_0==ExclamationMark||LA13_0==LeftParenthesis||(LA13_0>=Asterisk && LA13_0<=PlusSign)||LA13_0==HyphenMinus||LA13_0==Solidus||(LA13_0>=Semicolon && LA13_0<=LessThanSign)||LA13_0==LeftSquareBracket||LA13_0==LeftCurlyBracket||LA13_0==Tilde||LA13_0==RULE_DOUBLE||(LA13_0>=RULE_HEX_INT && LA13_0<=RULE_LEGACY_OCTAL_INT)||LA13_0==RULE_SCIENTIFIC_INT||LA13_0==RULE_IDENTIFIER||LA13_0==RULE_STRING||(LA13_0>=RULE_TEMPLATE_HEAD && LA13_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA13_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index13_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_1 = input.LA(1);

                         
                        int index13_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSXParser()) ) {s = 83;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_18s = "\17\uffff";
    static final String dfa_19s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_20s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_21s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_22s = "\1\2\2\uffff\1\3\1\5\1\7\1\0\1\4\1\6\1\10\1\1\4\uffff}>";
    static final String[] dfa_23s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final char[] dfa_19 = DFA.unpackEncodedStringToUnsignedChars(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[][] dfa_23 = unpackEncodedStringArray(dfa_23s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_18;
            this.eof = dfa_18;
            this.min = dfa_19;
            this.max = dfa_20;
            this.accept = dfa_21;
            this.special = dfa_22;
            this.transition = dfa_23;
        }
        public String getDescription() {
            return "501:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_6==Enum) ) {s = 14;}

                        else if ( (LA26_6==Private) ) {s = 3;}

                        else if ( (LA26_6==Project) ) {s = 4;}

                        else if ( (LA26_6==Protected) ) {s = 5;}

                        else if ( (LA26_6==Public) ) {s = 6;}

                        else if ( (LA26_6==External) ) {s = 7;}

                        else if ( (LA26_6==Abstract) ) {s = 8;}

                        else if ( (LA26_6==Static) ) {s = 9;}

                        else if ( (LA26_6==Const) ) {s = 10;}

                        else if ( (LA26_6==Interface||LA26_6==Class) ) {s = 13;}

                        else if ( (LA26_6==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_6==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_10==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_10==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_10==Private) ) {s = 3;}

                        else if ( (LA26_10==Project) ) {s = 4;}

                        else if ( (LA26_10==Protected) ) {s = 5;}

                        else if ( (LA26_10==Public) ) {s = 6;}

                        else if ( (LA26_10==External) ) {s = 7;}

                        else if ( (LA26_10==Abstract) ) {s = 8;}

                        else if ( (LA26_10==Static) ) {s = 9;}

                        else if ( (LA26_10==Const) ) {s = 10;}

                        else if ( (LA26_10==Interface||LA26_10==Class) ) {s = 13;}

                        else if ( (LA26_10==Enum) ) {s = 14;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA26_0>=10 && LA26_0<=35 && (s=T2S.M_1[LA26_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA26_0==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_0==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_0==Interface||LA26_0==Class) ) {s = 13;}

                        else if ( (LA26_0==Enum) ) {s = 14;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_3==Enum) ) {s = 14;}

                        else if ( (LA26_3==Private) ) {s = 3;}

                        else if ( (LA26_3==Project) ) {s = 4;}

                        else if ( (LA26_3==Protected) ) {s = 5;}

                        else if ( (LA26_3==Public) ) {s = 6;}

                        else if ( (LA26_3==External) ) {s = 7;}

                        else if ( (LA26_3==Abstract) ) {s = 8;}

                        else if ( (LA26_3==Static) ) {s = 9;}

                        else if ( (LA26_3==Const) ) {s = 10;}

                        else if ( (LA26_3==Interface||LA26_3==Class) ) {s = 13;}

                        else if ( (LA26_3==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_3==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_7==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_7==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_7==Private) ) {s = 3;}

                        else if ( (LA26_7==Project) ) {s = 4;}

                        else if ( (LA26_7==Protected) ) {s = 5;}

                        else if ( (LA26_7==Public) ) {s = 6;}

                        else if ( (LA26_7==External) ) {s = 7;}

                        else if ( (LA26_7==Abstract) ) {s = 8;}

                        else if ( (LA26_7==Static) ) {s = 9;}

                        else if ( (LA26_7==Const) ) {s = 10;}

                        else if ( (LA26_7==Interface||LA26_7==Class) ) {s = 13;}

                        else if ( (LA26_7==Enum) ) {s = 14;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_4==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_4==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_4==Private) ) {s = 3;}

                        else if ( (LA26_4==Project) ) {s = 4;}

                        else if ( (LA26_4==Protected) ) {s = 5;}

                        else if ( (LA26_4==Public) ) {s = 6;}

                        else if ( (LA26_4==External) ) {s = 7;}

                        else if ( (LA26_4==Abstract) ) {s = 8;}

                        else if ( (LA26_4==Static) ) {s = 9;}

                        else if ( (LA26_4==Const) ) {s = 10;}

                        else if ( (LA26_4==Interface||LA26_4==Class) ) {s = 13;}

                        else if ( (LA26_4==Enum) ) {s = 14;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_8==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_8==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_8==Private) ) {s = 3;}

                        else if ( (LA26_8==Project) ) {s = 4;}

                        else if ( (LA26_8==Protected) ) {s = 5;}

                        else if ( (LA26_8==Public) ) {s = 6;}

                        else if ( (LA26_8==External) ) {s = 7;}

                        else if ( (LA26_8==Abstract) ) {s = 8;}

                        else if ( (LA26_8==Static) ) {s = 9;}

                        else if ( (LA26_8==Const) ) {s = 10;}

                        else if ( (LA26_8==Interface||LA26_8==Class) ) {s = 13;}

                        else if ( (LA26_8==Enum) ) {s = 14;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_5==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_5==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_5==Private) ) {s = 3;}

                        else if ( (LA26_5==Project) ) {s = 4;}

                        else if ( (LA26_5==Protected) ) {s = 5;}

                        else if ( (LA26_5==Public) ) {s = 6;}

                        else if ( (LA26_5==External) ) {s = 7;}

                        else if ( (LA26_5==Abstract) ) {s = 8;}

                        else if ( (LA26_5==Static) ) {s = 9;}

                        else if ( (LA26_5==Const) ) {s = 10;}

                        else if ( (LA26_5==Interface||LA26_5==Class) ) {s = 13;}

                        else if ( (LA26_5==Enum) ) {s = 14;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_9==Enum) ) {s = 14;}

                        else if ( (LA26_9==Private) ) {s = 3;}

                        else if ( (LA26_9==Project) ) {s = 4;}

                        else if ( (LA26_9==Protected) ) {s = 5;}

                        else if ( (LA26_9==Public) ) {s = 6;}

                        else if ( (LA26_9==External) ) {s = 7;}

                        else if ( (LA26_9==Abstract) ) {s = 8;}

                        else if ( (LA26_9==Static) ) {s = 9;}

                        else if ( (LA26_9==Const) ) {s = 10;}

                        else if ( (LA26_9==Interface||LA26_9==Class) ) {s = 13;}

                        else if ( (LA26_9==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_9==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_24s = "\13\uffff";
    static final String dfa_25s = "\11\11\2\uffff";
    static final String dfa_26s = "\11\43\2\uffff";
    static final String dfa_27s = "\11\uffff\1\1\1\2";
    static final String dfa_28s = "\13\uffff}>";
    static final String[] dfa_29s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final char[] dfa_25 = DFA.unpackEncodedStringToUnsignedChars(dfa_25s);
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[][] dfa_29 = unpackEncodedStringArray(dfa_29s);

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_25;
            this.max = dfa_26;
            this.accept = dfa_27;
            this.special = dfa_28;
            this.transition = dfa_29;
        }
        public String getDescription() {
            return "518:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_30s = "\102\uffff";
    static final String dfa_31s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_32s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_33s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\60\uffff";
    static final String dfa_34s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\61\uffff}>";
    static final String[] dfa_35s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\2\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final char[] dfa_31 = DFA.unpackEncodedStringToUnsignedChars(dfa_31s);
    static final char[] dfa_32 = DFA.unpackEncodedStringToUnsignedChars(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final short[][] dfa_35 = unpackEncodedStringArray(dfa_35s);

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_30;
            this.eof = dfa_30;
            this.min = dfa_31;
            this.max = dfa_32;
            this.accept = dfa_33;
            this.special = dfa_34;
            this.transition = dfa_35;
        }
        public String getDescription() {
            return "651:2: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_0 = input.LA(1);

                         
                        int index29_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_0==CommercialAt) ) {s = 1;}

                        else if ( (LA29_0==Private) ) {s = 2;}

                        else if ( (LA29_0==Project) ) {s = 3;}

                        else if ( (LA29_0==Protected) ) {s = 4;}

                        else if ( (LA29_0==Public) ) {s = 5;}

                        else if ( (LA29_0==External) ) {s = 6;}

                        else if ( (LA29_0==Abstract) ) {s = 7;}

                        else if ( (LA29_0==Static) ) {s = 8;}

                        else if ( (LA29_0==Const) && (synpred11_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA29_0==Class) ) {s = 10;}

                        else if ( (LA29_0==Interface) ) {s = 11;}

                        else if ( (LA29_0==Enum) && (synpred11_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA29_0==Async) ) {s = 13;}

                        else if ( (LA29_0==Function) ) {s = 14;}

                        else if ( (LA29_0==Var) && (synpred11_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA29_0==Let) ) {s = 16;}

                        else if ( ((LA29_0>=Intersection && LA29_0<=Implements)||LA29_0==Promisify||LA29_0==Delete||(LA29_0>=Target && LA29_0<=Typeof)||LA29_0==Await||(LA29_0>=False && LA29_0<=Super)||LA29_0==Union||(LA29_0>=Yield && LA29_0<=This)||(LA29_0>=From && LA29_0<=Void)||LA29_0==Get||(LA29_0>=New && LA29_0<=Set)||LA29_0==PlusSignPlusSign||LA29_0==HyphenMinusHyphenMinus||LA29_0==SolidusEqualsSign||LA29_0==As||LA29_0==Of||LA29_0==ExclamationMark||LA29_0==LeftParenthesis||(LA29_0>=Asterisk && LA29_0<=PlusSign)||LA29_0==HyphenMinus||LA29_0==Solidus||LA29_0==LessThanSign||LA29_0==LeftSquareBracket||LA29_0==LeftCurlyBracket||LA29_0==Tilde||LA29_0==RULE_DOUBLE||(LA29_0>=RULE_HEX_INT && LA29_0<=RULE_LEGACY_OCTAL_INT)||LA29_0==RULE_SCIENTIFIC_INT||LA29_0==RULE_IDENTIFIER||LA29_0==RULE_STRING||(LA29_0>=RULE_TEMPLATE_HEAD && LA29_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA29_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index29_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_5 = input.LA(1);

                         
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_14 = input.LA(1);

                         
                        int index29_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_16 = input.LA(1);

                         
                        int index29_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_36s = "\67\uffff";
    static final String dfa_37s = "\17\uffff\11\16\37\uffff";
    static final String dfa_38s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\17\1\4\37\uffff";
    static final String dfa_39s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_40s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_41s = "\1\5\1\uffff\1\11\1\2\1\16\1\20\1\7\1\14\1\3\1\1\5\uffff\1\17\1\13\1\0\1\12\1\6\1\4\1\15\1\uffff\1\10\37\uffff}>";
    static final String[] dfa_42s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\3\16\1\uffff\1\16\1\27\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\26\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\2\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\56\1\uffff\1\53\1\57\1\61\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\60\1\36\3\uffff\1\62\1\uffff\1\41\1\uffff\1\46\1\uffff\1\55\1\54\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\63\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final short[][] dfa_42 = unpackEncodedStringArray(dfa_42s);

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = dfa_36;
            this.eof = dfa_37;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_41;
            this.transition = dfa_42;
        }
        public String getDescription() {
            return "764:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_17 = input.LA(1);

                         
                        int index35_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_17==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_17==Private) ) {s = 2;}

                        else if ( (LA35_17==Project) ) {s = 3;}

                        else if ( (LA35_17==Protected) ) {s = 4;}

                        else if ( (LA35_17==Public) ) {s = 5;}

                        else if ( (LA35_17==External) ) {s = 6;}

                        else if ( (LA35_17==Abstract) ) {s = 7;}

                        else if ( (LA35_17==Static) ) {s = 8;}

                        else if ( (LA35_17==Const) ) {s = 9;}

                        else if ( (LA35_17==EOF||LA35_17==Let||LA35_17==Var||LA35_17==Comma||(LA35_17>=Colon && LA35_17<=Semicolon)||LA35_17==EqualsSign||LA35_17==RightCurlyBracket||LA35_17==RULE_ML_COMMENT||LA35_17==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_17==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_17==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_17==Function||LA35_17==Async) ) {s = 13;}

                         
                        input.seek(index35_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_9==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_9==Private) ) {s = 15;}

                        else if ( (LA35_9==Project) ) {s = 16;}

                        else if ( (LA35_9==Protected) ) {s = 17;}

                        else if ( (LA35_9==Public) ) {s = 18;}

                        else if ( (LA35_9==External) ) {s = 19;}

                        else if ( (LA35_9==Abstract) ) {s = 20;}

                        else if ( (LA35_9==Static) ) {s = 21;}

                        else if ( (LA35_9==Const) ) {s = 9;}

                        else if ( ((LA35_9>=Intersection && LA35_9<=Implements)||LA35_9==Promisify||LA35_9==Target||LA35_9==Await||LA35_9==Union||(LA35_9>=Yield && LA35_9<=This)||LA35_9==From||LA35_9==Type||(LA35_9>=Get && LA35_9<=Let)||(LA35_9>=Out && LA35_9<=Set)||LA35_9==Var||LA35_9==As||LA35_9==Of||(LA35_9>=CommercialAt && LA35_9<=LeftSquareBracket)||LA35_9==LeftCurlyBracket||LA35_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA35_9==Async) ) {s = 22;}

                        else if ( (LA35_9==Interface) ) {s = 23;}

                        else if ( (LA35_9==Function) ) {s = 13;}

                        else if ( (LA35_9==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_3==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_3==Private) ) {s = 2;}

                        else if ( (LA35_3==Project) ) {s = 3;}

                        else if ( (LA35_3==Protected) ) {s = 4;}

                        else if ( (LA35_3==Public) ) {s = 5;}

                        else if ( (LA35_3==External) ) {s = 6;}

                        else if ( (LA35_3==Abstract) ) {s = 7;}

                        else if ( (LA35_3==Static) ) {s = 8;}

                        else if ( (LA35_3==Const) ) {s = 9;}

                        else if ( (LA35_3==Let||LA35_3==Var) ) {s = 14;}

                        else if ( (LA35_3==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_3==Function||LA35_3==Async) ) {s = 13;}

                        else if ( (LA35_3==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_8==Function||LA35_8==Async) ) {s = 13;}

                        else if ( (LA35_8==Private) ) {s = 2;}

                        else if ( (LA35_8==Project) ) {s = 3;}

                        else if ( (LA35_8==Protected) ) {s = 4;}

                        else if ( (LA35_8==Public) ) {s = 5;}

                        else if ( (LA35_8==External) ) {s = 6;}

                        else if ( (LA35_8==Abstract) ) {s = 7;}

                        else if ( (LA35_8==Static) ) {s = 8;}

                        else if ( (LA35_8==Const) ) {s = 9;}

                        else if ( (LA35_8==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_8==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_8==Let||LA35_8==Var) ) {s = 14;}

                        else if ( (LA35_8==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_20 = input.LA(1);

                         
                        int index35_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_20==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_20==Private) ) {s = 2;}

                        else if ( (LA35_20==Project) ) {s = 3;}

                        else if ( (LA35_20==Protected) ) {s = 4;}

                        else if ( (LA35_20==Public) ) {s = 5;}

                        else if ( (LA35_20==External) ) {s = 6;}

                        else if ( (LA35_20==Abstract) ) {s = 7;}

                        else if ( (LA35_20==Static) ) {s = 8;}

                        else if ( (LA35_20==Const) ) {s = 9;}

                        else if ( (LA35_20==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_20==EOF||LA35_20==Let||LA35_20==Var||LA35_20==Comma||(LA35_20>=Colon && LA35_20<=Semicolon)||LA35_20==EqualsSign||LA35_20==RightCurlyBracket||LA35_20==RULE_ML_COMMENT||LA35_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_20==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_20==Function||LA35_20==Async) ) {s = 13;}

                         
                        input.seek(index35_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_0 = input.LA(1);

                         
                        int index35_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_0==CommercialAt) && (synpred12_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA35_0==Private) ) {s = 2;}

                        else if ( (LA35_0==Project) ) {s = 3;}

                        else if ( (LA35_0==Protected) ) {s = 4;}

                        else if ( (LA35_0==Public) ) {s = 5;}

                        else if ( (LA35_0==External) ) {s = 6;}

                        else if ( (LA35_0==Abstract) ) {s = 7;}

                        else if ( (LA35_0==Static) ) {s = 8;}

                        else if ( (LA35_0==Const) ) {s = 9;}

                        else if ( (LA35_0==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_0==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_0==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_0==Function||LA35_0==Async) ) {s = 13;}

                        else if ( (LA35_0==Let||LA35_0==Var) ) {s = 14;}

                         
                        input.seek(index35_0);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA35_19 = input.LA(1);

                         
                        int index35_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_19==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_19==Private) ) {s = 2;}

                        else if ( (LA35_19==Project) ) {s = 3;}

                        else if ( (LA35_19==Protected) ) {s = 4;}

                        else if ( (LA35_19==Public) ) {s = 5;}

                        else if ( (LA35_19==External) ) {s = 6;}

                        else if ( (LA35_19==Abstract) ) {s = 7;}

                        else if ( (LA35_19==Static) ) {s = 8;}

                        else if ( (LA35_19==Const) ) {s = 9;}

                        else if ( (LA35_19==EOF||LA35_19==Let||LA35_19==Var||LA35_19==Comma||(LA35_19>=Colon && LA35_19<=Semicolon)||LA35_19==EqualsSign||LA35_19==RightCurlyBracket||LA35_19==RULE_ML_COMMENT||LA35_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_19==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_19==Function||LA35_19==Async) ) {s = 13;}

                        else if ( (LA35_19==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_6==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_6==Private) ) {s = 2;}

                        else if ( (LA35_6==Project) ) {s = 3;}

                        else if ( (LA35_6==Protected) ) {s = 4;}

                        else if ( (LA35_6==Public) ) {s = 5;}

                        else if ( (LA35_6==External) ) {s = 6;}

                        else if ( (LA35_6==Abstract) ) {s = 7;}

                        else if ( (LA35_6==Static) ) {s = 8;}

                        else if ( (LA35_6==Const) ) {s = 9;}

                        else if ( (LA35_6==Let||LA35_6==Var) ) {s = 14;}

                        else if ( (LA35_6==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_6==Function||LA35_6==Async) ) {s = 13;}

                        else if ( (LA35_6==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA35_23 = input.LA(1);

                         
                        int index35_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA35_23>=4 && LA35_23<=126 && (s=T2S.M_2[LA35_23-(4)])>=0) && (synpred14_InternalN4JSXParser())) { /* 31 cases */ }
                        else if ( (LA35_23==EOF||LA35_23==Comma||(LA35_23>=Colon && LA35_23<=Semicolon)||LA35_23==EqualsSign||LA35_23==RightCurlyBracket||LA35_23==RULE_ML_COMMENT||LA35_23==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index35_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_2==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_2==Private) ) {s = 2;}

                        else if ( (LA35_2==Project) ) {s = 3;}

                        else if ( (LA35_2==Protected) ) {s = 4;}

                        else if ( (LA35_2==Public) ) {s = 5;}

                        else if ( (LA35_2==External) ) {s = 6;}

                        else if ( (LA35_2==Abstract) ) {s = 7;}

                        else if ( (LA35_2==Static) ) {s = 8;}

                        else if ( (LA35_2==Const) ) {s = 9;}

                        else if ( (LA35_2==Function||LA35_2==Async) ) {s = 13;}

                        else if ( (LA35_2==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_2==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_2==Let||LA35_2==Var) ) {s = 14;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA35_18 = input.LA(1);

                         
                        int index35_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_18==Function||LA35_18==Async) ) {s = 13;}

                        else if ( (LA35_18==Private) ) {s = 2;}

                        else if ( (LA35_18==Project) ) {s = 3;}

                        else if ( (LA35_18==Protected) ) {s = 4;}

                        else if ( (LA35_18==Public) ) {s = 5;}

                        else if ( (LA35_18==External) ) {s = 6;}

                        else if ( (LA35_18==Abstract) ) {s = 7;}

                        else if ( (LA35_18==Static) ) {s = 8;}

                        else if ( (LA35_18==Const) ) {s = 9;}

                        else if ( (LA35_18==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_18==EOF||LA35_18==Let||LA35_18==Var||LA35_18==Comma||(LA35_18>=Colon && LA35_18<=Semicolon)||LA35_18==EqualsSign||LA35_18==RightCurlyBracket||LA35_18==RULE_ML_COMMENT||LA35_18==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_18==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_18==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index35_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA35_16 = input.LA(1);

                         
                        int index35_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_16==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_16==Private) ) {s = 2;}

                        else if ( (LA35_16==Project) ) {s = 3;}

                        else if ( (LA35_16==Protected) ) {s = 4;}

                        else if ( (LA35_16==Public) ) {s = 5;}

                        else if ( (LA35_16==External) ) {s = 6;}

                        else if ( (LA35_16==Abstract) ) {s = 7;}

                        else if ( (LA35_16==Static) ) {s = 8;}

                        else if ( (LA35_16==Const) ) {s = 9;}

                        else if ( (LA35_16==EOF||LA35_16==Let||LA35_16==Var||LA35_16==Comma||(LA35_16>=Colon && LA35_16<=Semicolon)||LA35_16==EqualsSign||LA35_16==RightCurlyBracket||LA35_16==RULE_ML_COMMENT||LA35_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_16==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_16==Function||LA35_16==Async) ) {s = 13;}

                        else if ( (LA35_16==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_7==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_7==Private) ) {s = 2;}

                        else if ( (LA35_7==Project) ) {s = 3;}

                        else if ( (LA35_7==Protected) ) {s = 4;}

                        else if ( (LA35_7==Public) ) {s = 5;}

                        else if ( (LA35_7==External) ) {s = 6;}

                        else if ( (LA35_7==Abstract) ) {s = 7;}

                        else if ( (LA35_7==Static) ) {s = 8;}

                        else if ( (LA35_7==Const) ) {s = 9;}

                        else if ( (LA35_7==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_7==Let||LA35_7==Var) ) {s = 14;}

                        else if ( (LA35_7==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_7==Function||LA35_7==Async) ) {s = 13;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA35_21 = input.LA(1);

                         
                        int index35_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_21==Function||LA35_21==Async) ) {s = 13;}

                        else if ( (LA35_21==Private) ) {s = 2;}

                        else if ( (LA35_21==Project) ) {s = 3;}

                        else if ( (LA35_21==Protected) ) {s = 4;}

                        else if ( (LA35_21==Public) ) {s = 5;}

                        else if ( (LA35_21==External) ) {s = 6;}

                        else if ( (LA35_21==Abstract) ) {s = 7;}

                        else if ( (LA35_21==Static) ) {s = 8;}

                        else if ( (LA35_21==Const) ) {s = 9;}

                        else if ( (LA35_21==EOF||LA35_21==Let||LA35_21==Var||LA35_21==Comma||(LA35_21>=Colon && LA35_21<=Semicolon)||LA35_21==EqualsSign||LA35_21==RightCurlyBracket||LA35_21==RULE_ML_COMMENT||LA35_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_21==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_21==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_21==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index35_21);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_4==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_4==Private) ) {s = 2;}

                        else if ( (LA35_4==Project) ) {s = 3;}

                        else if ( (LA35_4==Protected) ) {s = 4;}

                        else if ( (LA35_4==Public) ) {s = 5;}

                        else if ( (LA35_4==External) ) {s = 6;}

                        else if ( (LA35_4==Abstract) ) {s = 7;}

                        else if ( (LA35_4==Static) ) {s = 8;}

                        else if ( (LA35_4==Const) ) {s = 9;}

                        else if ( (LA35_4==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_4==Let||LA35_4==Var) ) {s = 14;}

                        else if ( (LA35_4==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_4==Function||LA35_4==Async) ) {s = 13;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_15==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_15==Private) ) {s = 2;}

                        else if ( (LA35_15==Project) ) {s = 3;}

                        else if ( (LA35_15==Protected) ) {s = 4;}

                        else if ( (LA35_15==Public) ) {s = 5;}

                        else if ( (LA35_15==External) ) {s = 6;}

                        else if ( (LA35_15==Abstract) ) {s = 7;}

                        else if ( (LA35_15==Static) ) {s = 8;}

                        else if ( (LA35_15==Const) ) {s = 9;}

                        else if ( (LA35_15==Function||LA35_15==Async) ) {s = 13;}

                        else if ( (LA35_15==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_15==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_15==EOF||LA35_15==Let||LA35_15==Var||LA35_15==Comma||(LA35_15>=Colon && LA35_15<=Semicolon)||LA35_15==EqualsSign||LA35_15==RightCurlyBracket||LA35_15==RULE_ML_COMMENT||LA35_15==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_5==Function||LA35_5==Async) ) {s = 13;}

                        else if ( (LA35_5==Private) ) {s = 2;}

                        else if ( (LA35_5==Project) ) {s = 3;}

                        else if ( (LA35_5==Protected) ) {s = 4;}

                        else if ( (LA35_5==Public) ) {s = 5;}

                        else if ( (LA35_5==External) ) {s = 6;}

                        else if ( (LA35_5==Abstract) ) {s = 7;}

                        else if ( (LA35_5==Static) ) {s = 8;}

                        else if ( (LA35_5==Const) ) {s = 9;}

                        else if ( (LA35_5==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_5==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_5==Let||LA35_5==Var) ) {s = 14;}

                        else if ( (LA35_5==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_43s = "\26\uffff";
    static final String dfa_44s = "\15\uffff\11\12";
    static final String dfa_45s = "\10\11\1\4\4\uffff\7\11\1\17\1\4";
    static final String dfa_46s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_47s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_48s = "\26\uffff}>";
    static final String[] dfa_49s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\1\uffff\1\12\1\uffff\1\24\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[][] dfa_49 = unpackEncodedStringArray(dfa_49s);

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = dfa_43;
            this.eof = dfa_44;
            this.min = dfa_45;
            this.max = dfa_46;
            this.accept = dfa_47;
            this.special = dfa_48;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "839:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_50s = "\14\uffff";
    static final String dfa_51s = "\4\uffff\10\1";
    static final String dfa_52s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_53s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_54s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_55s = "\14\uffff}>";
    static final String[] dfa_56s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final char[] dfa_53 = DFA.unpackEncodedStringToUnsignedChars(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final short[][] dfa_56 = unpackEncodedStringArray(dfa_56s);

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = dfa_50;
            this.eof = dfa_51;
            this.min = dfa_52;
            this.max = dfa_53;
            this.accept = dfa_54;
            this.special = dfa_55;
            this.transition = dfa_56;
        }
        public String getDescription() {
            return "()* loopback of 846:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_25;
            this.max = dfa_26;
            this.accept = dfa_27;
            this.special = dfa_28;
            this.transition = dfa_29;
        }
        public String getDescription() {
            return "865:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_57s = "\36\uffff";
    static final String dfa_58s = "\1\uffff\33\35\2\uffff";
    static final String dfa_59s = "\1\4\33\122\2\uffff";
    static final String dfa_60s = "\1\176\33\160\2\uffff";
    static final String dfa_61s = "\34\uffff\1\2\1\1";
    static final String dfa_62s = "\36\uffff}>";
    static final String[] dfa_63s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final char[] dfa_59 = DFA.unpackEncodedStringToUnsignedChars(dfa_59s);
    static final char[] dfa_60 = DFA.unpackEncodedStringToUnsignedChars(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[][] dfa_63 = unpackEncodedStringArray(dfa_63s);

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = dfa_57;
            this.eof = dfa_58;
            this.min = dfa_59;
            this.max = dfa_60;
            this.accept = dfa_61;
            this.special = dfa_62;
            this.transition = dfa_63;
        }
        public String getDescription() {
            return "1032:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_64s = "\135\uffff";
    static final String dfa_65s = "\1\2\1\uffff\1\7\4\uffff\1\134\125\uffff";
    static final String dfa_66s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_67s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_68s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\125\1";
    static final String dfa_69s = "\1\3\1\2\1\4\2\uffff\1\0\1\uffff\1\1\125\uffff}>";
    static final String[] dfa_70s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\120\1\127\1\15\1\30\1\132\2\uffff\1\11\1\12\1\103\1\25\1\24\1\14\1\122\1\17\1\124\1\44\1\105\1\27\1\52\1\121\1\uffff\1\21\1\20\1\73\1\61\1\125\1\46\1\116\1\35\1\50\1\133\1\131\1\23\1\41\1\75\1\60\1\72\1\45\1\104\1\123\4\uffff\1\117\1\36\1\32\1\57\1\54\1\37\1\126\1\31\5\uffff\1\106\1\uffff\1\107\1\uffff\1\77\7\uffff\1\40\1\115\1\114\1\uffff\1\43\2\uffff\1\113\2\uffff\1\55\1\uffff\1\56\1\110\1\uffff\1\111\1\uffff\1\76\1\uffff\1\33\1\62\3\uffff\1\10\1\100\2\uffff\1\26\1\uffff\1\130\1\112\3\uffff\1\63\1\uffff\1\70\1\65\1\66\1\67\1\uffff\1\71\1\uffff\1\34\2\uffff\1\74\11\uffff\1\102\1\101\10\uffff\1\64",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final char[] dfa_67 = DFA.unpackEncodedStringToUnsignedChars(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final short[][] dfa_70 = unpackEncodedStringArray(dfa_70s);

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = dfa_64;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_69;
            this.transition = dfa_70;
        }
        public String getDescription() {
            return "1149:4: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_5 = input.LA(1);

                         
                        int index61_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 91;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index61_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_7 = input.LA(1);

                         
                        int index61_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_7==EOF) && (synpred19_InternalN4JSXParser())) {s = 92;}

                         
                        input.seek(index61_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_1 = input.LA(1);

                         
                        int index61_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index61_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_0 = input.LA(1);

                         
                        int index61_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_0==Semicolon) ) {s = 1;}

                        else if ( (LA61_0==EOF) ) {s = 2;}

                        else if ( (LA61_0==RULE_EOL) && (synpred19_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA61_0==RULE_ML_COMMENT) && (synpred19_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA61_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA61_0>=Intersection && LA61_0<=Implements)||(LA61_0>=Promisify && LA61_0<=Default)||(LA61_0>=Private && LA61_0<=Break)||(LA61_0>=Class && LA61_0<=With)||(LA61_0>=For && LA61_0<=Var)||LA61_0==PlusSignPlusSign||LA61_0==HyphenMinusHyphenMinus||LA61_0==SolidusEqualsSign||(LA61_0>=As && LA61_0<=If)||LA61_0==Of||LA61_0==ExclamationMark||LA61_0==LeftParenthesis||(LA61_0>=Asterisk && LA61_0<=PlusSign)||LA61_0==HyphenMinus||LA61_0==Solidus||LA61_0==LessThanSign||(LA61_0>=CommercialAt && LA61_0<=LeftSquareBracket)||LA61_0==LeftCurlyBracket||LA61_0==Tilde||LA61_0==RULE_DOUBLE||(LA61_0>=RULE_HEX_INT && LA61_0<=RULE_LEGACY_OCTAL_INT)||LA61_0==RULE_SCIENTIFIC_INT||LA61_0==RULE_IDENTIFIER||LA61_0==RULE_STRING||(LA61_0>=RULE_TEMPLATE_HEAD && LA61_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA61_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index61_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_2==EOF) ) {s = 7;}

                        
                        else if ((LA61_2>=-1 && LA61_2<=149 && (s=T2S.M_3[LA61_2-(-1)])>=0) && (synpred19_InternalN4JSXParser())) { /* 85 cases */ }
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_71s = "\131\uffff";
    static final String dfa_72s = "\1\2\130\uffff";
    static final String dfa_73s = "\1\4\1\0\127\uffff";
    static final String dfa_74s = "\1\u0099\1\0\127\uffff";
    static final String dfa_75s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_76s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_77s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final char[] dfa_73 = DFA.unpackEncodedStringToUnsignedChars(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[][] dfa_77 = unpackEncodedStringArray(dfa_77s);

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = dfa_71;
            this.eof = dfa_72;
            this.min = dfa_73;
            this.max = dfa_74;
            this.accept = dfa_75;
            this.special = dfa_76;
            this.transition = dfa_77;
        }
        public String getDescription() {
            return "1384:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSXParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index80_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = dfa_71;
            this.eof = dfa_72;
            this.min = dfa_73;
            this.max = dfa_74;
            this.accept = dfa_75;
            this.special = dfa_76;
            this.transition = dfa_77;
        }
        public String getDescription() {
            return "1401:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_1 = input.LA(1);

                         
                        int index81_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSXParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_78s = "\100\uffff";
    static final String dfa_79s = "\1\4\1\0\76\uffff";
    static final String dfa_80s = "\1\u0095\1\0\76\uffff";
    static final String dfa_81s = "\2\uffff\1\2\74\uffff\1\1";
    static final String dfa_82s = "\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_83s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = dfa_78;
            this.eof = dfa_78;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "1746:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm2_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_1 = input.LA(1);

                         
                        int index94_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index94_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = dfa_78;
            this.eof = dfa_78;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "1919:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm3_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = dfa_78;
            this.eof = dfa_78;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "2092:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm2_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = dfa_78;
            this.eof = dfa_78;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "2265:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm3_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_84s = "\44\uffff";
    static final String dfa_85s = "\1\4\1\0\42\uffff";
    static final String dfa_86s = "\1\176\1\0\42\uffff";
    static final String dfa_87s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_88s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_89s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2626:2: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= ruleBindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= ruleBindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_0 = input.LA(1);

                         
                        int index145_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA145_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA145_0==LeftSquareBracket) && (synpred67_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA145_0>=Intersection && LA145_0<=Implements)||(LA145_0>=Promisify && LA145_0<=Abstract)||LA145_0==External||(LA145_0>=Private && LA145_0<=Project)||LA145_0==Public||LA145_0==Static||LA145_0==Target||(LA145_0>=Async && LA145_0<=Await)||LA145_0==Union||(LA145_0>=Yield && LA145_0<=This)||LA145_0==From||LA145_0==This_1||(LA145_0>=Type && LA145_0<=Void)||LA145_0==FullStopFullStopFullStop||(LA145_0>=Get && LA145_0<=Let)||(LA145_0>=Out && LA145_0<=Set)||LA145_0==As||LA145_0==Of||(LA145_0>=QuestionMark && LA145_0<=CommercialAt)||LA145_0==Tilde||LA145_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index145_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_90s = "\2\uffff\11\13\1\uffff";
    static final String dfa_91s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_92s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_93s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_94s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final char[] dfa_91 = DFA.unpackEncodedStringToUnsignedChars(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final short[][] dfa_94 = unpackEncodedStringArray(dfa_94s);

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = dfa_50;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_94;
        }
        public String getDescription() {
            return "2639:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_95s = "\43\uffff";
    static final String dfa_96s = "\1\4\1\0\41\uffff";
    static final String dfa_97s = "\1\176\1\0\41\uffff";
    static final String dfa_98s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_99s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_100s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final char[] dfa_96 = DFA.unpackEncodedStringToUnsignedChars(dfa_96s);
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final short[] dfa_98 = DFA.unpackEncodedString(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[][] dfa_100 = unpackEncodedStringArray(dfa_100s);

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = dfa_95;
            this.eof = dfa_95;
            this.min = dfa_96;
            this.max = dfa_97;
            this.accept = dfa_98;
            this.special = dfa_99;
            this.transition = dfa_100;
        }
        public String getDescription() {
            return "2668:2: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= norm1_BindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= norm1_BindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_0 = input.LA(1);

                         
                        int index151_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA151_0==LeftSquareBracket) && (synpred68_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA151_0>=Intersection && LA151_0<=Implements)||(LA151_0>=Promisify && LA151_0<=Abstract)||LA151_0==External||(LA151_0>=Private && LA151_0<=Project)||LA151_0==Public||LA151_0==Static||LA151_0==Target||(LA151_0>=Async && LA151_0<=Await)||LA151_0==Union||LA151_0==This||LA151_0==From||LA151_0==This_1||(LA151_0>=Type && LA151_0<=Void)||LA151_0==FullStopFullStopFullStop||(LA151_0>=Get && LA151_0<=Let)||(LA151_0>=Out && LA151_0<=Set)||LA151_0==As||LA151_0==Of||(LA151_0>=QuestionMark && LA151_0<=CommercialAt)||LA151_0==Tilde||LA151_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index151_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA151_1 = input.LA(1);

                         
                        int index151_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index151_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_101s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "2681:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_102s = "\121\uffff";
    static final String dfa_103s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_104s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_105s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_106s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\60\uffff}>";
    static final String[] dfa_107s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\110\1\10\1\112\1\27\1\41\1\12\1\35\1\107\1\uffff\1\41\1\11\2\41\1\113\1\31\1\103\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\111\4\uffff\1\103\1\21\1\15\1\41\1\40\1\22\1\114\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\103\1\102\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\1\uffff\2\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "2793:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_0 = input.LA(1);

                         
                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA155_0>=10 && LA155_0<=110 && (s=T2S.M_4[LA155_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA155_0==Var) && (synpred73_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA155_0>=4 && LA155_0<=126 && (s=T2S.M_5[LA155_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA155_0==Delete||LA155_0==Typeof||LA155_0==Class||(LA155_0>=False && LA155_0<=Super)||(LA155_0>=Null && LA155_0<=True)||LA155_0==Void||LA155_0==New||LA155_0==PlusSignPlusSign||LA155_0==HyphenMinusHyphenMinus||LA155_0==SolidusEqualsSign||LA155_0==ExclamationMark||LA155_0==LeftParenthesis||(LA155_0>=Asterisk && LA155_0<=PlusSign)||LA155_0==HyphenMinus||LA155_0==Solidus||LA155_0==LessThanSign||(LA155_0>=CommercialAt && LA155_0<=LeftSquareBracket)||LA155_0==Tilde||LA155_0==RULE_DOUBLE||(LA155_0>=RULE_HEX_INT && LA155_0<=RULE_LEGACY_OCTAL_INT)||LA155_0==RULE_SCIENTIFIC_INT||LA155_0==RULE_STRING||(LA155_0>=RULE_TEMPLATE_HEAD && LA155_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA155_0==RULE_INT) ) {s = 33;}

                        else if ( (LA155_0==If) ) {s = 66;}

                        else if ( (LA155_0==While||LA155_0==For||LA155_0==Do) ) {s = 67;}

                        else if ( (LA155_0==Continue) ) {s = 70;}

                        else if ( (LA155_0==Break) ) {s = 71;}

                        else if ( (LA155_0==Return) ) {s = 72;}

                        else if ( (LA155_0==With) ) {s = 73;}

                        else if ( (LA155_0==Switch) ) {s = 74;}

                        else if ( (LA155_0==Throw) ) {s = 75;}

                        else if ( (LA155_0==Try) ) {s = 76;}

                        else if ( (LA155_0==Debugger) ) {s = 77;}

                         
                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_5 = input.LA(1);

                         
                        int index155_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA155_6 = input.LA(1);

                         
                        int index155_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA155_7 = input.LA(1);

                         
                        int index155_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA155_8 = input.LA(1);

                         
                        int index155_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA155_9 = input.LA(1);

                         
                        int index155_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred73_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index155_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA155_10 = input.LA(1);

                         
                        int index155_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA155_11 = input.LA(1);

                         
                        int index155_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA155_13 = input.LA(1);

                         
                        int index155_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA155_15 = input.LA(1);

                         
                        int index155_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA155_16 = input.LA(1);

                         
                        int index155_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA155_17 = input.LA(1);

                         
                        int index155_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA155_18 = input.LA(1);

                         
                        int index155_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA155_19 = input.LA(1);

                         
                        int index155_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA155_20 = input.LA(1);

                         
                        int index155_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA155_21 = input.LA(1);

                         
                        int index155_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA155_22 = input.LA(1);

                         
                        int index155_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA155_23 = input.LA(1);

                         
                        int index155_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA155_24 = input.LA(1);

                         
                        int index155_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA155_25 = input.LA(1);

                         
                        int index155_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA155_26 = input.LA(1);

                         
                        int index155_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA155_27 = input.LA(1);

                         
                        int index155_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA155_28 = input.LA(1);

                         
                        int index155_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA155_29 = input.LA(1);

                         
                        int index155_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA155_30 = input.LA(1);

                         
                        int index155_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA155_31 = input.LA(1);

                         
                        int index155_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA155_32 = input.LA(1);

                         
                        int index155_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index155_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_108s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_109s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_110s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_111s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\61\uffff}>";
    static final String[] dfa_112s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\110\1\10\1\112\1\26\1\40\1\12\1\34\1\107\1\uffff\1\40\1\11\2\40\1\113\1\30\1\103\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\111\4\uffff\1\103\1\20\1\15\1\40\1\37\1\21\1\114\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\103\1\102\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\1\uffff\2\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_108 = DFA.unpackEncodedStringToUnsignedChars(dfa_108s);
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final short[][] dfa_112 = unpackEncodedStringArray(dfa_112s);

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_108;
            this.max = dfa_109;
            this.accept = dfa_110;
            this.special = dfa_111;
            this.transition = dfa_112;
        }
        public String getDescription() {
            return "2851:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_0 = input.LA(1);

                         
                        int index156_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA156_0>=10 && LA156_0<=110 && (s=T2S.M_4[LA156_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA156_0==Var) && (synpred77_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA156_0>=4 && LA156_0<=126 && (s=T2S.M_7[LA156_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA156_0==Delete||LA156_0==Typeof||LA156_0==Class||(LA156_0>=False && LA156_0<=Super)||LA156_0==Yield||(LA156_0>=Null && LA156_0<=True)||LA156_0==Void||LA156_0==New||LA156_0==PlusSignPlusSign||LA156_0==HyphenMinusHyphenMinus||LA156_0==SolidusEqualsSign||LA156_0==ExclamationMark||LA156_0==LeftParenthesis||(LA156_0>=Asterisk && LA156_0<=PlusSign)||LA156_0==HyphenMinus||LA156_0==Solidus||LA156_0==LessThanSign||(LA156_0>=CommercialAt && LA156_0<=LeftSquareBracket)||LA156_0==Tilde||LA156_0==RULE_DOUBLE||(LA156_0>=RULE_HEX_INT && LA156_0<=RULE_LEGACY_OCTAL_INT)||LA156_0==RULE_SCIENTIFIC_INT||LA156_0==RULE_STRING||(LA156_0>=RULE_TEMPLATE_HEAD && LA156_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA156_0==RULE_INT) ) {s = 32;}

                        else if ( (LA156_0==If) ) {s = 66;}

                        else if ( (LA156_0==While||LA156_0==For||LA156_0==Do) ) {s = 67;}

                        else if ( (LA156_0==Continue) ) {s = 70;}

                        else if ( (LA156_0==Break) ) {s = 71;}

                        else if ( (LA156_0==Return) ) {s = 72;}

                        else if ( (LA156_0==With) ) {s = 73;}

                        else if ( (LA156_0==Switch) ) {s = 74;}

                        else if ( (LA156_0==Throw) ) {s = 75;}

                        else if ( (LA156_0==Try) ) {s = 76;}

                        else if ( (LA156_0==Debugger) ) {s = 77;}

                         
                        input.seek(index156_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_3 = input.LA(1);

                         
                        int index156_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_4 = input.LA(1);

                         
                        int index156_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_5 = input.LA(1);

                         
                        int index156_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_6 = input.LA(1);

                         
                        int index156_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_7 = input.LA(1);

                         
                        int index156_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_8 = input.LA(1);

                         
                        int index156_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_9 = input.LA(1);

                         
                        int index156_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred77_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index156_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_10 = input.LA(1);

                         
                        int index156_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_11 = input.LA(1);

                         
                        int index156_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_13 = input.LA(1);

                         
                        int index156_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA156_15 = input.LA(1);

                         
                        int index156_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA156_16 = input.LA(1);

                         
                        int index156_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA156_17 = input.LA(1);

                         
                        int index156_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA156_18 = input.LA(1);

                         
                        int index156_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA156_19 = input.LA(1);

                         
                        int index156_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA156_20 = input.LA(1);

                         
                        int index156_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA156_21 = input.LA(1);

                         
                        int index156_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA156_22 = input.LA(1);

                         
                        int index156_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA156_23 = input.LA(1);

                         
                        int index156_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA156_24 = input.LA(1);

                         
                        int index156_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA156_25 = input.LA(1);

                         
                        int index156_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA156_26 = input.LA(1);

                         
                        int index156_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA156_27 = input.LA(1);

                         
                        int index156_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA156_28 = input.LA(1);

                         
                        int index156_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA156_29 = input.LA(1);

                         
                        int index156_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA156_30 = input.LA(1);

                         
                        int index156_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA156_31 = input.LA(1);

                         
                        int index156_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index156_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_113s = "\117\uffff";
    static final String dfa_114s = "\1\4\1\0\115\uffff";
    static final String dfa_115s = "\1\u0095\1\0\115\uffff";
    static final String dfa_116s = "\2\uffff\1\2\113\uffff\1\1";
    static final String dfa_117s = "\1\uffff\1\0\115\uffff}>";
    static final String[] dfa_118s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final char[] dfa_114 = DFA.unpackEncodedStringToUnsignedChars(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[][] dfa_118 = unpackEncodedStringArray(dfa_118s);

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_113;
            this.eof = dfa_113;
            this.min = dfa_114;
            this.max = dfa_115;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_118;
        }
        public String getDescription() {
            return "2915:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = dfa_113;
            this.eof = dfa_113;
            this.min = dfa_114;
            this.max = dfa_115;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_118;
        }
        public String getDescription() {
            return "2935:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_1 = input.LA(1);

                         
                        int index158_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = dfa_50;
            this.eof = dfa_51;
            this.min = dfa_52;
            this.max = dfa_53;
            this.accept = dfa_54;
            this.special = dfa_55;
            this.transition = dfa_56;
        }
        public String getDescription() {
            return "()* loopback of 3025:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_119s = "\35\uffff";
    static final String dfa_120s = "\1\4\34\uffff";
    static final String dfa_121s = "\1\176\34\uffff";
    static final String dfa_122s = "\1\uffff\33\2\1\1";
    static final String dfa_123s = "\1\0\34\uffff}>";
    static final String[] dfa_124s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final char[] dfa_120 = DFA.unpackEncodedStringToUnsignedChars(dfa_120s);
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[][] dfa_124 = unpackEncodedStringArray(dfa_124s);

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = dfa_119;
            this.eof = dfa_119;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "()* loopback of 3467:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_0 = input.LA(1);

                         
                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA173_0>=4 && LA173_0<=126 && (s=T2S.M_8[LA173_0-(4)])>=0) && (synpred97_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA173_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = dfa_119;
            this.eof = dfa_119;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "()* loopback of 3496:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_0 = input.LA(1);

                         
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA175_0>=4 && LA175_0<=126 && (s=T2S.M_8[LA175_0-(4)])>=0) && (synpred98_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA175_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_125s = "\34\uffff";
    static final String dfa_126s = "\1\4\33\uffff";
    static final String dfa_127s = "\1\176\33\uffff";
    static final String dfa_128s = "\1\uffff\32\2\1\1";
    static final String dfa_129s = "\1\0\33\uffff}>";
    static final String[] dfa_130s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final char[] dfa_126 = DFA.unpackEncodedStringToUnsignedChars(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[][] dfa_130 = unpackEncodedStringArray(dfa_130s);

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "()* loopback of 3525:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_0 = input.LA(1);

                         
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA177_0>=4 && LA177_0<=126 && (s=T2S.M_10[LA177_0-(4)])>=0) && (synpred99_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA177_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "()* loopback of 3554:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_0 = input.LA(1);

                         
                        int index179_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA179_0>=4 && LA179_0<=126 && (s=T2S.M_10[LA179_0-(4)])>=0) && (synpred100_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA179_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index179_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = dfa_119;
            this.eof = dfa_119;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "()* loopback of 3583:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_0 = input.LA(1);

                         
                        int index181_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA181_0>=4 && LA181_0<=126 && (s=T2S.M_8[LA181_0-(4)])>=0) && (synpred101_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA181_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index181_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = dfa_119;
            this.eof = dfa_119;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "()* loopback of 3613:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_0 = input.LA(1);

                         
                        int index184_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA184_0>=4 && LA184_0<=126 && (s=T2S.M_8[LA184_0-(4)])>=0) && (synpred102_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA184_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index184_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "()* loopback of 3643:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_0 = input.LA(1);

                         
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA187_0>=4 && LA187_0<=126 && (s=T2S.M_10[LA187_0-(4)])>=0) && (synpred103_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA187_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "()* loopback of 3673:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_0 = input.LA(1);

                         
                        int index190_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA190_0>=4 && LA190_0<=126 && (s=T2S.M_10[LA190_0-(4)])>=0) && (synpred104_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA190_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index190_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_131s = "\1\1\1\3\1\2\2\uffff\1\4\1\uffff\1\0\125\uffff}>";
    static final short[] dfa_131 = DFA.unpackEncodedString(dfa_131s);

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = dfa_64;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_131;
            this.transition = dfa_70;
        }
        public String getDescription() {
            return "4016:157: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA199_7 = input.LA(1);

                         
                        int index199_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA199_7==EOF) && (synpred111_InternalN4JSXParser())) {s = 92;}

                         
                        input.seek(index199_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA199_0 = input.LA(1);

                         
                        int index199_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA199_0==Semicolon) ) {s = 1;}

                        else if ( (LA199_0==EOF) ) {s = 2;}

                        else if ( (LA199_0==RULE_EOL) && (synpred111_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA199_0==RULE_ML_COMMENT) && (synpred111_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA199_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Default)||(LA199_0>=Private && LA199_0<=Break)||(LA199_0>=Class && LA199_0<=With)||(LA199_0>=For && LA199_0<=Var)||LA199_0==PlusSignPlusSign||LA199_0==HyphenMinusHyphenMinus||LA199_0==SolidusEqualsSign||(LA199_0>=As && LA199_0<=If)||LA199_0==Of||LA199_0==ExclamationMark||LA199_0==LeftParenthesis||(LA199_0>=Asterisk && LA199_0<=PlusSign)||LA199_0==HyphenMinus||LA199_0==Solidus||LA199_0==LessThanSign||(LA199_0>=CommercialAt && LA199_0<=LeftSquareBracket)||LA199_0==LeftCurlyBracket||LA199_0==Tilde||LA199_0==RULE_DOUBLE||(LA199_0>=RULE_HEX_INT && LA199_0<=RULE_LEGACY_OCTAL_INT)||LA199_0==RULE_SCIENTIFIC_INT||LA199_0==RULE_IDENTIFIER||LA199_0==RULE_STRING||(LA199_0>=RULE_TEMPLATE_HEAD && LA199_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA199_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index199_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA199_2 = input.LA(1);

                         
                        int index199_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA199_2==EOF) ) {s = 7;}

                        
                        else if ((LA199_2>=-1 && LA199_2<=149 && (s=T2S.M_3[LA199_2-(-1)])>=0) && (synpred111_InternalN4JSXParser())) { /* 85 cases */ }
                        input.seek(index199_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA199_1 = input.LA(1);

                         
                        int index199_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index199_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA199_5 = input.LA(1);

                         
                        int index199_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSXParser()) ) {s = 91;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index199_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 199, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_132s = "\103\uffff";
    static final String dfa_133s = "\1\4\1\0\101\uffff";
    static final String dfa_134s = "\1\u0095\1\0\101\uffff";
    static final String dfa_135s = "\2\uffff\1\2\77\uffff\1\1";
    static final String dfa_136s = "\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_137s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[][] dfa_137 = unpackEncodedStringArray(dfa_137s);

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = dfa_132;
            this.eof = dfa_132;
            this.min = dfa_133;
            this.max = dfa_134;
            this.accept = dfa_135;
            this.special = dfa_136;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "4114:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA218_1 = input.LA(1);

                         
                        int index218_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSXParser()) ) {s = 66;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index218_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 218, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_138s = "\1\4\2\uffff\1\0\76\uffff";
    static final String dfa_139s = "\1\u0095\2\uffff\1\0\76\uffff";
    static final String dfa_140s = "\1\uffff\2\1\1\uffff\1\2\74\uffff\1\3";
    static final String dfa_141s = "\1\0\2\uffff\1\1\76\uffff}>";
    static final String[] dfa_142s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\101\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA217 extends DFA {

        public DFA217(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 217;
            this.eot = dfa_30;
            this.eof = dfa_30;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "4145:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA217_0 = input.LA(1);

                         
                        int index217_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA217_0==Var) && (synpred114_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA217_0==Const) && (synpred114_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA217_0==Let) ) {s = 3;}

                        else if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||(LA217_0>=External && LA217_0<=Function)||(LA217_0>=Private && LA217_0<=Delete)||LA217_0==Public||LA217_0==Static||(LA217_0>=Target && LA217_0<=Await)||LA217_0==Class||(LA217_0>=False && LA217_0<=Super)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||(LA217_0>=From && LA217_0<=Void)||LA217_0==Get||(LA217_0>=New && LA217_0<=Set)||LA217_0==PlusSignPlusSign||LA217_0==HyphenMinusHyphenMinus||LA217_0==SolidusEqualsSign||LA217_0==As||LA217_0==Of||LA217_0==ExclamationMark||LA217_0==LeftParenthesis||(LA217_0>=Asterisk && LA217_0<=PlusSign)||LA217_0==HyphenMinus||LA217_0==Solidus||LA217_0==LessThanSign||(LA217_0>=CommercialAt && LA217_0<=LeftSquareBracket)||LA217_0==LeftCurlyBracket||LA217_0==Tilde||LA217_0==RULE_DOUBLE||(LA217_0>=RULE_HEX_INT && LA217_0<=RULE_LEGACY_OCTAL_INT)||LA217_0==RULE_SCIENTIFIC_INT||LA217_0==RULE_IDENTIFIER||LA217_0==RULE_STRING||(LA217_0>=RULE_TEMPLATE_HEAD && LA217_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA217_0==RULE_INT) ) {s = 4;}

                        else if ( (LA217_0==Semicolon) ) {s = 65;}

                         
                        input.seek(index217_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA217_3 = input.LA(1);

                         
                        int index217_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index217_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 217, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\40\uffff";
    static final String dfa_144s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_145s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_146s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_147s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_148s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final char[] dfa_144 = DFA.unpackEncodedStringToUnsignedChars(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final short[] dfa_146 = DFA.unpackEncodedString(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[][] dfa_148 = unpackEncodedStringArray(dfa_148s);

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = dfa_143;
            this.eof = dfa_143;
            this.min = dfa_144;
            this.max = dfa_145;
            this.accept = dfa_146;
            this.special = dfa_147;
            this.transition = dfa_148;
        }
        public String getDescription() {
            return "4152:2: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_30 = input.LA(1);

                         
                        int index209_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index209_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA209_29 = input.LA(1);

                         
                        int index209_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index209_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_149s = "\1\4\77\uffff";
    static final String dfa_150s = "\1\u0095\77\uffff";
    static final String dfa_151s = "\1\uffff\76\1\1\2";
    static final String dfa_152s = "\1\0\77\uffff}>";
    static final String[] dfa_153s = {
            "\1\26\1\21\1\31\1\uffff\1\30\1\32\1\34\1\15\2\uffff\1\14\1\62\3\uffff\1\33\1\13\1\66\2\uffff\1\35\1\uffff\1\16\1\uffff\1\23\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\1\55\1\40\1\52\1\24\1\67\6\uffff\1\10\1\12\1\37\1\36\1\11\7\uffff\1\71\1\uffff\1\72\1\uffff\1\57\7\uffff\1\17\3\uffff\1\22\2\uffff\1\76\2\uffff\1\3\1\77\1\5\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\42\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_149 = DFA.unpackEncodedStringToUnsignedChars(dfa_149s);
    static final char[] dfa_150 = DFA.unpackEncodedStringToUnsignedChars(dfa_150s);
    static final short[] dfa_151 = DFA.unpackEncodedString(dfa_151s);
    static final short[] dfa_152 = DFA.unpackEncodedString(dfa_152s);
    static final short[][] dfa_153 = unpackEncodedStringArray(dfa_153s);

    class DFA202 extends DFA {

        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = dfa_78;
            this.eof = dfa_78;
            this.min = dfa_149;
            this.max = dfa_150;
            this.accept = dfa_151;
            this.special = dfa_152;
            this.transition = dfa_153;
        }
        public String getDescription() {
            return "4298:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA202_0 = input.LA(1);

                         
                        int index202_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA202_0>=4 && LA202_0<=149 && (s=T2S.M_17[LA202_0-(4)])>=0) && (synpred116_InternalN4JSXParser())) { /* 62 cases */ }
                        else if ( (LA202_0==RightParenthesis) ) {s = 63;}

                         
                        input.seek(index202_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 202, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA236 extends DFA {

        public DFA236(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = dfa_132;
            this.eof = dfa_132;
            this.min = dfa_133;
            this.max = dfa_134;
            this.accept = dfa_135;
            this.special = dfa_136;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "4462:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA236_1 = input.LA(1);

                         
                        int index236_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_InternalN4JSXParser()) ) {s = 66;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 236, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA235 extends DFA {

        public DFA235(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 235;
            this.eot = dfa_30;
            this.eof = dfa_30;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "4493:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA235_0 = input.LA(1);

                         
                        int index235_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA235_0==Var) && (synpred118_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA235_0==Const) && (synpred118_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA235_0==Let) ) {s = 3;}

                        else if ( ((LA235_0>=Intersection && LA235_0<=Implements)||(LA235_0>=Promisify && LA235_0<=Abstract)||(LA235_0>=External && LA235_0<=Function)||(LA235_0>=Private && LA235_0<=Delete)||LA235_0==Public||LA235_0==Static||(LA235_0>=Target && LA235_0<=Await)||LA235_0==Class||(LA235_0>=False && LA235_0<=Super)||LA235_0==Union||(LA235_0>=Yield && LA235_0<=This)||(LA235_0>=From && LA235_0<=Void)||LA235_0==Get||(LA235_0>=New && LA235_0<=Set)||LA235_0==PlusSignPlusSign||LA235_0==HyphenMinusHyphenMinus||LA235_0==SolidusEqualsSign||LA235_0==As||LA235_0==Of||LA235_0==ExclamationMark||LA235_0==LeftParenthesis||(LA235_0>=Asterisk && LA235_0<=PlusSign)||LA235_0==HyphenMinus||LA235_0==Solidus||LA235_0==LessThanSign||(LA235_0>=CommercialAt && LA235_0<=LeftSquareBracket)||LA235_0==LeftCurlyBracket||LA235_0==Tilde||LA235_0==RULE_DOUBLE||(LA235_0>=RULE_HEX_INT && LA235_0<=RULE_LEGACY_OCTAL_INT)||LA235_0==RULE_SCIENTIFIC_INT||LA235_0==RULE_IDENTIFIER||LA235_0==RULE_STRING||(LA235_0>=RULE_TEMPLATE_HEAD && LA235_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA235_0==RULE_INT) ) {s = 4;}

                        else if ( (LA235_0==Semicolon) ) {s = 65;}

                         
                        input.seek(index235_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA235_3 = input.LA(1);

                         
                        int index235_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index235_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 235, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_154s = "\37\uffff";
    static final String dfa_155s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_156s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_157s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_158s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_159s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final char[] dfa_155 = DFA.unpackEncodedStringToUnsignedChars(dfa_155s);
    static final char[] dfa_156 = DFA.unpackEncodedStringToUnsignedChars(dfa_156s);
    static final short[] dfa_157 = DFA.unpackEncodedString(dfa_157s);
    static final short[] dfa_158 = DFA.unpackEncodedString(dfa_158s);
    static final short[][] dfa_159 = unpackEncodedStringArray(dfa_159s);

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = dfa_154;
            this.eof = dfa_154;
            this.min = dfa_155;
            this.max = dfa_156;
            this.accept = dfa_157;
            this.special = dfa_158;
            this.transition = dfa_159;
        }
        public String getDescription() {
            return "4500:2: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA227_29 = input.LA(1);

                         
                        int index227_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index227_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA227_28 = input.LA(1);

                         
                        int index227_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index227_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 227, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_160s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\1\55\1\40\1\52\1\23\1\67\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\71\1\uffff\1\72\1\uffff\1\57\7\uffff\1\16\3\uffff\1\21\2\uffff\1\76\2\uffff\1\3\1\77\1\5\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\42\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_160 = unpackEncodedStringArray(dfa_160s);

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = dfa_78;
            this.eof = dfa_78;
            this.min = dfa_149;
            this.max = dfa_150;
            this.accept = dfa_151;
            this.special = dfa_152;
            this.transition = dfa_160;
        }
        public String getDescription() {
            return "4646:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_0 = input.LA(1);

                         
                        int index220_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA220_0>=4 && LA220_0<=149 && (s=T2S.M_18[LA220_0-(4)])>=0) && (synpred120_InternalN4JSXParser())) { /* 62 cases */ }
                        else if ( (LA220_0==RightParenthesis) ) {s = 63;}

                         
                        input.seek(index220_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_161s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_162s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_163s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_164s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_165s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\22\uffff\1\36\1\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_161 = DFA.unpackEncodedStringToUnsignedChars(dfa_161s);
    static final char[] dfa_162 = DFA.unpackEncodedStringToUnsignedChars(dfa_162s);
    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final short[][] dfa_165 = unpackEncodedStringArray(dfa_165s);

    class DFA258 extends DFA {

        public DFA258(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = dfa_95;
            this.eof = dfa_95;
            this.min = dfa_161;
            this.max = dfa_162;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_165;
        }
        public String getDescription() {
            return "5468:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA258_0 = input.LA(1);

                         
                        int index258_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA258_0==LeftSquareBracket) && (synpred127_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA258_0>=4 && LA258_0<=126 && (s=T2S.M_19[LA258_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA258_0==This_1||LA258_0==Void||LA258_0==QuestionMark||LA258_0==Tilde) ) {s = 30;}

                         
                        input.seek(index258_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA258_1 = input.LA(1);

                         
                        int index258_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA258_3 = input.LA(1);

                         
                        int index258_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA258_4 = input.LA(1);

                         
                        int index258_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA258_5 = input.LA(1);

                         
                        int index258_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA258_6 = input.LA(1);

                         
                        int index258_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA258_7 = input.LA(1);

                         
                        int index258_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA258_8 = input.LA(1);

                         
                        int index258_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA258_9 = input.LA(1);

                         
                        int index258_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA258_10 = input.LA(1);

                         
                        int index258_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA258_11 = input.LA(1);

                         
                        int index258_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA258_12 = input.LA(1);

                         
                        int index258_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA258_13 = input.LA(1);

                         
                        int index258_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA258_14 = input.LA(1);

                         
                        int index258_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA258_15 = input.LA(1);

                         
                        int index258_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA258_16 = input.LA(1);

                         
                        int index258_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA258_17 = input.LA(1);

                         
                        int index258_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA258_18 = input.LA(1);

                         
                        int index258_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA258_19 = input.LA(1);

                         
                        int index258_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA258_20 = input.LA(1);

                         
                        int index258_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA258_21 = input.LA(1);

                         
                        int index258_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA258_22 = input.LA(1);

                         
                        int index258_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA258_23 = input.LA(1);

                         
                        int index258_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA258_24 = input.LA(1);

                         
                        int index258_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA258_25 = input.LA(1);

                         
                        int index258_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA258_26 = input.LA(1);

                         
                        int index258_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA258_27 = input.LA(1);

                         
                        int index258_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA258_28 = input.LA(1);

                         
                        int index258_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA258_29 = input.LA(1);

                         
                        int index258_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index258_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 258, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_166s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_166 = unpackEncodedStringArray(dfa_166s);

    class DFA257 extends DFA {

        public DFA257(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 257;
            this.eot = dfa_50;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_166;
        }
        public String getDescription() {
            return "5489:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_167s = "\42\uffff";
    static final String dfa_168s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_169s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_170s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_171s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_172s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\22\uffff\1\35\1\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final char[] dfa_168 = DFA.unpackEncodedStringToUnsignedChars(dfa_168s);
    static final char[] dfa_169 = DFA.unpackEncodedStringToUnsignedChars(dfa_169s);
    static final short[] dfa_170 = DFA.unpackEncodedString(dfa_170s);
    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final short[][] dfa_172 = unpackEncodedStringArray(dfa_172s);

    class DFA260 extends DFA {

        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = dfa_167;
            this.eof = dfa_167;
            this.min = dfa_168;
            this.max = dfa_169;
            this.accept = dfa_170;
            this.special = dfa_171;
            this.transition = dfa_172;
        }
        public String getDescription() {
            return "5506:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA260_0 = input.LA(1);

                         
                        int index260_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA260_0==LeftSquareBracket) && (synpred130_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA260_0>=4 && LA260_0<=126 && (s=T2S.M_20[LA260_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA260_0==This_1||LA260_0==Void||LA260_0==QuestionMark||LA260_0==Tilde) ) {s = 29;}

                         
                        input.seek(index260_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA260_1 = input.LA(1);

                         
                        int index260_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA260_3 = input.LA(1);

                         
                        int index260_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA260_4 = input.LA(1);

                         
                        int index260_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA260_5 = input.LA(1);

                         
                        int index260_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA260_6 = input.LA(1);

                         
                        int index260_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA260_7 = input.LA(1);

                         
                        int index260_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA260_8 = input.LA(1);

                         
                        int index260_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA260_9 = input.LA(1);

                         
                        int index260_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA260_10 = input.LA(1);

                         
                        int index260_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA260_11 = input.LA(1);

                         
                        int index260_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA260_12 = input.LA(1);

                         
                        int index260_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA260_13 = input.LA(1);

                         
                        int index260_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA260_14 = input.LA(1);

                         
                        int index260_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA260_15 = input.LA(1);

                         
                        int index260_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA260_16 = input.LA(1);

                         
                        int index260_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA260_17 = input.LA(1);

                         
                        int index260_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA260_18 = input.LA(1);

                         
                        int index260_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA260_19 = input.LA(1);

                         
                        int index260_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA260_20 = input.LA(1);

                         
                        int index260_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA260_21 = input.LA(1);

                         
                        int index260_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA260_22 = input.LA(1);

                         
                        int index260_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA260_23 = input.LA(1);

                         
                        int index260_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA260_24 = input.LA(1);

                         
                        int index260_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA260_25 = input.LA(1);

                         
                        int index260_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA260_26 = input.LA(1);

                         
                        int index260_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA260_27 = input.LA(1);

                         
                        int index260_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA260_28 = input.LA(1);

                         
                        int index260_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index260_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 260, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_173s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_173 = unpackEncodedStringArray(dfa_173s);

    class DFA259 extends DFA {

        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_173;
        }
        public String getDescription() {
            return "5527:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_174s = "\5\uffff";
    static final String dfa_175s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_176s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_177s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_178s = "\5\uffff}>";
    static final String[] dfa_179s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\2\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\2\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final char[] dfa_175 = DFA.unpackEncodedStringToUnsignedChars(dfa_175s);
    static final char[] dfa_176 = DFA.unpackEncodedStringToUnsignedChars(dfa_176s);
    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final short[] dfa_178 = DFA.unpackEncodedString(dfa_178s);
    static final short[][] dfa_179 = unpackEncodedStringArray(dfa_179s);

    class DFA263 extends DFA {

        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = dfa_174;
            this.eof = dfa_174;
            this.min = dfa_175;
            this.max = dfa_176;
            this.accept = dfa_177;
            this.special = dfa_178;
            this.transition = dfa_179;
        }
        public String getDescription() {
            return "()* loopback of 5741:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = dfa_174;
            this.eof = dfa_174;
            this.min = dfa_175;
            this.max = dfa_176;
            this.accept = dfa_177;
            this.special = dfa_178;
            this.transition = dfa_179;
        }
        public String getDescription() {
            return "()* loopback of 5782:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_180s = "\115\uffff";
    static final String dfa_181s = "\1\4\1\uffff\105\0\6\uffff";
    static final String dfa_182s = "\1\u0095\1\uffff\105\0\6\uffff";
    static final String dfa_183s = "\1\uffff\1\1\105\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_184s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_185s = {
            "\1\16\1\13\1\76\1\43\1\5\1\77\1\101\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\100\1\66\1\30\1\33\1\41\1\102\1\45\1\71\1\47\1\6\1\52\1\75\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\3\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\12\1\2\1\55\4\uffff\1\36\1\63\1\65\1\44\1\103\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\5\uffff\1\111\1\uffff\1\110\7\uffff\1\107\2\uffff\1\17\1\1\1\106\2\uffff\1\14\2\uffff\1\10\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\7\2\uffff\1\104\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final char[] dfa_181 = DFA.unpackEncodedStringToUnsignedChars(dfa_181s);
    static final char[] dfa_182 = DFA.unpackEncodedStringToUnsignedChars(dfa_182s);
    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final short[] dfa_184 = DFA.unpackEncodedString(dfa_184s);
    static final short[][] dfa_185 = unpackEncodedStringArray(dfa_185s);

    class DFA281 extends DFA {

        public DFA281(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_181;
            this.max = dfa_182;
            this.accept = dfa_183;
            this.special = dfa_184;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "5943:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA281_0 = input.LA(1);

                         
                        int index281_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA281_0>=4 && LA281_0<=129 && (s=T2S.M_21[LA281_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA281_0==RULE_DOUBLE||LA281_0==RULE_HEX_INT||LA281_0==RULE_OCTAL_INT||LA281_0==RULE_SCIENTIFIC_INT||LA281_0==RULE_INT) ) {s = 69;}

                        else if ( (LA281_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA281_0==LessThanSign) && (synpred138_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA281_0==Asterisk) && (synpred138_InternalN4JSXParser())) {s = 72;}

                        else if ( (LA281_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index281_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA281_2 = input.LA(1);

                         
                        int index281_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA281_3 = input.LA(1);

                         
                        int index281_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA281_4 = input.LA(1);

                         
                        int index281_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA281_5 = input.LA(1);

                         
                        int index281_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA281_6 = input.LA(1);

                         
                        int index281_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA281_7 = input.LA(1);

                         
                        int index281_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA281_8 = input.LA(1);

                         
                        int index281_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA281_9 = input.LA(1);

                         
                        int index281_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA281_10 = input.LA(1);

                         
                        int index281_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA281_11 = input.LA(1);

                         
                        int index281_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA281_12 = input.LA(1);

                         
                        int index281_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA281_13 = input.LA(1);

                         
                        int index281_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA281_14 = input.LA(1);

                         
                        int index281_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA281_15 = input.LA(1);

                         
                        int index281_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA281_16 = input.LA(1);

                         
                        int index281_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA281_17 = input.LA(1);

                         
                        int index281_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA281_18 = input.LA(1);

                         
                        int index281_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA281_19 = input.LA(1);

                         
                        int index281_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA281_20 = input.LA(1);

                         
                        int index281_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA281_21 = input.LA(1);

                         
                        int index281_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA281_22 = input.LA(1);

                         
                        int index281_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA281_23 = input.LA(1);

                         
                        int index281_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA281_24 = input.LA(1);

                         
                        int index281_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA281_25 = input.LA(1);

                         
                        int index281_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA281_26 = input.LA(1);

                         
                        int index281_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA281_27 = input.LA(1);

                         
                        int index281_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA281_28 = input.LA(1);

                         
                        int index281_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA281_29 = input.LA(1);

                         
                        int index281_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA281_30 = input.LA(1);

                         
                        int index281_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA281_31 = input.LA(1);

                         
                        int index281_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA281_32 = input.LA(1);

                         
                        int index281_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA281_33 = input.LA(1);

                         
                        int index281_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA281_34 = input.LA(1);

                         
                        int index281_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA281_35 = input.LA(1);

                         
                        int index281_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA281_36 = input.LA(1);

                         
                        int index281_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA281_37 = input.LA(1);

                         
                        int index281_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA281_38 = input.LA(1);

                         
                        int index281_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA281_39 = input.LA(1);

                         
                        int index281_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA281_40 = input.LA(1);

                         
                        int index281_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA281_41 = input.LA(1);

                         
                        int index281_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA281_42 = input.LA(1);

                         
                        int index281_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA281_43 = input.LA(1);

                         
                        int index281_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA281_44 = input.LA(1);

                         
                        int index281_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA281_45 = input.LA(1);

                         
                        int index281_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA281_46 = input.LA(1);

                         
                        int index281_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA281_47 = input.LA(1);

                         
                        int index281_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA281_48 = input.LA(1);

                         
                        int index281_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA281_49 = input.LA(1);

                         
                        int index281_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA281_50 = input.LA(1);

                         
                        int index281_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA281_51 = input.LA(1);

                         
                        int index281_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA281_52 = input.LA(1);

                         
                        int index281_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA281_53 = input.LA(1);

                         
                        int index281_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA281_54 = input.LA(1);

                         
                        int index281_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA281_55 = input.LA(1);

                         
                        int index281_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA281_56 = input.LA(1);

                         
                        int index281_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA281_57 = input.LA(1);

                         
                        int index281_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA281_58 = input.LA(1);

                         
                        int index281_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA281_59 = input.LA(1);

                         
                        int index281_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA281_60 = input.LA(1);

                         
                        int index281_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA281_61 = input.LA(1);

                         
                        int index281_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA281_62 = input.LA(1);

                         
                        int index281_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA281_63 = input.LA(1);

                         
                        int index281_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA281_64 = input.LA(1);

                         
                        int index281_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA281_65 = input.LA(1);

                         
                        int index281_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA281_66 = input.LA(1);

                         
                        int index281_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA281_67 = input.LA(1);

                         
                        int index281_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA281_68 = input.LA(1);

                         
                        int index281_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA281_69 = input.LA(1);

                         
                        int index281_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index281_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA281_70 = input.LA(1);

                         
                        int index281_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 281, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA282 extends DFA {

        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_181;
            this.max = dfa_182;
            this.accept = dfa_183;
            this.special = dfa_184;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "6129:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA282_0 = input.LA(1);

                         
                        int index282_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA282_0>=4 && LA282_0<=129 && (s=T2S.M_21[LA282_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA282_0==RULE_DOUBLE||LA282_0==RULE_HEX_INT||LA282_0==RULE_OCTAL_INT||LA282_0==RULE_SCIENTIFIC_INT||LA282_0==RULE_INT) ) {s = 69;}

                        else if ( (LA282_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA282_0==LessThanSign) && (synpred142_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA282_0==Asterisk) && (synpred142_InternalN4JSXParser())) {s = 72;}

                        else if ( (LA282_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index282_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA282_2 = input.LA(1);

                         
                        int index282_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA282_3 = input.LA(1);

                         
                        int index282_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA282_4 = input.LA(1);

                         
                        int index282_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA282_5 = input.LA(1);

                         
                        int index282_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA282_6 = input.LA(1);

                         
                        int index282_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA282_7 = input.LA(1);

                         
                        int index282_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA282_8 = input.LA(1);

                         
                        int index282_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA282_9 = input.LA(1);

                         
                        int index282_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA282_10 = input.LA(1);

                         
                        int index282_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA282_11 = input.LA(1);

                         
                        int index282_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA282_12 = input.LA(1);

                         
                        int index282_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA282_13 = input.LA(1);

                         
                        int index282_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA282_14 = input.LA(1);

                         
                        int index282_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA282_15 = input.LA(1);

                         
                        int index282_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA282_16 = input.LA(1);

                         
                        int index282_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA282_17 = input.LA(1);

                         
                        int index282_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA282_18 = input.LA(1);

                         
                        int index282_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA282_19 = input.LA(1);

                         
                        int index282_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA282_20 = input.LA(1);

                         
                        int index282_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA282_21 = input.LA(1);

                         
                        int index282_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA282_22 = input.LA(1);

                         
                        int index282_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA282_23 = input.LA(1);

                         
                        int index282_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA282_24 = input.LA(1);

                         
                        int index282_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA282_25 = input.LA(1);

                         
                        int index282_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA282_26 = input.LA(1);

                         
                        int index282_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA282_27 = input.LA(1);

                         
                        int index282_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA282_28 = input.LA(1);

                         
                        int index282_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA282_29 = input.LA(1);

                         
                        int index282_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA282_30 = input.LA(1);

                         
                        int index282_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA282_31 = input.LA(1);

                         
                        int index282_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA282_32 = input.LA(1);

                         
                        int index282_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA282_33 = input.LA(1);

                         
                        int index282_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA282_34 = input.LA(1);

                         
                        int index282_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA282_35 = input.LA(1);

                         
                        int index282_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA282_36 = input.LA(1);

                         
                        int index282_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA282_37 = input.LA(1);

                         
                        int index282_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA282_38 = input.LA(1);

                         
                        int index282_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA282_39 = input.LA(1);

                         
                        int index282_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA282_40 = input.LA(1);

                         
                        int index282_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA282_41 = input.LA(1);

                         
                        int index282_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA282_42 = input.LA(1);

                         
                        int index282_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA282_43 = input.LA(1);

                         
                        int index282_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA282_44 = input.LA(1);

                         
                        int index282_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA282_45 = input.LA(1);

                         
                        int index282_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA282_46 = input.LA(1);

                         
                        int index282_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA282_47 = input.LA(1);

                         
                        int index282_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA282_48 = input.LA(1);

                         
                        int index282_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA282_49 = input.LA(1);

                         
                        int index282_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA282_50 = input.LA(1);

                         
                        int index282_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA282_51 = input.LA(1);

                         
                        int index282_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA282_52 = input.LA(1);

                         
                        int index282_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred141_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA282_53 = input.LA(1);

                         
                        int index282_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA282_54 = input.LA(1);

                         
                        int index282_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA282_55 = input.LA(1);

                         
                        int index282_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA282_56 = input.LA(1);

                         
                        int index282_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA282_57 = input.LA(1);

                         
                        int index282_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA282_58 = input.LA(1);

                         
                        int index282_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA282_59 = input.LA(1);

                         
                        int index282_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA282_60 = input.LA(1);

                         
                        int index282_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA282_61 = input.LA(1);

                         
                        int index282_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA282_62 = input.LA(1);

                         
                        int index282_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA282_63 = input.LA(1);

                         
                        int index282_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA282_64 = input.LA(1);

                         
                        int index282_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA282_65 = input.LA(1);

                         
                        int index282_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA282_66 = input.LA(1);

                         
                        int index282_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA282_67 = input.LA(1);

                         
                        int index282_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA282_68 = input.LA(1);

                         
                        int index282_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA282_69 = input.LA(1);

                         
                        int index282_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index282_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA282_70 = input.LA(1);

                         
                        int index282_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index282_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 282, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_186s = "\114\uffff";
    static final String dfa_187s = "\1\4\105\0\6\uffff";
    static final String dfa_188s = "\1\u0095\105\0\6\uffff";
    static final String dfa_189s = "\106\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_190s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_191s = {
            "\1\15\1\12\1\75\1\42\1\4\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\5\1\51\1\74\1\3\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\14\1\53\1\55\1\2\1\20\1\31\1\61\1\72\1\56\1\10\1\57\1\11\1\1\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\16\1\uffff\1\105\2\uffff\1\13\2\uffff\1\7\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\6\2\uffff\1\103\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final char[] dfa_187 = DFA.unpackEncodedStringToUnsignedChars(dfa_187s);
    static final char[] dfa_188 = DFA.unpackEncodedStringToUnsignedChars(dfa_188s);
    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final short[][] dfa_191 = unpackEncodedStringArray(dfa_191s);

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_186;
            this.eof = dfa_186;
            this.min = dfa_187;
            this.max = dfa_188;
            this.accept = dfa_189;
            this.special = dfa_190;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "6322:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA290_0 = input.LA(1);

                         
                        int index290_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA290_0>=4 && LA290_0<=129 && (s=T2S.M_23[LA290_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA290_0==RULE_DOUBLE||LA290_0==RULE_HEX_INT||LA290_0==RULE_OCTAL_INT||LA290_0==RULE_SCIENTIFIC_INT||LA290_0==RULE_INT) ) {s = 68;}

                        else if ( (LA290_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA290_0==LessThanSign) && (synpred149_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA290_0==Asterisk) && (synpred149_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA290_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index290_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA290_1 = input.LA(1);

                         
                        int index290_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA290_2 = input.LA(1);

                         
                        int index290_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA290_3 = input.LA(1);

                         
                        int index290_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA290_4 = input.LA(1);

                         
                        int index290_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA290_5 = input.LA(1);

                         
                        int index290_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA290_6 = input.LA(1);

                         
                        int index290_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA290_7 = input.LA(1);

                         
                        int index290_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA290_8 = input.LA(1);

                         
                        int index290_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA290_9 = input.LA(1);

                         
                        int index290_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA290_10 = input.LA(1);

                         
                        int index290_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA290_11 = input.LA(1);

                         
                        int index290_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA290_12 = input.LA(1);

                         
                        int index290_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA290_13 = input.LA(1);

                         
                        int index290_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA290_14 = input.LA(1);

                         
                        int index290_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA290_15 = input.LA(1);

                         
                        int index290_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA290_16 = input.LA(1);

                         
                        int index290_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA290_17 = input.LA(1);

                         
                        int index290_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA290_18 = input.LA(1);

                         
                        int index290_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA290_19 = input.LA(1);

                         
                        int index290_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA290_20 = input.LA(1);

                         
                        int index290_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA290_21 = input.LA(1);

                         
                        int index290_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA290_22 = input.LA(1);

                         
                        int index290_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA290_23 = input.LA(1);

                         
                        int index290_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA290_24 = input.LA(1);

                         
                        int index290_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA290_25 = input.LA(1);

                         
                        int index290_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA290_26 = input.LA(1);

                         
                        int index290_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA290_27 = input.LA(1);

                         
                        int index290_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA290_28 = input.LA(1);

                         
                        int index290_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA290_29 = input.LA(1);

                         
                        int index290_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA290_30 = input.LA(1);

                         
                        int index290_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA290_31 = input.LA(1);

                         
                        int index290_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA290_32 = input.LA(1);

                         
                        int index290_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA290_33 = input.LA(1);

                         
                        int index290_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA290_34 = input.LA(1);

                         
                        int index290_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA290_35 = input.LA(1);

                         
                        int index290_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA290_36 = input.LA(1);

                         
                        int index290_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA290_37 = input.LA(1);

                         
                        int index290_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA290_38 = input.LA(1);

                         
                        int index290_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA290_39 = input.LA(1);

                         
                        int index290_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA290_40 = input.LA(1);

                         
                        int index290_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA290_41 = input.LA(1);

                         
                        int index290_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA290_42 = input.LA(1);

                         
                        int index290_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA290_43 = input.LA(1);

                         
                        int index290_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA290_44 = input.LA(1);

                         
                        int index290_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA290_45 = input.LA(1);

                         
                        int index290_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA290_46 = input.LA(1);

                         
                        int index290_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA290_47 = input.LA(1);

                         
                        int index290_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA290_48 = input.LA(1);

                         
                        int index290_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA290_49 = input.LA(1);

                         
                        int index290_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA290_50 = input.LA(1);

                         
                        int index290_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA290_51 = input.LA(1);

                         
                        int index290_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred146_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA290_52 = input.LA(1);

                         
                        int index290_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA290_53 = input.LA(1);

                         
                        int index290_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA290_54 = input.LA(1);

                         
                        int index290_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA290_55 = input.LA(1);

                         
                        int index290_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA290_56 = input.LA(1);

                         
                        int index290_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA290_57 = input.LA(1);

                         
                        int index290_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA290_58 = input.LA(1);

                         
                        int index290_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA290_59 = input.LA(1);

                         
                        int index290_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA290_60 = input.LA(1);

                         
                        int index290_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA290_61 = input.LA(1);

                         
                        int index290_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA290_62 = input.LA(1);

                         
                        int index290_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA290_63 = input.LA(1);

                         
                        int index290_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA290_64 = input.LA(1);

                         
                        int index290_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA290_65 = input.LA(1);

                         
                        int index290_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA290_66 = input.LA(1);

                         
                        int index290_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA290_67 = input.LA(1);

                         
                        int index290_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA290_68 = input.LA(1);

                         
                        int index290_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index290_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA290_69 = input.LA(1);

                         
                        int index290_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 290, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_192s = "\16\uffff";
    static final String dfa_193s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_194s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_195s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_196s = "\16\uffff}>";
    static final String[] dfa_197s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final char[] dfa_193 = DFA.unpackEncodedStringToUnsignedChars(dfa_193s);
    static final char[] dfa_194 = DFA.unpackEncodedStringToUnsignedChars(dfa_194s);
    static final short[] dfa_195 = DFA.unpackEncodedString(dfa_195s);
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final short[][] dfa_197 = unpackEncodedStringArray(dfa_197s);

    class DFA283 extends DFA {

        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "6331:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_198s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_199s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\12\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);

    class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6587:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_200s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_201s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_202s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_200 = DFA.unpackEncodedStringToUnsignedChars(dfa_200s);
    static final char[] dfa_201 = DFA.unpackEncodedStringToUnsignedChars(dfa_201s);
    static final short[][] dfa_202 = unpackEncodedStringArray(dfa_202s);

    class DFA288 extends DFA {

        public DFA288(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = dfa_50;
            this.eof = dfa_90;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_202;
        }
        public String getDescription() {
            return "6612:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA298 extends DFA {

        public DFA298(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 298;
            this.eot = dfa_186;
            this.eof = dfa_186;
            this.min = dfa_187;
            this.max = dfa_188;
            this.accept = dfa_189;
            this.special = dfa_190;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "6638:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA298_0 = input.LA(1);

                         
                        int index298_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA298_0>=4 && LA298_0<=129 && (s=T2S.M_23[LA298_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA298_0==RULE_DOUBLE||LA298_0==RULE_HEX_INT||LA298_0==RULE_OCTAL_INT||LA298_0==RULE_SCIENTIFIC_INT||LA298_0==RULE_INT) ) {s = 68;}

                        else if ( (LA298_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA298_0==LessThanSign) && (synpred158_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA298_0==Asterisk) && (synpred158_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA298_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index298_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA298_1 = input.LA(1);

                         
                        int index298_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA298_2 = input.LA(1);

                         
                        int index298_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA298_3 = input.LA(1);

                         
                        int index298_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA298_4 = input.LA(1);

                         
                        int index298_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA298_5 = input.LA(1);

                         
                        int index298_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA298_6 = input.LA(1);

                         
                        int index298_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA298_7 = input.LA(1);

                         
                        int index298_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA298_8 = input.LA(1);

                         
                        int index298_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA298_9 = input.LA(1);

                         
                        int index298_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA298_10 = input.LA(1);

                         
                        int index298_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA298_11 = input.LA(1);

                         
                        int index298_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA298_12 = input.LA(1);

                         
                        int index298_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA298_13 = input.LA(1);

                         
                        int index298_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA298_14 = input.LA(1);

                         
                        int index298_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA298_15 = input.LA(1);

                         
                        int index298_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA298_16 = input.LA(1);

                         
                        int index298_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA298_17 = input.LA(1);

                         
                        int index298_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA298_18 = input.LA(1);

                         
                        int index298_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA298_19 = input.LA(1);

                         
                        int index298_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA298_20 = input.LA(1);

                         
                        int index298_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA298_21 = input.LA(1);

                         
                        int index298_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA298_22 = input.LA(1);

                         
                        int index298_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA298_23 = input.LA(1);

                         
                        int index298_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA298_24 = input.LA(1);

                         
                        int index298_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA298_25 = input.LA(1);

                         
                        int index298_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA298_26 = input.LA(1);

                         
                        int index298_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA298_27 = input.LA(1);

                         
                        int index298_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA298_28 = input.LA(1);

                         
                        int index298_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA298_29 = input.LA(1);

                         
                        int index298_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA298_30 = input.LA(1);

                         
                        int index298_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA298_31 = input.LA(1);

                         
                        int index298_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA298_32 = input.LA(1);

                         
                        int index298_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA298_33 = input.LA(1);

                         
                        int index298_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA298_34 = input.LA(1);

                         
                        int index298_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA298_35 = input.LA(1);

                         
                        int index298_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA298_36 = input.LA(1);

                         
                        int index298_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA298_37 = input.LA(1);

                         
                        int index298_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA298_38 = input.LA(1);

                         
                        int index298_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA298_39 = input.LA(1);

                         
                        int index298_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA298_40 = input.LA(1);

                         
                        int index298_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA298_41 = input.LA(1);

                         
                        int index298_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA298_42 = input.LA(1);

                         
                        int index298_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA298_43 = input.LA(1);

                         
                        int index298_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA298_44 = input.LA(1);

                         
                        int index298_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA298_45 = input.LA(1);

                         
                        int index298_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA298_46 = input.LA(1);

                         
                        int index298_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA298_47 = input.LA(1);

                         
                        int index298_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA298_48 = input.LA(1);

                         
                        int index298_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA298_49 = input.LA(1);

                         
                        int index298_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA298_50 = input.LA(1);

                         
                        int index298_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA298_51 = input.LA(1);

                         
                        int index298_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred155_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA298_52 = input.LA(1);

                         
                        int index298_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA298_53 = input.LA(1);

                         
                        int index298_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA298_54 = input.LA(1);

                         
                        int index298_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA298_55 = input.LA(1);

                         
                        int index298_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA298_56 = input.LA(1);

                         
                        int index298_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA298_57 = input.LA(1);

                         
                        int index298_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA298_58 = input.LA(1);

                         
                        int index298_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA298_59 = input.LA(1);

                         
                        int index298_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA298_60 = input.LA(1);

                         
                        int index298_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA298_61 = input.LA(1);

                         
                        int index298_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA298_62 = input.LA(1);

                         
                        int index298_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA298_63 = input.LA(1);

                         
                        int index298_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA298_64 = input.LA(1);

                         
                        int index298_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA298_65 = input.LA(1);

                         
                        int index298_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA298_66 = input.LA(1);

                         
                        int index298_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA298_67 = input.LA(1);

                         
                        int index298_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA298_68 = input.LA(1);

                         
                        int index298_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index298_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA298_69 = input.LA(1);

                         
                        int index298_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index298_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 298, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "6647:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA293 extends DFA {

        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6903:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_203s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_203 = unpackEncodedStringArray(dfa_203s);

    class DFA296 extends DFA {

        public DFA296(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "6928:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA300 extends DFA {

        public DFA300(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 300;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6981:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA304 extends DFA {

        public DFA304(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 304;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "7039:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA307 extends DFA {

        public DFA307(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 307;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "7090:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA308 extends DFA {

        public DFA308(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 308;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "7124:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA309 extends DFA {

        public DFA309(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 309;
            this.eot = dfa_50;
            this.eof = dfa_90;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_202;
        }
        public String getDescription() {
            return "7155:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA311 extends DFA {

        public DFA311(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 311;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_93;
            this.special = dfa_55;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "7180:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_204s = "\70\uffff";
    static final String dfa_205s = "\2\4\66\uffff";
    static final String dfa_206s = "\2\u0095\66\uffff";
    static final String dfa_207s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_208s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_209s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\64\3\uffff\1\36\1\14\3\uffff\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final char[] dfa_205 = DFA.unpackEncodedStringToUnsignedChars(dfa_205s);
    static final char[] dfa_206 = DFA.unpackEncodedStringToUnsignedChars(dfa_206s);
    static final short[] dfa_207 = DFA.unpackEncodedString(dfa_207s);
    static final short[] dfa_208 = DFA.unpackEncodedString(dfa_208s);
    static final short[][] dfa_209 = unpackEncodedStringArray(dfa_209s);

    class DFA329 extends DFA {

        public DFA329(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 329;
            this.eot = dfa_204;
            this.eof = dfa_204;
            this.min = dfa_205;
            this.max = dfa_206;
            this.accept = dfa_207;
            this.special = dfa_208;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "7948:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA329_1 = input.LA(1);

                         
                        int index329_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA329_1==FullStop) && (synpred181_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA329_1>=4 && LA329_1<=149 && (s=T2S.M_25[LA329_1-(4)])>=0) && (synpred182_InternalN4JSXParser())) { /* 53 cases */ }
                        input.seek(index329_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 329, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_210s = "\2\4\65\uffff";
    static final String dfa_211s = "\2\u0095\65\uffff";
    static final String dfa_212s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_213s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_214s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_210 = DFA.unpackEncodedStringToUnsignedChars(dfa_210s);
    static final char[] dfa_211 = DFA.unpackEncodedStringToUnsignedChars(dfa_211s);
    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[] dfa_213 = DFA.unpackEncodedString(dfa_213s);
    static final short[][] dfa_214 = unpackEncodedStringArray(dfa_214s);

    class DFA335 extends DFA {

        public DFA335(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 335;
            this.eot = dfa_36;
            this.eof = dfa_36;
            this.min = dfa_210;
            this.max = dfa_211;
            this.accept = dfa_212;
            this.special = dfa_213;
            this.transition = dfa_214;
        }
        public String getDescription() {
            return "8006:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA335_1 = input.LA(1);

                         
                        int index335_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA335_1==FullStop) && (synpred185_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA335_1>=4 && LA335_1<=149 && (s=T2S.M_26[LA335_1-(4)])>=0) && (synpred186_InternalN4JSXParser())) { /* 52 cases */ }
                        input.seek(index335_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 335, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_215s = "\1\1\102\uffff";
    static final String dfa_216s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_217s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_218s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_219s = "\1\1\3\uffff\1\0\76\uffff}>";
    static final String[] dfa_220s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final char[] dfa_216 = DFA.unpackEncodedStringToUnsignedChars(dfa_216s);
    static final char[] dfa_217 = DFA.unpackEncodedStringToUnsignedChars(dfa_217s);
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final short[][] dfa_220 = unpackEncodedStringArray(dfa_220s);

    class DFA348 extends DFA {

        public DFA348(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 348;
            this.eot = dfa_132;
            this.eof = dfa_215;
            this.min = dfa_216;
            this.max = dfa_217;
            this.accept = dfa_218;
            this.special = dfa_219;
            this.transition = dfa_220;
        }
        public String getDescription() {
            return "()* loopback of 8411:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA348_4 = input.LA(1);

                         
                        int index348_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA348_4>=4 && LA348_4<=149 && (s=T2S.M_27[LA348_4-(4)])>=0) && (synpred197_InternalN4JSXParser())) { /* 63 cases */ }
                        input.seek(index348_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA348_0 = input.LA(1);

                         
                        int index348_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_0==EOF||LA348_0==Instanceof||LA348_0==ExclamationMarkEqualsSignEqualsSign||(LA348_0>=LessThanSignLessThanSignEqualsSign && LA348_0<=EqualsSignEqualsSignEqualsSign)||(LA348_0>=ExclamationMarkEqualsSign && LA348_0<=AsteriskEqualsSign)||LA348_0==PlusSignEqualsSign||(LA348_0>=HyphenMinusEqualsSign && LA348_0<=SolidusEqualsSign)||(LA348_0>=LessThanSignEqualsSign && LA348_0<=EqualsSignEqualsSign)||LA348_0==GreaterThanSignEqualsSign||LA348_0==CircumflexAccentEqualsSign||(LA348_0>=In && LA348_0<=VerticalLineVerticalLine)||LA348_0==Ampersand||LA348_0==RightParenthesis||LA348_0==Comma||(LA348_0>=Colon && LA348_0<=EqualsSign)||LA348_0==QuestionMark||(LA348_0>=RightSquareBracket && LA348_0<=CircumflexAccent)||(LA348_0>=VerticalLine && LA348_0<=RightCurlyBracket)||LA348_0==RULE_ML_COMMENT||LA348_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA348_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA348_0==LessThanSignLessThanSign) && (synpred197_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index348_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 348, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_221s = "\1\1\101\uffff";
    static final String dfa_222s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_223s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_224s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_225s = "\1\1\3\uffff\1\0\75\uffff}>";
    static final String[] dfa_226s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final char[] dfa_222 = DFA.unpackEncodedStringToUnsignedChars(dfa_222s);
    static final char[] dfa_223 = DFA.unpackEncodedStringToUnsignedChars(dfa_223s);
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[][] dfa_226 = unpackEncodedStringArray(dfa_226s);

    class DFA349 extends DFA {

        public DFA349(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 349;
            this.eot = dfa_30;
            this.eof = dfa_221;
            this.min = dfa_222;
            this.max = dfa_223;
            this.accept = dfa_224;
            this.special = dfa_225;
            this.transition = dfa_226;
        }
        public String getDescription() {
            return "()* loopback of 8440:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA349_4 = input.LA(1);

                         
                        int index349_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA349_4>=4 && LA349_4<=149 && (s=T2S.M_28[LA349_4-(4)])>=0) && (synpred198_InternalN4JSXParser())) { /* 62 cases */ }
                        input.seek(index349_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA349_0 = input.LA(1);

                         
                        int index349_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_0==EOF||LA349_0==Instanceof||LA349_0==ExclamationMarkEqualsSignEqualsSign||(LA349_0>=LessThanSignLessThanSignEqualsSign && LA349_0<=EqualsSignEqualsSignEqualsSign)||(LA349_0>=ExclamationMarkEqualsSign && LA349_0<=AsteriskEqualsSign)||LA349_0==PlusSignEqualsSign||(LA349_0>=HyphenMinusEqualsSign && LA349_0<=SolidusEqualsSign)||(LA349_0>=LessThanSignEqualsSign && LA349_0<=EqualsSignEqualsSign)||LA349_0==GreaterThanSignEqualsSign||LA349_0==CircumflexAccentEqualsSign||(LA349_0>=In && LA349_0<=VerticalLineVerticalLine)||LA349_0==Ampersand||LA349_0==RightParenthesis||LA349_0==Comma||(LA349_0>=Colon && LA349_0<=EqualsSign)||LA349_0==QuestionMark||(LA349_0>=RightSquareBracket && LA349_0<=CircumflexAccent)||(LA349_0>=VerticalLine && LA349_0<=RightCurlyBracket)||LA349_0==RULE_ML_COMMENT||LA349_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA349_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA349_0==LessThanSignLessThanSign) && (synpred198_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index349_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 349, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_227s = "\104\uffff";
    static final String dfa_228s = "\1\1\103\uffff";
    static final String dfa_229s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_230s = "\1\160\1\uffff\1\u0095\101\uffff";
    static final String dfa_231s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_232s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_233s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[] dfa_228 = DFA.unpackEncodedString(dfa_228s);
    static final char[] dfa_229 = DFA.unpackEncodedStringToUnsignedChars(dfa_229s);
    static final char[] dfa_230 = DFA.unpackEncodedStringToUnsignedChars(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final short[][] dfa_233 = unpackEncodedStringArray(dfa_233s);

    class DFA352 extends DFA {

        public DFA352(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 352;
            this.eot = dfa_227;
            this.eof = dfa_228;
            this.min = dfa_229;
            this.max = dfa_230;
            this.accept = dfa_231;
            this.special = dfa_232;
            this.transition = dfa_233;
        }
        public String getDescription() {
            return "()* loopback of 8506:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA352_2 = input.LA(1);

                         
                        int index352_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA352_2>=4 && LA352_2<=149 && (s=T2S.M_29[LA352_2-(4)])>=0) && (synpred199_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA352_2==GreaterThanSignEqualsSign||LA352_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index352_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA352_0 = input.LA(1);

                         
                        int index352_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA352_0==EOF||LA352_0==ExclamationMarkEqualsSignEqualsSign||(LA352_0>=LessThanSignLessThanSignEqualsSign && LA352_0<=EqualsSignEqualsSignEqualsSign)||(LA352_0>=ExclamationMarkEqualsSign && LA352_0<=AsteriskEqualsSign)||LA352_0==PlusSignEqualsSign||(LA352_0>=HyphenMinusEqualsSign && LA352_0<=SolidusEqualsSign)||LA352_0==EqualsSignEqualsSign||LA352_0==CircumflexAccentEqualsSign||(LA352_0>=In && LA352_0<=VerticalLineVerticalLine)||LA352_0==Ampersand||LA352_0==Comma||LA352_0==Semicolon||LA352_0==EqualsSign||LA352_0==QuestionMark||LA352_0==CircumflexAccent||(LA352_0>=VerticalLine && LA352_0<=RightCurlyBracket)) ) {s = 1;}

                        else if ( (LA352_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA352_0==LessThanSign) && (synpred199_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA352_0==LessThanSignEqualsSign) && (synpred199_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA352_0==GreaterThanSignEqualsSign) && (synpred199_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA352_0==Instanceof) && (synpred199_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index352_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 352, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_234s = "\105\uffff";
    static final String dfa_235s = "\1\1\104\uffff";
    static final String dfa_236s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_237s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_238s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_239s = "\1\1\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_240s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final char[] dfa_236 = DFA.unpackEncodedStringToUnsignedChars(dfa_236s);
    static final char[] dfa_237 = DFA.unpackEncodedStringToUnsignedChars(dfa_237s);
    static final short[] dfa_238 = DFA.unpackEncodedString(dfa_238s);
    static final short[] dfa_239 = DFA.unpackEncodedString(dfa_239s);
    static final short[][] dfa_240 = unpackEncodedStringArray(dfa_240s);

    class DFA353 extends DFA {

        public DFA353(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 353;
            this.eot = dfa_234;
            this.eof = dfa_235;
            this.min = dfa_236;
            this.max = dfa_237;
            this.accept = dfa_238;
            this.special = dfa_239;
            this.transition = dfa_240;
        }
        public String getDescription() {
            return "()* loopback of 8691:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA353_2 = input.LA(1);

                         
                        int index353_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA353_2==GreaterThanSignEqualsSign||LA353_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA353_2==New) && (synpred201_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA353_2==This_1) && (synpred201_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA353_2==Super) && (synpred201_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA353_2==RULE_IDENTIFIER) && (synpred201_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA353_2==Yield) && (synpred201_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA353_2==Get) && (synpred201_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA353_2==Set) && (synpred201_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA353_2==Let) && (synpred201_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA353_2==Project) && (synpred201_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA353_2==External) && (synpred201_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA353_2==Abstract) && (synpred201_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA353_2==Static) && (synpred201_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA353_2==As) && (synpred201_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA353_2==From) && (synpred201_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA353_2==Constructor) && (synpred201_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA353_2==Of) && (synpred201_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA353_2==Target) && (synpred201_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA353_2==Type) && (synpred201_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA353_2==Union) && (synpred201_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA353_2==Intersection) && (synpred201_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA353_2==This) && (synpred201_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA353_2==Promisify) && (synpred201_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA353_2==Await) && (synpred201_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA353_2==Async) && (synpred201_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA353_2==Implements) && (synpred201_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA353_2==Interface) && (synpred201_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA353_2==Private) && (synpred201_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA353_2==Protected) && (synpred201_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA353_2==Public) && (synpred201_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA353_2==Out) && (synpred201_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA353_2==LessThanSign) && (synpred201_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA353_2==RULE_DOUBLE) && (synpred201_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA353_2==RULE_INT) && (synpred201_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA353_2==RULE_BINARY_INT) && (synpred201_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA353_2==RULE_OCTAL_INT) && (synpred201_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA353_2==RULE_LEGACY_OCTAL_INT) && (synpred201_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA353_2==RULE_HEX_INT) && (synpred201_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA353_2==RULE_SCIENTIFIC_INT) && (synpred201_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA353_2==True) && (synpred201_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA353_2==False) && (synpred201_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA353_2==RULE_STRING) && (synpred201_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA353_2==Null) && (synpred201_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA353_2==Solidus) && (synpred201_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA353_2==SolidusEqualsSign) && (synpred201_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA353_2==LeftSquareBracket) && (synpred201_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA353_2==LeftCurlyBracket) && (synpred201_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA353_2==LeftParenthesis) && (synpred201_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA353_2==CommercialAt) && (synpred201_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA353_2==Function) && (synpred201_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA353_2==Class) && (synpred201_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA353_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred201_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA353_2==RULE_TEMPLATE_HEAD) && (synpred201_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA353_2==Delete) && (synpred201_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA353_2==Void) && (synpred201_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA353_2==Typeof) && (synpred201_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA353_2==PlusSignPlusSign) && (synpred201_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA353_2==HyphenMinusHyphenMinus) && (synpred201_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA353_2==PlusSign) && (synpred201_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA353_2==HyphenMinus) && (synpred201_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA353_2==Tilde) && (synpred201_InternalN4JSXParser())) {s = 67;}

                        else if ( (LA353_2==ExclamationMark) && (synpred201_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index353_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA353_0 = input.LA(1);

                         
                        int index353_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA353_0==EOF||LA353_0==ExclamationMarkEqualsSignEqualsSign||(LA353_0>=LessThanSignLessThanSignEqualsSign && LA353_0<=EqualsSignEqualsSignEqualsSign)||(LA353_0>=ExclamationMarkEqualsSign && LA353_0<=AsteriskEqualsSign)||LA353_0==PlusSignEqualsSign||(LA353_0>=HyphenMinusEqualsSign && LA353_0<=SolidusEqualsSign)||LA353_0==EqualsSignEqualsSign||LA353_0==CircumflexAccentEqualsSign||(LA353_0>=VerticalLineEqualsSign && LA353_0<=VerticalLineVerticalLine)||LA353_0==Ampersand||LA353_0==RightParenthesis||LA353_0==Comma||(LA353_0>=Colon && LA353_0<=Semicolon)||LA353_0==EqualsSign||LA353_0==QuestionMark||(LA353_0>=RightSquareBracket && LA353_0<=CircumflexAccent)||(LA353_0>=VerticalLine && LA353_0<=RightCurlyBracket)||LA353_0==RULE_ML_COMMENT||LA353_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA353_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA353_0==LessThanSign) && (synpred201_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA353_0==LessThanSignEqualsSign) && (synpred201_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA353_0==GreaterThanSignEqualsSign) && (synpred201_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA353_0==Instanceof) && (synpred201_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA353_0==In) && (synpred201_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index353_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 353, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_241s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_242s = "\1\160\1\uffff\1\u0095\100\uffff";
    static final String dfa_243s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_244s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_245s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_241 = DFA.unpackEncodedStringToUnsignedChars(dfa_241s);
    static final char[] dfa_242 = DFA.unpackEncodedStringToUnsignedChars(dfa_242s);
    static final short[] dfa_243 = DFA.unpackEncodedString(dfa_243s);
    static final short[] dfa_244 = DFA.unpackEncodedString(dfa_244s);
    static final short[][] dfa_245 = unpackEncodedStringArray(dfa_245s);

    class DFA354 extends DFA {

        public DFA354(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 354;
            this.eot = dfa_132;
            this.eof = dfa_215;
            this.min = dfa_241;
            this.max = dfa_242;
            this.accept = dfa_243;
            this.special = dfa_244;
            this.transition = dfa_245;
        }
        public String getDescription() {
            return "()* loopback of 8876:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA354_2 = input.LA(1);

                         
                        int index354_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA354_2>=4 && LA354_2<=149 && (s=T2S.M_30[LA354_2-(4)])>=0) && (synpred203_InternalN4JSXParser())) { /* 60 cases */ }
                        else if ( (LA354_2==GreaterThanSignEqualsSign||LA354_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index354_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA354_0 = input.LA(1);

                         
                        int index354_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_0==EOF||LA354_0==ExclamationMarkEqualsSignEqualsSign||(LA354_0>=LessThanSignLessThanSignEqualsSign && LA354_0<=EqualsSignEqualsSignEqualsSign)||(LA354_0>=ExclamationMarkEqualsSign && LA354_0<=AsteriskEqualsSign)||LA354_0==PlusSignEqualsSign||(LA354_0>=HyphenMinusEqualsSign && LA354_0<=SolidusEqualsSign)||LA354_0==EqualsSignEqualsSign||LA354_0==CircumflexAccentEqualsSign||(LA354_0>=In && LA354_0<=VerticalLineVerticalLine)||LA354_0==Ampersand||LA354_0==Comma||LA354_0==Semicolon||LA354_0==EqualsSign||LA354_0==QuestionMark||LA354_0==CircumflexAccent||(LA354_0>=VerticalLine && LA354_0<=RightCurlyBracket)) ) {s = 1;}

                        else if ( (LA354_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA354_0==LessThanSign) && (synpred203_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA354_0==LessThanSignEqualsSign) && (synpred203_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA354_0==GreaterThanSignEqualsSign) && (synpred203_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA354_0==Instanceof) && (synpred203_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index354_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 354, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_246s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String[] dfa_247s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_246 = DFA.unpackEncodedStringToUnsignedChars(dfa_246s);
    static final short[][] dfa_247 = unpackEncodedStringArray(dfa_247s);

    class DFA355 extends DFA {

        public DFA355(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 355;
            this.eot = dfa_227;
            this.eof = dfa_228;
            this.min = dfa_229;
            this.max = dfa_246;
            this.accept = dfa_231;
            this.special = dfa_232;
            this.transition = dfa_247;
        }
        public String getDescription() {
            return "()* loopback of 9058:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA355_2 = input.LA(1);

                         
                        int index355_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_2==GreaterThanSignEqualsSign||LA355_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA355_2==New) && (synpred205_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA355_2==This_1) && (synpred205_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA355_2==Super) && (synpred205_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA355_2==RULE_IDENTIFIER) && (synpred205_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA355_2==Get) && (synpred205_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA355_2==Set) && (synpred205_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA355_2==Let) && (synpred205_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA355_2==Project) && (synpred205_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA355_2==External) && (synpred205_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA355_2==Abstract) && (synpred205_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA355_2==Static) && (synpred205_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA355_2==As) && (synpred205_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA355_2==From) && (synpred205_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA355_2==Constructor) && (synpred205_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA355_2==Of) && (synpred205_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA355_2==Target) && (synpred205_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA355_2==Type) && (synpred205_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA355_2==Union) && (synpred205_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA355_2==Intersection) && (synpred205_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA355_2==This) && (synpred205_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA355_2==Promisify) && (synpred205_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA355_2==Await) && (synpred205_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA355_2==Async) && (synpred205_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA355_2==Implements) && (synpred205_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA355_2==Interface) && (synpred205_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA355_2==Private) && (synpred205_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA355_2==Protected) && (synpred205_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA355_2==Public) && (synpred205_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA355_2==Out) && (synpred205_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA355_2==LessThanSign) && (synpred205_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA355_2==RULE_DOUBLE) && (synpred205_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA355_2==RULE_INT) && (synpred205_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA355_2==RULE_BINARY_INT) && (synpred205_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA355_2==RULE_OCTAL_INT) && (synpred205_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA355_2==RULE_LEGACY_OCTAL_INT) && (synpred205_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA355_2==RULE_HEX_INT) && (synpred205_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA355_2==RULE_SCIENTIFIC_INT) && (synpred205_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA355_2==True) && (synpred205_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA355_2==False) && (synpred205_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA355_2==RULE_STRING) && (synpred205_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA355_2==Null) && (synpred205_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA355_2==Solidus) && (synpred205_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA355_2==SolidusEqualsSign) && (synpred205_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA355_2==LeftSquareBracket) && (synpred205_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA355_2==LeftCurlyBracket) && (synpred205_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA355_2==LeftParenthesis) && (synpred205_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA355_2==CommercialAt) && (synpred205_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA355_2==Function) && (synpred205_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA355_2==Class) && (synpred205_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA355_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred205_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA355_2==RULE_TEMPLATE_HEAD) && (synpred205_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA355_2==Delete) && (synpred205_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA355_2==Void) && (synpred205_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA355_2==Typeof) && (synpred205_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA355_2==PlusSignPlusSign) && (synpred205_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA355_2==HyphenMinusHyphenMinus) && (synpred205_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA355_2==PlusSign) && (synpred205_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA355_2==HyphenMinus) && (synpred205_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA355_2==Tilde) && (synpred205_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA355_2==ExclamationMark) && (synpred205_InternalN4JSXParser())) {s = 67;}

                         
                        input.seek(index355_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA355_0 = input.LA(1);

                         
                        int index355_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_0==EOF||LA355_0==ExclamationMarkEqualsSignEqualsSign||(LA355_0>=LessThanSignLessThanSignEqualsSign && LA355_0<=EqualsSignEqualsSignEqualsSign)||(LA355_0>=ExclamationMarkEqualsSign && LA355_0<=AsteriskEqualsSign)||LA355_0==PlusSignEqualsSign||(LA355_0>=HyphenMinusEqualsSign && LA355_0<=SolidusEqualsSign)||LA355_0==EqualsSignEqualsSign||LA355_0==CircumflexAccentEqualsSign||(LA355_0>=VerticalLineEqualsSign && LA355_0<=VerticalLineVerticalLine)||LA355_0==Ampersand||LA355_0==RightParenthesis||LA355_0==Comma||(LA355_0>=Colon && LA355_0<=Semicolon)||LA355_0==EqualsSign||LA355_0==QuestionMark||(LA355_0>=RightSquareBracket && LA355_0<=CircumflexAccent)||(LA355_0>=VerticalLine && LA355_0<=RightCurlyBracket)||LA355_0==RULE_ML_COMMENT||LA355_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA355_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA355_0==LessThanSign) && (synpred205_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA355_0==LessThanSignEqualsSign) && (synpred205_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA355_0==GreaterThanSignEqualsSign) && (synpred205_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA355_0==Instanceof) && (synpred205_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA355_0==In) && (synpred205_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index355_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 355, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_248s = "\101\uffff";
    static final String dfa_249s = "\1\4\4\0\1\uffff\31\0\42\uffff";
    static final String dfa_250s = "\1\u0095\4\0\1\uffff\31\0\42\uffff";
    static final String dfa_251s = "\5\uffff\1\3\31\uffff\1\4\37\uffff\1\1\1\2";
    static final String dfa_252s = "\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\42\uffff}>";
    static final String[] dfa_253s = {
            "\1\26\1\21\1\31\1\uffff\1\30\1\32\1\34\1\15\2\uffff\1\14\1\37\3\uffff\1\33\1\13\1\37\2\uffff\1\35\1\uffff\1\16\1\uffff\1\23\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\3\37\1\24\1\37\6\uffff\1\10\1\12\1\37\1\36\1\11\7\uffff\1\37\1\uffff\1\37\1\uffff\1\37\7\uffff\1\17\3\uffff\1\22\2\uffff\1\37\2\uffff\1\3\1\uffff\1\5\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\3\uffff\1\37\1\uffff\4\37\1\uffff\1\37\1\uffff\1\6\2\uffff\1\37\11\uffff\2\37\10\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_248 = DFA.unpackEncodedString(dfa_248s);
    static final char[] dfa_249 = DFA.unpackEncodedStringToUnsignedChars(dfa_249s);
    static final char[] dfa_250 = DFA.unpackEncodedStringToUnsignedChars(dfa_250s);
    static final short[] dfa_251 = DFA.unpackEncodedString(dfa_251s);
    static final short[] dfa_252 = DFA.unpackEncodedString(dfa_252s);
    static final short[][] dfa_253 = unpackEncodedStringArray(dfa_253s);

    class DFA387 extends DFA {

        public DFA387(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 387;
            this.eot = dfa_248;
            this.eof = dfa_248;
            this.min = dfa_249;
            this.max = dfa_250;
            this.accept = dfa_251;
            this.special = dfa_252;
            this.transition = dfa_253;
        }
        public String getDescription() {
            return "10160:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA387_0 = input.LA(1);

                         
                        int index387_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA387_0==Await) ) {s = 1;}

                        else if ( (LA387_0==CommercialAt) ) {s = 2;}

                        else if ( (LA387_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA387_0==Async) ) {s = 4;}

                        else if ( (LA387_0==Asterisk) && (synpred240_InternalN4JSXParser())) {s = 5;}

                        
                        else if ((LA387_0>=4 && LA387_0<=126 && (s=T2S.M_31[LA387_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA387_0==Function||LA387_0==Delete||LA387_0==Typeof||LA387_0==Class||(LA387_0>=False && LA387_0<=Super)||(LA387_0>=Null && LA387_0<=True)||LA387_0==Void||LA387_0==New||LA387_0==PlusSignPlusSign||LA387_0==HyphenMinusHyphenMinus||LA387_0==SolidusEqualsSign||LA387_0==ExclamationMark||LA387_0==PlusSign||LA387_0==HyphenMinus||LA387_0==Solidus||LA387_0==LessThanSign||LA387_0==LeftSquareBracket||LA387_0==LeftCurlyBracket||LA387_0==Tilde||LA387_0==RULE_DOUBLE||(LA387_0>=RULE_HEX_INT && LA387_0<=RULE_LEGACY_OCTAL_INT)||LA387_0==RULE_SCIENTIFIC_INT||LA387_0==RULE_STRING||(LA387_0>=RULE_TEMPLATE_HEAD && LA387_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA387_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index387_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA387_1 = input.LA(1);

                         
                        int index387_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA387_2 = input.LA(1);

                         
                        int index387_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA387_3 = input.LA(1);

                         
                        int index387_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA387_4 = input.LA(1);

                         
                        int index387_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA387_6 = input.LA(1);

                         
                        int index387_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA387_7 = input.LA(1);

                         
                        int index387_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA387_8 = input.LA(1);

                         
                        int index387_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA387_9 = input.LA(1);

                         
                        int index387_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA387_10 = input.LA(1);

                         
                        int index387_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA387_11 = input.LA(1);

                         
                        int index387_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA387_12 = input.LA(1);

                         
                        int index387_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA387_13 = input.LA(1);

                         
                        int index387_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA387_14 = input.LA(1);

                         
                        int index387_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA387_15 = input.LA(1);

                         
                        int index387_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA387_16 = input.LA(1);

                         
                        int index387_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA387_17 = input.LA(1);

                         
                        int index387_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA387_18 = input.LA(1);

                         
                        int index387_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA387_19 = input.LA(1);

                         
                        int index387_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA387_20 = input.LA(1);

                         
                        int index387_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA387_21 = input.LA(1);

                         
                        int index387_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA387_22 = input.LA(1);

                         
                        int index387_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA387_23 = input.LA(1);

                         
                        int index387_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA387_24 = input.LA(1);

                         
                        int index387_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA387_25 = input.LA(1);

                         
                        int index387_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA387_26 = input.LA(1);

                         
                        int index387_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA387_27 = input.LA(1);

                         
                        int index387_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA387_28 = input.LA(1);

                         
                        int index387_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA387_29 = input.LA(1);

                         
                        int index387_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA387_30 = input.LA(1);

                         
                        int index387_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index387_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 387, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_254s = "\1\14\15\uffff";
    static final String dfa_255s = "\1\67\13\0\2\uffff";
    static final String dfa_256s = "\1\160\13\0\2\uffff";
    static final String dfa_257s = "\14\uffff\1\2\1\1";
    static final String dfa_258s = "\1\uffff\1\0\1\5\1\1\1\6\1\2\1\7\1\3\1\12\1\10\1\4\1\11\2\uffff}>";
    static final String[] dfa_259s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final char[] dfa_255 = DFA.unpackEncodedStringToUnsignedChars(dfa_255s);
    static final char[] dfa_256 = DFA.unpackEncodedStringToUnsignedChars(dfa_256s);
    static final short[] dfa_257 = DFA.unpackEncodedString(dfa_257s);
    static final short[] dfa_258 = DFA.unpackEncodedString(dfa_258s);
    static final short[][] dfa_259 = unpackEncodedStringArray(dfa_259s);

    class DFA386 extends DFA {

        public DFA386(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 386;
            this.eot = dfa_192;
            this.eof = dfa_254;
            this.min = dfa_255;
            this.max = dfa_256;
            this.accept = dfa_257;
            this.special = dfa_258;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "10241:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA386_1 = input.LA(1);

                         
                        int index386_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA386_3 = input.LA(1);

                         
                        int index386_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA386_5 = input.LA(1);

                         
                        int index386_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA386_7 = input.LA(1);

                         
                        int index386_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA386_10 = input.LA(1);

                         
                        int index386_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA386_2 = input.LA(1);

                         
                        int index386_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA386_4 = input.LA(1);

                         
                        int index386_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA386_6 = input.LA(1);

                         
                        int index386_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA386_9 = input.LA(1);

                         
                        int index386_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA386_11 = input.LA(1);

                         
                        int index386_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA386_8 = input.LA(1);

                         
                        int index386_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index386_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 386, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA389 extends DFA {

        public DFA389(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 389;
            this.eot = dfa_248;
            this.eof = dfa_248;
            this.min = dfa_249;
            this.max = dfa_250;
            this.accept = dfa_251;
            this.special = dfa_252;
            this.transition = dfa_253;
        }
        public String getDescription() {
            return "10265:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA389_0 = input.LA(1);

                         
                        int index389_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA389_0==Await) ) {s = 1;}

                        else if ( (LA389_0==CommercialAt) ) {s = 2;}

                        else if ( (LA389_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA389_0==Async) ) {s = 4;}

                        else if ( (LA389_0==Asterisk) && (synpred247_InternalN4JSXParser())) {s = 5;}

                        
                        else if ((LA389_0>=4 && LA389_0<=126 && (s=T2S.M_31[LA389_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA389_0==Function||LA389_0==Delete||LA389_0==Typeof||LA389_0==Class||(LA389_0>=False && LA389_0<=Super)||(LA389_0>=Null && LA389_0<=True)||LA389_0==Void||LA389_0==New||LA389_0==PlusSignPlusSign||LA389_0==HyphenMinusHyphenMinus||LA389_0==SolidusEqualsSign||LA389_0==ExclamationMark||LA389_0==PlusSign||LA389_0==HyphenMinus||LA389_0==Solidus||LA389_0==LessThanSign||LA389_0==LeftSquareBracket||LA389_0==LeftCurlyBracket||LA389_0==Tilde||LA389_0==RULE_DOUBLE||(LA389_0>=RULE_HEX_INT && LA389_0<=RULE_LEGACY_OCTAL_INT)||LA389_0==RULE_SCIENTIFIC_INT||LA389_0==RULE_STRING||(LA389_0>=RULE_TEMPLATE_HEAD && LA389_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA389_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index389_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA389_1 = input.LA(1);

                         
                        int index389_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA389_2 = input.LA(1);

                         
                        int index389_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA389_3 = input.LA(1);

                         
                        int index389_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA389_4 = input.LA(1);

                         
                        int index389_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA389_6 = input.LA(1);

                         
                        int index389_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA389_7 = input.LA(1);

                         
                        int index389_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA389_8 = input.LA(1);

                         
                        int index389_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA389_9 = input.LA(1);

                         
                        int index389_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA389_10 = input.LA(1);

                         
                        int index389_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA389_11 = input.LA(1);

                         
                        int index389_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA389_12 = input.LA(1);

                         
                        int index389_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA389_13 = input.LA(1);

                         
                        int index389_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA389_14 = input.LA(1);

                         
                        int index389_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA389_15 = input.LA(1);

                         
                        int index389_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA389_16 = input.LA(1);

                         
                        int index389_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA389_17 = input.LA(1);

                         
                        int index389_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA389_18 = input.LA(1);

                         
                        int index389_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA389_19 = input.LA(1);

                         
                        int index389_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA389_20 = input.LA(1);

                         
                        int index389_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA389_21 = input.LA(1);

                         
                        int index389_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA389_22 = input.LA(1);

                         
                        int index389_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA389_23 = input.LA(1);

                         
                        int index389_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA389_24 = input.LA(1);

                         
                        int index389_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA389_25 = input.LA(1);

                         
                        int index389_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA389_26 = input.LA(1);

                         
                        int index389_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA389_27 = input.LA(1);

                         
                        int index389_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA389_28 = input.LA(1);

                         
                        int index389_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA389_29 = input.LA(1);

                         
                        int index389_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA389_30 = input.LA(1);

                         
                        int index389_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index389_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 389, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_260s = "\1\u0099\13\0\2\uffff";
    static final String dfa_261s = "\1\uffff\1\5\1\0\1\6\1\1\1\7\1\2\1\10\1\12\1\3\1\11\1\4\2\uffff}>";
    static final String[] dfa_262s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_260 = DFA.unpackEncodedStringToUnsignedChars(dfa_260s);
    static final short[] dfa_261 = DFA.unpackEncodedString(dfa_261s);
    static final short[][] dfa_262 = unpackEncodedStringArray(dfa_262s);

    class DFA388 extends DFA {

        public DFA388(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 388;
            this.eot = dfa_192;
            this.eof = dfa_254;
            this.min = dfa_255;
            this.max = dfa_260;
            this.accept = dfa_257;
            this.special = dfa_261;
            this.transition = dfa_262;
        }
        public String getDescription() {
            return "10346:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA388_2 = input.LA(1);

                         
                        int index388_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA388_4 = input.LA(1);

                         
                        int index388_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA388_6 = input.LA(1);

                         
                        int index388_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA388_9 = input.LA(1);

                         
                        int index388_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA388_11 = input.LA(1);

                         
                        int index388_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA388_1 = input.LA(1);

                         
                        int index388_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA388_3 = input.LA(1);

                         
                        int index388_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA388_5 = input.LA(1);

                         
                        int index388_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA388_7 = input.LA(1);

                         
                        int index388_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA388_10 = input.LA(1);

                         
                        int index388_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA388_8 = input.LA(1);

                         
                        int index388_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 388, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_263s = "\1\4\4\0\1\uffff\30\0\43\uffff";
    static final String dfa_264s = "\1\u0095\4\0\1\uffff\30\0\43\uffff";
    static final String dfa_265s = "\5\uffff\1\3\30\uffff\1\4\1\5\37\uffff\1\1\1\2";
    static final String dfa_266s = "\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_267s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\37\3\uffff\1\32\1\12\1\37\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\3\37\1\23\1\37\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\37\1\uffff\1\37\1\uffff\1\37\7\uffff\1\16\3\uffff\1\21\2\uffff\1\37\2\uffff\1\3\1\uffff\1\5\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\3\uffff\1\37\1\uffff\4\37\1\uffff\1\37\1\uffff\1\6\2\uffff\1\37\11\uffff\2\37\10\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_263 = DFA.unpackEncodedStringToUnsignedChars(dfa_263s);
    static final char[] dfa_264 = DFA.unpackEncodedStringToUnsignedChars(dfa_264s);
    static final short[] dfa_265 = DFA.unpackEncodedString(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final short[][] dfa_267 = unpackEncodedStringArray(dfa_267s);

    class DFA391 extends DFA {

        public DFA391(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 391;
            this.eot = dfa_248;
            this.eof = dfa_248;
            this.min = dfa_263;
            this.max = dfa_264;
            this.accept = dfa_265;
            this.special = dfa_266;
            this.transition = dfa_267;
        }
        public String getDescription() {
            return "10370:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA391_0 = input.LA(1);

                         
                        int index391_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA391_0==Await) ) {s = 1;}

                        else if ( (LA391_0==CommercialAt) ) {s = 2;}

                        else if ( (LA391_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA391_0==Async) ) {s = 4;}

                        else if ( (LA391_0==Asterisk) && (synpred254_InternalN4JSXParser())) {s = 5;}

                        
                        else if ((LA391_0>=4 && LA391_0<=126 && (s=T2S.M_33[LA391_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA391_0==Function||LA391_0==Delete||LA391_0==Typeof||LA391_0==Class||(LA391_0>=False && LA391_0<=Super)||(LA391_0>=Null && LA391_0<=True)||LA391_0==Void||LA391_0==New||LA391_0==PlusSignPlusSign||LA391_0==HyphenMinusHyphenMinus||LA391_0==SolidusEqualsSign||LA391_0==ExclamationMark||LA391_0==PlusSign||LA391_0==HyphenMinus||LA391_0==Solidus||LA391_0==LessThanSign||LA391_0==LeftSquareBracket||LA391_0==LeftCurlyBracket||LA391_0==Tilde||LA391_0==RULE_DOUBLE||(LA391_0>=RULE_HEX_INT && LA391_0<=RULE_LEGACY_OCTAL_INT)||LA391_0==RULE_SCIENTIFIC_INT||LA391_0==RULE_STRING||(LA391_0>=RULE_TEMPLATE_HEAD && LA391_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA391_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index391_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA391_1 = input.LA(1);

                         
                        int index391_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA391_2 = input.LA(1);

                         
                        int index391_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA391_3 = input.LA(1);

                         
                        int index391_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA391_4 = input.LA(1);

                         
                        int index391_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA391_6 = input.LA(1);

                         
                        int index391_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA391_7 = input.LA(1);

                         
                        int index391_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA391_8 = input.LA(1);

                         
                        int index391_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA391_9 = input.LA(1);

                         
                        int index391_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA391_10 = input.LA(1);

                         
                        int index391_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA391_11 = input.LA(1);

                         
                        int index391_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA391_12 = input.LA(1);

                         
                        int index391_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA391_13 = input.LA(1);

                         
                        int index391_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA391_14 = input.LA(1);

                         
                        int index391_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA391_15 = input.LA(1);

                         
                        int index391_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA391_16 = input.LA(1);

                         
                        int index391_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA391_17 = input.LA(1);

                         
                        int index391_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA391_18 = input.LA(1);

                         
                        int index391_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA391_19 = input.LA(1);

                         
                        int index391_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA391_20 = input.LA(1);

                         
                        int index391_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA391_21 = input.LA(1);

                         
                        int index391_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA391_22 = input.LA(1);

                         
                        int index391_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA391_23 = input.LA(1);

                         
                        int index391_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA391_24 = input.LA(1);

                         
                        int index391_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA391_25 = input.LA(1);

                         
                        int index391_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA391_26 = input.LA(1);

                         
                        int index391_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA391_27 = input.LA(1);

                         
                        int index391_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA391_28 = input.LA(1);

                         
                        int index391_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA391_29 = input.LA(1);

                         
                        int index391_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index391_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 391, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_268s = "\1\uffff\1\3\1\0\1\11\1\7\1\4\1\1\1\12\1\6\1\10\1\5\1\2\2\uffff}>";
    static final short[] dfa_268 = DFA.unpackEncodedString(dfa_268s);

    class DFA390 extends DFA {

        public DFA390(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 390;
            this.eot = dfa_192;
            this.eof = dfa_254;
            this.min = dfa_255;
            this.max = dfa_256;
            this.accept = dfa_257;
            this.special = dfa_268;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "10453:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA390_2 = input.LA(1);

                         
                        int index390_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA390_6 = input.LA(1);

                         
                        int index390_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA390_11 = input.LA(1);

                         
                        int index390_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA390_1 = input.LA(1);

                         
                        int index390_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA390_5 = input.LA(1);

                         
                        int index390_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA390_10 = input.LA(1);

                         
                        int index390_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA390_8 = input.LA(1);

                         
                        int index390_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA390_4 = input.LA(1);

                         
                        int index390_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA390_9 = input.LA(1);

                         
                        int index390_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA390_3 = input.LA(1);

                         
                        int index390_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA390_7 = input.LA(1);

                         
                        int index390_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 390, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA393 extends DFA {

        public DFA393(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 393;
            this.eot = dfa_248;
            this.eof = dfa_248;
            this.min = dfa_263;
            this.max = dfa_264;
            this.accept = dfa_265;
            this.special = dfa_266;
            this.transition = dfa_267;
        }
        public String getDescription() {
            return "10477:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA393_0 = input.LA(1);

                         
                        int index393_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA393_0==Await) ) {s = 1;}

                        else if ( (LA393_0==CommercialAt) ) {s = 2;}

                        else if ( (LA393_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA393_0==Async) ) {s = 4;}

                        else if ( (LA393_0==Asterisk) && (synpred261_InternalN4JSXParser())) {s = 5;}

                        
                        else if ((LA393_0>=4 && LA393_0<=126 && (s=T2S.M_33[LA393_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA393_0==Function||LA393_0==Delete||LA393_0==Typeof||LA393_0==Class||(LA393_0>=False && LA393_0<=Super)||(LA393_0>=Null && LA393_0<=True)||LA393_0==Void||LA393_0==New||LA393_0==PlusSignPlusSign||LA393_0==HyphenMinusHyphenMinus||LA393_0==SolidusEqualsSign||LA393_0==ExclamationMark||LA393_0==PlusSign||LA393_0==HyphenMinus||LA393_0==Solidus||LA393_0==LessThanSign||LA393_0==LeftSquareBracket||LA393_0==LeftCurlyBracket||LA393_0==Tilde||LA393_0==RULE_DOUBLE||(LA393_0>=RULE_HEX_INT && LA393_0<=RULE_LEGACY_OCTAL_INT)||LA393_0==RULE_SCIENTIFIC_INT||LA393_0==RULE_STRING||(LA393_0>=RULE_TEMPLATE_HEAD && LA393_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA393_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index393_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA393_1 = input.LA(1);

                         
                        int index393_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA393_2 = input.LA(1);

                         
                        int index393_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA393_3 = input.LA(1);

                         
                        int index393_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA393_4 = input.LA(1);

                         
                        int index393_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA393_6 = input.LA(1);

                         
                        int index393_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA393_7 = input.LA(1);

                         
                        int index393_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA393_8 = input.LA(1);

                         
                        int index393_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA393_9 = input.LA(1);

                         
                        int index393_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA393_10 = input.LA(1);

                         
                        int index393_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA393_11 = input.LA(1);

                         
                        int index393_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA393_12 = input.LA(1);

                         
                        int index393_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA393_13 = input.LA(1);

                         
                        int index393_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA393_14 = input.LA(1);

                         
                        int index393_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA393_15 = input.LA(1);

                         
                        int index393_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA393_16 = input.LA(1);

                         
                        int index393_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA393_17 = input.LA(1);

                         
                        int index393_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA393_18 = input.LA(1);

                         
                        int index393_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA393_19 = input.LA(1);

                         
                        int index393_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA393_20 = input.LA(1);

                         
                        int index393_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA393_21 = input.LA(1);

                         
                        int index393_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA393_22 = input.LA(1);

                         
                        int index393_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA393_23 = input.LA(1);

                         
                        int index393_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA393_24 = input.LA(1);

                         
                        int index393_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA393_25 = input.LA(1);

                         
                        int index393_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA393_26 = input.LA(1);

                         
                        int index393_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA393_27 = input.LA(1);

                         
                        int index393_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA393_28 = input.LA(1);

                         
                        int index393_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA393_29 = input.LA(1);

                         
                        int index393_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index393_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 393, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_269s = "\1\uffff\1\3\1\0\1\11\1\6\1\4\1\1\1\12\1\10\1\7\1\5\1\2\2\uffff}>";
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);

    class DFA392 extends DFA {

        public DFA392(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 392;
            this.eot = dfa_192;
            this.eof = dfa_254;
            this.min = dfa_255;
            this.max = dfa_260;
            this.accept = dfa_257;
            this.special = dfa_269;
            this.transition = dfa_262;
        }
        public String getDescription() {
            return "10560:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA392_2 = input.LA(1);

                         
                        int index392_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA392_6 = input.LA(1);

                         
                        int index392_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA392_11 = input.LA(1);

                         
                        int index392_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA392_1 = input.LA(1);

                         
                        int index392_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA392_5 = input.LA(1);

                         
                        int index392_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA392_10 = input.LA(1);

                         
                        int index392_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA392_4 = input.LA(1);

                         
                        int index392_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA392_9 = input.LA(1);

                         
                        int index392_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA392_8 = input.LA(1);

                         
                        int index392_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA392_3 = input.LA(1);

                         
                        int index392_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA392_7 = input.LA(1);

                         
                        int index392_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 392, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_270s = "\1\2\116\uffff";
    static final String[] dfa_271s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\3\uffff\1\2\2\uffff\5\2\3\uffff\1\2\1\uffff\7\2\6\uffff\2\2\2\uffff\3\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\1\3\2\1\uffff\1\2\1\uffff\4\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final short[][] dfa_271 = unpackEncodedStringArray(dfa_271s);

    class DFA394 extends DFA {

        public DFA394(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 394;
            this.eot = dfa_113;
            this.eof = dfa_270;
            this.min = dfa_114;
            this.max = dfa_115;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_271;
        }
        public String getDescription() {
            return "10591:117: ( ( ( Asterisk ) )=> (ManyAsteriskKeyword_2_0= Asterisk ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA394_1 = input.LA(1);

                         
                        int index394_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index394_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 394, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_272s = "\116\uffff";
    static final String dfa_273s = "\1\77\115\uffff";
    static final String dfa_274s = "\1\4\20\uffff\1\0\35\uffff\1\0\36\uffff";
    static final String dfa_275s = "\1\u0095\20\uffff\1\0\35\uffff\1\0\36\uffff";
    static final String dfa_276s = "\1\uffff\20\1\1\uffff\35\1\1\uffff\17\1\1\2\16\uffff";
    static final String dfa_277s = "\1\0\20\uffff\1\1\35\uffff\1\2\36\uffff}>";
    static final String[] dfa_278s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\1\55\1\40\1\52\1\23\1\67\3\uffff\1\77\2\uffff\1\7\1\11\1\37\1\35\1\10\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\77\1\57\6\uffff\1\77\1\16\2\uffff\1\77\1\21\1\77\1\uffff\1\76\2\uffff\1\3\1\uffff\1\5\1\73\1\77\1\74\1\uffff\1\56\1\uffff\1\77\1\42\2\77\1\uffff\1\2\1\60\2\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final char[] dfa_274 = DFA.unpackEncodedStringToUnsignedChars(dfa_274s);
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final short[] dfa_276 = DFA.unpackEncodedString(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[][] dfa_278 = unpackEncodedStringArray(dfa_278s);

    class DFA395 extends DFA {

        public DFA395(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 395;
            this.eot = dfa_272;
            this.eof = dfa_273;
            this.min = dfa_274;
            this.max = dfa_275;
            this.accept = dfa_276;
            this.special = dfa_277;
            this.transition = dfa_278;
        }
        public String getDescription() {
            return "10603:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA395_0 = input.LA(1);

                         
                        int index395_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA395_0>=5 && LA395_0<=126 && (s=T2S.M_35[LA395_0-(5)])>=0) && (synpred264_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA395_0==Of) ) {s = 17;}

                        
                        else if ((LA395_0>=4 && LA395_0<=149 && (s=T2S.M_36[LA395_0-(4)])>=0) && (synpred264_InternalN4JSXParser())) { /* 30 cases */ }
                        else if ( (LA395_0==SolidusEqualsSign) ) {s = 47;}

                        
                        else if ((LA395_0>=15 && LA395_0<=140 && (s=T2S.M_37[LA395_0-(15)])>=0) && (synpred264_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA395_0==EOF||LA395_0==LessThanSignLessThanSignEqualsSign||LA395_0==PercentSignEqualsSign||(LA395_0>=AmpersandEqualsSign && LA395_0<=AsteriskEqualsSign)||LA395_0==PlusSignEqualsSign||LA395_0==HyphenMinusEqualsSign||LA395_0==CircumflexAccentEqualsSign||LA395_0==In||LA395_0==VerticalLineEqualsSign||LA395_0==Comma||LA395_0==Semicolon||(LA395_0>=EqualsSign && LA395_0<=GreaterThanSign)||LA395_0==RightCurlyBracket) ) {s = 63;}

                         
                        input.seek(index395_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA395_17 = input.LA(1);

                         
                        int index395_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index395_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA395_47 = input.LA(1);

                         
                        int index395_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index395_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 395, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_279s = "\123\uffff";
    static final String dfa_280s = "\1\2\122\uffff";
    static final String dfa_281s = "\1\4\1\0\121\uffff";
    static final String dfa_282s = "\1\u0099\1\0\121\uffff";
    static final String dfa_283s = "\2\uffff\1\2\117\uffff\1\1";
    static final String dfa_284s = "\1\uffff\1\0\121\uffff}>";
    static final String[] dfa_285s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\3\uffff\1\2\2\uffff\5\2\3\uffff\1\2\1\uffff\7\2\6\uffff\2\2\3\uffff\2\2\1\uffff\1\2\2\uffff\2\2\1\1\3\2\1\uffff\6\2\1\uffff\3\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_279 = DFA.unpackEncodedString(dfa_279s);
    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final char[] dfa_281 = DFA.unpackEncodedStringToUnsignedChars(dfa_281s);
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[][] dfa_285 = unpackEncodedStringArray(dfa_285s);

    class DFA396 extends DFA {

        public DFA396(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 396;
            this.eot = dfa_279;
            this.eof = dfa_280;
            this.min = dfa_281;
            this.max = dfa_282;
            this.accept = dfa_283;
            this.special = dfa_284;
            this.transition = dfa_285;
        }
        public String getDescription() {
            return "10671:117: ( ( ( Asterisk ) )=> (ManyAsteriskKeyword_2_0= Asterisk ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA396_1 = input.LA(1);

                         
                        int index396_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index396_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 396, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_286s = "\122\uffff";
    static final String dfa_287s = "\1\77\121\uffff";
    static final String dfa_288s = "\1\4\56\uffff\1\0\42\uffff";
    static final String dfa_289s = "\1\u0099\56\uffff\1\0\42\uffff";
    static final String dfa_290s = "\1\uffff\56\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_291s = "\1\0\56\uffff\1\1\42\uffff}>";
    static final String[] dfa_292s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\1\55\1\40\1\52\1\23\1\67\3\uffff\1\77\2\uffff\1\7\1\11\1\37\1\35\1\10\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\77\1\57\6\uffff\1\77\1\16\3\uffff\1\21\1\77\1\uffff\1\76\2\uffff\1\3\1\77\1\5\1\73\1\77\1\74\1\uffff\1\56\2\77\1\42\2\77\1\uffff\1\2\1\60\1\77\1\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44\1\uffff\1\77\1\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_286 = DFA.unpackEncodedString(dfa_286s);
    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    static final char[] dfa_288 = DFA.unpackEncodedStringToUnsignedChars(dfa_288s);
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final short[] dfa_290 = DFA.unpackEncodedString(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[][] dfa_292 = unpackEncodedStringArray(dfa_292s);

    class DFA397 extends DFA {

        public DFA397(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 397;
            this.eot = dfa_286;
            this.eof = dfa_287;
            this.min = dfa_288;
            this.max = dfa_289;
            this.accept = dfa_290;
            this.special = dfa_291;
            this.transition = dfa_292;
        }
        public String getDescription() {
            return "10683:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA397_0 = input.LA(1);

                         
                        int index397_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA397_0>=4 && LA397_0<=149 && (s=T2S.M_38[LA397_0-(4)])>=0) && (synpred266_InternalN4JSXParser())) { /* 46 cases */ }
                        else if ( (LA397_0==SolidusEqualsSign) ) {s = 47;}

                        
                        else if ((LA397_0>=15 && LA397_0<=140 && (s=T2S.M_37[LA397_0-(15)])>=0) && (synpred266_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA397_0==EOF||LA397_0==LessThanSignLessThanSignEqualsSign||LA397_0==PercentSignEqualsSign||(LA397_0>=AmpersandEqualsSign && LA397_0<=AsteriskEqualsSign)||LA397_0==PlusSignEqualsSign||LA397_0==HyphenMinusEqualsSign||LA397_0==CircumflexAccentEqualsSign||LA397_0==VerticalLineEqualsSign||LA397_0==RightParenthesis||LA397_0==Comma||(LA397_0>=Colon && LA397_0<=Semicolon)||(LA397_0>=EqualsSign && LA397_0<=GreaterThanSign)||LA397_0==RightSquareBracket||LA397_0==RightCurlyBracket||LA397_0==RULE_ML_COMMENT||LA397_0==RULE_EOL) ) {s = 63;}

                         
                        input.seek(index397_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA397_47 = input.LA(1);

                         
                        int index397_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index397_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 397, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_293s = "\136\uffff";
    static final String dfa_294s = "\1\2\135\uffff";
    static final String dfa_295s = "\1\4\1\0\134\uffff";
    static final String dfa_296s = "\1\u0095\1\0\134\uffff";
    static final String dfa_297s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_298s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_299s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final short[] dfa_294 = DFA.unpackEncodedString(dfa_294s);
    static final char[] dfa_295 = DFA.unpackEncodedStringToUnsignedChars(dfa_295s);
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[][] dfa_299 = unpackEncodedStringArray(dfa_299s);

    class DFA428 extends DFA {

        public DFA428(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 428;
            this.eot = dfa_293;
            this.eof = dfa_294;
            this.min = dfa_295;
            this.max = dfa_296;
            this.accept = dfa_297;
            this.special = dfa_298;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "11816:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA428_1 = input.LA(1);

                         
                        int index428_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSXParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index428_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 428, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_300s = "\1\4\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_301s = "\1\u0095\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_302s = "\1\uffff\1\1\30\uffff\2\4\55\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_303s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\4\uffff}>";
    static final String[] dfa_304s = {
            "\1\26\1\23\1\103\1\57\1\15\1\104\1\4\1\7\1\41\1\42\1\6\1\53\1\43\1\50\1\51\1\2\1\3\1\44\1\47\1\55\1\5\1\61\1\10\1\63\1\16\1\66\1\34\1\14\1\35\1\37\1\40\1\11\1\75\1\62\1\64\1\25\1\70\1\72\1\13\1\36\1\46\1\76\1\101\1\73\1\21\1\74\1\22\1\12\1\71\4\uffff\1\52\1\30\1\77\1\60\1\105\1\31\1\65\1\67\21\uffff\1\100\1\45\1\54\1\56\1\102\5\uffff\1\111\1\uffff\1\33\7\uffff\1\32\2\uffff\1\27\1\1\1\110\2\uffff\1\24\2\uffff\1\20\3\uffff\1\107\1\uffff\1\107\1\uffff\1\107\2\uffff\1\107\1\uffff\1\17\2\uffff\1\106\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_300 = DFA.unpackEncodedStringToUnsignedChars(dfa_300s);
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[][] dfa_304 = unpackEncodedStringArray(dfa_304s);

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_303;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "12444:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA470_0 = input.LA(1);

                         
                        int index470_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA470_0>=4 && LA470_0<=126 && (s=T2S.M_40[LA470_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA470_0==LessThanSign) && (synpred285_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA470_0==Asterisk) && (synpred285_InternalN4JSXParser())) {s = 27;}

                        
                        else if ((LA470_0>=6 && LA470_0<=129 && (s=T2S.M_41[LA470_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA470_0==RULE_DOUBLE||LA470_0==RULE_HEX_INT||LA470_0==RULE_OCTAL_INT||LA470_0==RULE_SCIENTIFIC_INT||LA470_0==RULE_INT) ) {s = 71;}

                        else if ( (LA470_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA470_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index470_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA470_2 = input.LA(1);

                         
                        int index470_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA470_3 = input.LA(1);

                         
                        int index470_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA470_4 = input.LA(1);

                         
                        int index470_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA470_5 = input.LA(1);

                         
                        int index470_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA470_6 = input.LA(1);

                         
                        int index470_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA470_7 = input.LA(1);

                         
                        int index470_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA470_8 = input.LA(1);

                         
                        int index470_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA470_9 = input.LA(1);

                         
                        int index470_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA470_10 = input.LA(1);

                         
                        int index470_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA470_11 = input.LA(1);

                         
                        int index470_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA470_12 = input.LA(1);

                         
                        int index470_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA470_13 = input.LA(1);

                         
                        int index470_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA470_14 = input.LA(1);

                         
                        int index470_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA470_15 = input.LA(1);

                         
                        int index470_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA470_16 = input.LA(1);

                         
                        int index470_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA470_17 = input.LA(1);

                         
                        int index470_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA470_18 = input.LA(1);

                         
                        int index470_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA470_19 = input.LA(1);

                         
                        int index470_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA470_20 = input.LA(1);

                         
                        int index470_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA470_21 = input.LA(1);

                         
                        int index470_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA470_22 = input.LA(1);

                         
                        int index470_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA470_23 = input.LA(1);

                         
                        int index470_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA470_24 = input.LA(1);

                         
                        int index470_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA470_25 = input.LA(1);

                         
                        int index470_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA470_28 = input.LA(1);

                         
                        int index470_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA470_29 = input.LA(1);

                         
                        int index470_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA470_30 = input.LA(1);

                         
                        int index470_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA470_31 = input.LA(1);

                         
                        int index470_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA470_32 = input.LA(1);

                         
                        int index470_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA470_33 = input.LA(1);

                         
                        int index470_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA470_34 = input.LA(1);

                         
                        int index470_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA470_35 = input.LA(1);

                         
                        int index470_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA470_36 = input.LA(1);

                         
                        int index470_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA470_37 = input.LA(1);

                         
                        int index470_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA470_38 = input.LA(1);

                         
                        int index470_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA470_39 = input.LA(1);

                         
                        int index470_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA470_40 = input.LA(1);

                         
                        int index470_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA470_41 = input.LA(1);

                         
                        int index470_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA470_42 = input.LA(1);

                         
                        int index470_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA470_43 = input.LA(1);

                         
                        int index470_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA470_44 = input.LA(1);

                         
                        int index470_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA470_45 = input.LA(1);

                         
                        int index470_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA470_46 = input.LA(1);

                         
                        int index470_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA470_47 = input.LA(1);

                         
                        int index470_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA470_48 = input.LA(1);

                         
                        int index470_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA470_49 = input.LA(1);

                         
                        int index470_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA470_50 = input.LA(1);

                         
                        int index470_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA470_51 = input.LA(1);

                         
                        int index470_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA470_52 = input.LA(1);

                         
                        int index470_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA470_53 = input.LA(1);

                         
                        int index470_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA470_54 = input.LA(1);

                         
                        int index470_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA470_55 = input.LA(1);

                         
                        int index470_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA470_56 = input.LA(1);

                         
                        int index470_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA470_57 = input.LA(1);

                         
                        int index470_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA470_58 = input.LA(1);

                         
                        int index470_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA470_59 = input.LA(1);

                         
                        int index470_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA470_60 = input.LA(1);

                         
                        int index470_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA470_61 = input.LA(1);

                         
                        int index470_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA470_62 = input.LA(1);

                         
                        int index470_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA470_63 = input.LA(1);

                         
                        int index470_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA470_64 = input.LA(1);

                         
                        int index470_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA470_65 = input.LA(1);

                         
                        int index470_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA470_66 = input.LA(1);

                         
                        int index470_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA470_67 = input.LA(1);

                         
                        int index470_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA470_68 = input.LA(1);

                         
                        int index470_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA470_69 = input.LA(1);

                         
                        int index470_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA470_70 = input.LA(1);

                         
                        int index470_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA470_71 = input.LA(1);

                         
                        int index470_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA470_72 = input.LA(1);

                         
                        int index470_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index470_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 470, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA471 extends DFA {

        public DFA471(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 471;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_303;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "12629:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA471_0 = input.LA(1);

                         
                        int index471_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA471_0>=4 && LA471_0<=126 && (s=T2S.M_40[LA471_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA471_0==LessThanSign) && (synpred288_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA471_0==Asterisk) && (synpred288_InternalN4JSXParser())) {s = 27;}

                        
                        else if ((LA471_0>=6 && LA471_0<=129 && (s=T2S.M_41[LA471_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA471_0==RULE_DOUBLE||LA471_0==RULE_HEX_INT||LA471_0==RULE_OCTAL_INT||LA471_0==RULE_SCIENTIFIC_INT||LA471_0==RULE_INT) ) {s = 71;}

                        else if ( (LA471_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA471_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index471_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA471_2 = input.LA(1);

                         
                        int index471_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA471_3 = input.LA(1);

                         
                        int index471_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA471_4 = input.LA(1);

                         
                        int index471_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA471_5 = input.LA(1);

                         
                        int index471_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA471_6 = input.LA(1);

                         
                        int index471_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA471_7 = input.LA(1);

                         
                        int index471_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA471_8 = input.LA(1);

                         
                        int index471_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA471_9 = input.LA(1);

                         
                        int index471_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA471_10 = input.LA(1);

                         
                        int index471_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA471_11 = input.LA(1);

                         
                        int index471_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA471_12 = input.LA(1);

                         
                        int index471_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA471_13 = input.LA(1);

                         
                        int index471_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA471_14 = input.LA(1);

                         
                        int index471_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA471_15 = input.LA(1);

                         
                        int index471_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA471_16 = input.LA(1);

                         
                        int index471_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA471_17 = input.LA(1);

                         
                        int index471_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA471_18 = input.LA(1);

                         
                        int index471_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA471_19 = input.LA(1);

                         
                        int index471_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA471_20 = input.LA(1);

                         
                        int index471_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA471_21 = input.LA(1);

                         
                        int index471_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA471_22 = input.LA(1);

                         
                        int index471_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA471_23 = input.LA(1);

                         
                        int index471_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA471_24 = input.LA(1);

                         
                        int index471_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA471_25 = input.LA(1);

                         
                        int index471_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA471_28 = input.LA(1);

                         
                        int index471_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA471_29 = input.LA(1);

                         
                        int index471_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA471_30 = input.LA(1);

                         
                        int index471_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA471_31 = input.LA(1);

                         
                        int index471_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA471_32 = input.LA(1);

                         
                        int index471_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA471_33 = input.LA(1);

                         
                        int index471_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA471_34 = input.LA(1);

                         
                        int index471_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA471_35 = input.LA(1);

                         
                        int index471_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA471_36 = input.LA(1);

                         
                        int index471_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA471_37 = input.LA(1);

                         
                        int index471_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA471_38 = input.LA(1);

                         
                        int index471_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA471_39 = input.LA(1);

                         
                        int index471_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA471_40 = input.LA(1);

                         
                        int index471_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA471_41 = input.LA(1);

                         
                        int index471_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA471_42 = input.LA(1);

                         
                        int index471_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA471_43 = input.LA(1);

                         
                        int index471_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA471_44 = input.LA(1);

                         
                        int index471_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA471_45 = input.LA(1);

                         
                        int index471_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA471_46 = input.LA(1);

                         
                        int index471_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA471_47 = input.LA(1);

                         
                        int index471_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA471_48 = input.LA(1);

                         
                        int index471_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA471_49 = input.LA(1);

                         
                        int index471_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA471_50 = input.LA(1);

                         
                        int index471_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA471_51 = input.LA(1);

                         
                        int index471_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA471_52 = input.LA(1);

                         
                        int index471_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA471_53 = input.LA(1);

                         
                        int index471_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA471_54 = input.LA(1);

                         
                        int index471_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA471_55 = input.LA(1);

                         
                        int index471_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA471_56 = input.LA(1);

                         
                        int index471_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA471_57 = input.LA(1);

                         
                        int index471_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA471_58 = input.LA(1);

                         
                        int index471_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA471_59 = input.LA(1);

                         
                        int index471_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA471_60 = input.LA(1);

                         
                        int index471_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA471_61 = input.LA(1);

                         
                        int index471_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA471_62 = input.LA(1);

                         
                        int index471_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA471_63 = input.LA(1);

                         
                        int index471_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA471_64 = input.LA(1);

                         
                        int index471_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA471_65 = input.LA(1);

                         
                        int index471_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA471_66 = input.LA(1);

                         
                        int index471_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA471_67 = input.LA(1);

                         
                        int index471_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA471_68 = input.LA(1);

                         
                        int index471_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA471_69 = input.LA(1);

                         
                        int index471_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA471_70 = input.LA(1);

                         
                        int index471_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA471_71 = input.LA(1);

                         
                        int index471_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA471_72 = input.LA(1);

                         
                        int index471_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index471_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 471, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_305s = "\113\uffff";
    static final String dfa_306s = "\1\4\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_307s = "\1\u0095\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_308s = "\31\uffff\2\3\55\uffff\1\1\1\2\1\4";
    static final String dfa_309s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\3\uffff}>";
    static final String[] dfa_310s = {
            "\1\25\1\22\1\102\1\56\1\14\1\103\1\3\1\6\1\40\1\41\1\5\1\52\1\42\1\47\1\50\1\1\1\2\1\43\1\46\1\54\1\4\1\60\1\7\1\62\1\15\1\65\1\33\1\13\1\34\1\36\1\37\1\10\1\74\1\61\1\63\1\24\1\67\1\71\1\12\1\35\1\45\1\75\1\100\1\72\1\20\1\73\1\21\1\11\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\7\uffff\1\32\7\uffff\1\31\2\uffff\1\26\1\uffff\1\107\2\uffff\1\23\2\uffff\1\17\3\uffff\1\106\1\uffff\1\106\1\uffff\1\106\2\uffff\1\106\1\uffff\1\16\2\uffff\1\105\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final char[] dfa_306 = DFA.unpackEncodedStringToUnsignedChars(dfa_306s);
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final short[] dfa_308 = DFA.unpackEncodedString(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[][] dfa_310 = unpackEncodedStringArray(dfa_310s);

    class DFA483 extends DFA {

        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_305;
            this.eof = dfa_305;
            this.min = dfa_306;
            this.max = dfa_307;
            this.accept = dfa_308;
            this.special = dfa_309;
            this.transition = dfa_310;
        }
        public String getDescription() {
            return "12821:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA483_0 = input.LA(1);

                         
                        int index483_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA483_0>=4 && LA483_0<=126 && (s=T2S.M_44[LA483_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA483_0==LessThanSign) && (synpred294_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA483_0==Asterisk) && (synpred294_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA483_0>=6 && LA483_0<=129 && (s=T2S.M_45[LA483_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA483_0==RULE_DOUBLE||LA483_0==RULE_HEX_INT||LA483_0==RULE_OCTAL_INT||LA483_0==RULE_SCIENTIFIC_INT||LA483_0==RULE_INT) ) {s = 70;}

                        else if ( (LA483_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index483_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA483_1 = input.LA(1);

                         
                        int index483_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA483_2 = input.LA(1);

                         
                        int index483_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA483_3 = input.LA(1);

                         
                        int index483_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA483_4 = input.LA(1);

                         
                        int index483_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA483_5 = input.LA(1);

                         
                        int index483_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA483_6 = input.LA(1);

                         
                        int index483_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA483_7 = input.LA(1);

                         
                        int index483_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA483_8 = input.LA(1);

                         
                        int index483_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA483_9 = input.LA(1);

                         
                        int index483_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA483_10 = input.LA(1);

                         
                        int index483_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA483_11 = input.LA(1);

                         
                        int index483_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA483_12 = input.LA(1);

                         
                        int index483_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA483_13 = input.LA(1);

                         
                        int index483_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA483_14 = input.LA(1);

                         
                        int index483_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA483_15 = input.LA(1);

                         
                        int index483_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA483_16 = input.LA(1);

                         
                        int index483_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA483_17 = input.LA(1);

                         
                        int index483_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA483_18 = input.LA(1);

                         
                        int index483_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA483_19 = input.LA(1);

                         
                        int index483_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA483_20 = input.LA(1);

                         
                        int index483_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA483_21 = input.LA(1);

                         
                        int index483_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA483_22 = input.LA(1);

                         
                        int index483_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA483_23 = input.LA(1);

                         
                        int index483_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA483_24 = input.LA(1);

                         
                        int index483_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA483_27 = input.LA(1);

                         
                        int index483_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA483_28 = input.LA(1);

                         
                        int index483_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA483_29 = input.LA(1);

                         
                        int index483_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA483_30 = input.LA(1);

                         
                        int index483_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA483_31 = input.LA(1);

                         
                        int index483_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA483_32 = input.LA(1);

                         
                        int index483_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA483_33 = input.LA(1);

                         
                        int index483_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA483_34 = input.LA(1);

                         
                        int index483_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA483_35 = input.LA(1);

                         
                        int index483_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA483_36 = input.LA(1);

                         
                        int index483_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA483_37 = input.LA(1);

                         
                        int index483_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA483_38 = input.LA(1);

                         
                        int index483_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA483_39 = input.LA(1);

                         
                        int index483_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA483_40 = input.LA(1);

                         
                        int index483_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA483_41 = input.LA(1);

                         
                        int index483_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA483_42 = input.LA(1);

                         
                        int index483_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA483_43 = input.LA(1);

                         
                        int index483_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA483_44 = input.LA(1);

                         
                        int index483_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA483_45 = input.LA(1);

                         
                        int index483_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA483_46 = input.LA(1);

                         
                        int index483_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA483_47 = input.LA(1);

                         
                        int index483_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA483_48 = input.LA(1);

                         
                        int index483_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA483_49 = input.LA(1);

                         
                        int index483_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA483_50 = input.LA(1);

                         
                        int index483_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA483_51 = input.LA(1);

                         
                        int index483_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA483_52 = input.LA(1);

                         
                        int index483_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA483_53 = input.LA(1);

                         
                        int index483_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA483_54 = input.LA(1);

                         
                        int index483_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA483_55 = input.LA(1);

                         
                        int index483_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA483_56 = input.LA(1);

                         
                        int index483_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA483_57 = input.LA(1);

                         
                        int index483_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA483_58 = input.LA(1);

                         
                        int index483_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA483_59 = input.LA(1);

                         
                        int index483_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA483_60 = input.LA(1);

                         
                        int index483_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA483_61 = input.LA(1);

                         
                        int index483_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA483_62 = input.LA(1);

                         
                        int index483_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA483_63 = input.LA(1);

                         
                        int index483_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA483_64 = input.LA(1);

                         
                        int index483_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA483_65 = input.LA(1);

                         
                        int index483_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA483_66 = input.LA(1);

                         
                        int index483_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA483_67 = input.LA(1);

                         
                        int index483_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA483_68 = input.LA(1);

                         
                        int index483_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA483_69 = input.LA(1);

                         
                        int index483_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA483_70 = input.LA(1);

                         
                        int index483_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA483_71 = input.LA(1);

                         
                        int index483_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 483, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_311s = "\1\2\115\uffff";
    static final String dfa_312s = "\1\4\1\0\114\uffff";
    static final String dfa_313s = "\1\u0095\1\0\114\uffff";
    static final String dfa_314s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_315s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_316s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_311 = DFA.unpackEncodedString(dfa_311s);
    static final char[] dfa_312 = DFA.unpackEncodedStringToUnsignedChars(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);

    class DFA473 extends DFA {

        public DFA473(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 473;
            this.eot = dfa_272;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "12830:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA473_1 = input.LA(1);

                         
                        int index473_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index473_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 473, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA476 extends DFA {

        public DFA476(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 476;
            this.eot = dfa_272;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "13052:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA476_1 = input.LA(1);

                         
                        int index476_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index476_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 476, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_318s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_319s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_320s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_317 = DFA.unpackEncodedStringToUnsignedChars(dfa_317s);
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final short[][] dfa_320 = unpackEncodedStringArray(dfa_320s);

    class DFA478 extends DFA {

        public DFA478(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 478;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 13080:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA480 extends DFA {

        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "13085:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA495 extends DFA {

        public DFA495(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 495;
            this.eot = dfa_305;
            this.eof = dfa_305;
            this.min = dfa_306;
            this.max = dfa_307;
            this.accept = dfa_308;
            this.special = dfa_309;
            this.transition = dfa_310;
        }
        public String getDescription() {
            return "13122:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA495_0 = input.LA(1);

                         
                        int index495_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA495_0>=4 && LA495_0<=126 && (s=T2S.M_44[LA495_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA495_0==LessThanSign) && (synpred302_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA495_0==Asterisk) && (synpred302_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA495_0>=6 && LA495_0<=129 && (s=T2S.M_45[LA495_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA495_0==RULE_DOUBLE||LA495_0==RULE_HEX_INT||LA495_0==RULE_OCTAL_INT||LA495_0==RULE_SCIENTIFIC_INT||LA495_0==RULE_INT) ) {s = 70;}

                        else if ( (LA495_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index495_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA495_1 = input.LA(1);

                         
                        int index495_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA495_2 = input.LA(1);

                         
                        int index495_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA495_3 = input.LA(1);

                         
                        int index495_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA495_4 = input.LA(1);

                         
                        int index495_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA495_5 = input.LA(1);

                         
                        int index495_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA495_6 = input.LA(1);

                         
                        int index495_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA495_7 = input.LA(1);

                         
                        int index495_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA495_8 = input.LA(1);

                         
                        int index495_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA495_9 = input.LA(1);

                         
                        int index495_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA495_10 = input.LA(1);

                         
                        int index495_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA495_11 = input.LA(1);

                         
                        int index495_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA495_12 = input.LA(1);

                         
                        int index495_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA495_13 = input.LA(1);

                         
                        int index495_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA495_14 = input.LA(1);

                         
                        int index495_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA495_15 = input.LA(1);

                         
                        int index495_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA495_16 = input.LA(1);

                         
                        int index495_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA495_17 = input.LA(1);

                         
                        int index495_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA495_18 = input.LA(1);

                         
                        int index495_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA495_19 = input.LA(1);

                         
                        int index495_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA495_20 = input.LA(1);

                         
                        int index495_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA495_21 = input.LA(1);

                         
                        int index495_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA495_22 = input.LA(1);

                         
                        int index495_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA495_23 = input.LA(1);

                         
                        int index495_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA495_24 = input.LA(1);

                         
                        int index495_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA495_27 = input.LA(1);

                         
                        int index495_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA495_28 = input.LA(1);

                         
                        int index495_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA495_29 = input.LA(1);

                         
                        int index495_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA495_30 = input.LA(1);

                         
                        int index495_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA495_31 = input.LA(1);

                         
                        int index495_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA495_32 = input.LA(1);

                         
                        int index495_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA495_33 = input.LA(1);

                         
                        int index495_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA495_34 = input.LA(1);

                         
                        int index495_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA495_35 = input.LA(1);

                         
                        int index495_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA495_36 = input.LA(1);

                         
                        int index495_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA495_37 = input.LA(1);

                         
                        int index495_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA495_38 = input.LA(1);

                         
                        int index495_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA495_39 = input.LA(1);

                         
                        int index495_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA495_40 = input.LA(1);

                         
                        int index495_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA495_41 = input.LA(1);

                         
                        int index495_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA495_42 = input.LA(1);

                         
                        int index495_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA495_43 = input.LA(1);

                         
                        int index495_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA495_44 = input.LA(1);

                         
                        int index495_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA495_45 = input.LA(1);

                         
                        int index495_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA495_46 = input.LA(1);

                         
                        int index495_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA495_47 = input.LA(1);

                         
                        int index495_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA495_48 = input.LA(1);

                         
                        int index495_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA495_49 = input.LA(1);

                         
                        int index495_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA495_50 = input.LA(1);

                         
                        int index495_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA495_51 = input.LA(1);

                         
                        int index495_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA495_52 = input.LA(1);

                         
                        int index495_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA495_53 = input.LA(1);

                         
                        int index495_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA495_54 = input.LA(1);

                         
                        int index495_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA495_55 = input.LA(1);

                         
                        int index495_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA495_56 = input.LA(1);

                         
                        int index495_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA495_57 = input.LA(1);

                         
                        int index495_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA495_58 = input.LA(1);

                         
                        int index495_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA495_59 = input.LA(1);

                         
                        int index495_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA495_60 = input.LA(1);

                         
                        int index495_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA495_61 = input.LA(1);

                         
                        int index495_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA495_62 = input.LA(1);

                         
                        int index495_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA495_63 = input.LA(1);

                         
                        int index495_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA495_64 = input.LA(1);

                         
                        int index495_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA495_65 = input.LA(1);

                         
                        int index495_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA495_66 = input.LA(1);

                         
                        int index495_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA495_67 = input.LA(1);

                         
                        int index495_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA495_68 = input.LA(1);

                         
                        int index495_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA495_69 = input.LA(1);

                         
                        int index495_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA495_70 = input.LA(1);

                         
                        int index495_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA495_71 = input.LA(1);

                         
                        int index495_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index495_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 495, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_321s = "\1\4\1\0\113\uffff";
    static final String dfa_322s = "\1\u0095\1\0\113\uffff";
    static final String dfa_323s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_324s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_325s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_321 = DFA.unpackEncodedStringToUnsignedChars(dfa_321s);
    static final char[] dfa_322 = DFA.unpackEncodedStringToUnsignedChars(dfa_322s);
    static final short[] dfa_323 = DFA.unpackEncodedString(dfa_323s);
    static final short[] dfa_324 = DFA.unpackEncodedString(dfa_324s);
    static final short[][] dfa_325 = unpackEncodedStringArray(dfa_325s);

    class DFA485 extends DFA {

        public DFA485(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 485;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_321;
            this.max = dfa_322;
            this.accept = dfa_323;
            this.special = dfa_324;
            this.transition = dfa_325;
        }
        public String getDescription() {
            return "13131:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA485_1 = input.LA(1);

                         
                        int index485_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index485_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 485, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA488 extends DFA {

        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_321;
            this.max = dfa_322;
            this.accept = dfa_323;
            this.special = dfa_324;
            this.transition = dfa_325;
        }
        public String getDescription() {
            return "13353:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA488_1 = input.LA(1);

                         
                        int index488_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index488_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 488, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA490 extends DFA {

        public DFA490(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 490;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 13381:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA492 extends DFA {

        public DFA492(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 492;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "13386:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_326s = "\2\uffff\10\1\1\uffff";
    static final String dfa_327s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_328s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\22\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_326 = DFA.unpackEncodedString(dfa_326s);
    static final char[] dfa_327 = DFA.unpackEncodedStringToUnsignedChars(dfa_327s);
    static final short[][] dfa_328 = unpackEncodedStringArray(dfa_328s);

    class DFA496 extends DFA {

        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_24;
            this.eof = dfa_326;
            this.min = dfa_317;
            this.max = dfa_327;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "()* loopback of 13422:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_329s = "\1\uffff\6\15\1\uffff\5\15\1\uffff";
    static final String dfa_330s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff";
    static final String[] dfa_331s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            ""
    };
    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final char[] dfa_330 = DFA.unpackEncodedStringToUnsignedChars(dfa_330s);
    static final short[][] dfa_331 = unpackEncodedStringArray(dfa_331s);

    class DFA497 extends DFA {

        public DFA497(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 497;
            this.eot = dfa_192;
            this.eof = dfa_329;
            this.min = dfa_193;
            this.max = dfa_330;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_331;
        }
        public String getDescription() {
            return "13426:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA500 extends DFA {

        public DFA500(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 500;
            this.eot = dfa_24;
            this.eof = dfa_326;
            this.min = dfa_317;
            this.max = dfa_327;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "()* loopback of 13450:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA501 extends DFA {

        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_192;
            this.eof = dfa_329;
            this.min = dfa_193;
            this.max = dfa_330;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_331;
        }
        public String getDescription() {
            return "13454:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA504 extends DFA {

        public DFA504(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 504;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 13537:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA506 extends DFA {

        public DFA506(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 506;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "13542:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA509 extends DFA {

        public DFA509(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 509;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 13597:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA511 extends DFA {

        public DFA511(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 511;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "13602:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA519 extends DFA {

        public DFA519(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 519;
            this.eot = dfa_272;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "13712:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA519_1 = input.LA(1);

                         
                        int index519_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index519_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 519, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA521 extends DFA {

        public DFA521(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 521;
            this.eot = dfa_272;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "13735:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA521_1 = input.LA(1);

                         
                        int index521_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index521_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 521, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA523 extends DFA {

        public DFA523(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 523;
            this.eot = dfa_272;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "13767:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA523_1 = input.LA(1);

                         
                        int index523_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index523_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 523, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA526 extends DFA {

        public DFA526(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 526;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_321;
            this.max = dfa_322;
            this.accept = dfa_323;
            this.special = dfa_324;
            this.transition = dfa_325;
        }
        public String getDescription() {
            return "13794:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA526_1 = input.LA(1);

                         
                        int index526_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index526_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 526, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA533 extends DFA {

        public DFA533(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 533;
            this.eot = dfa_272;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "14201:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA533_1 = input.LA(1);

                         
                        int index533_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index533_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 533, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA536 extends DFA {

        public DFA536(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 536;
            this.eot = dfa_180;
            this.eof = dfa_180;
            this.min = dfa_321;
            this.max = dfa_322;
            this.accept = dfa_323;
            this.special = dfa_324;
            this.transition = dfa_325;
        }
        public String getDescription() {
            return "14434:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA536_1 = input.LA(1);

                         
                        int index536_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index536_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 536, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_332s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_333s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final short[][] dfa_333 = unpackEncodedStringArray(dfa_333s);

    class DFA546 extends DFA {

        public DFA546(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 546;
            this.eot = dfa_174;
            this.eof = dfa_174;
            this.min = dfa_175;
            this.max = dfa_332;
            this.accept = dfa_177;
            this.special = dfa_178;
            this.transition = dfa_333;
        }
        public String getDescription() {
            return "()* loopback of 14555:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_334s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_334 = unpackEncodedStringArray(dfa_334s);

    class DFA552 extends DFA {

        public DFA552(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 552;
            this.eot = dfa_174;
            this.eof = dfa_174;
            this.min = dfa_175;
            this.max = dfa_332;
            this.accept = dfa_177;
            this.special = dfa_178;
            this.transition = dfa_334;
        }
        public String getDescription() {
            return "()* loopback of 14591:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_335s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_336s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_337s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_338s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_339s = "\1\21\1\11\40\uffff\1\22\4\uffff\1\15\1\23\1\26\1\31\1\0\1\3\1\6\1\12\1\16\1\24\1\27\1\32\1\1\1\4\1\7\1\13\1\17\1\25\1\30\1\33\1\2\1\5\1\10\1\14\1\20\5\uffff}>";
    static final String[] dfa_340s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_335 = DFA.unpackEncodedString(dfa_335s);
    static final char[] dfa_336 = DFA.unpackEncodedStringToUnsignedChars(dfa_336s);
    static final char[] dfa_337 = DFA.unpackEncodedStringToUnsignedChars(dfa_337s);
    static final short[] dfa_338 = DFA.unpackEncodedString(dfa_338s);
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final short[][] dfa_340 = unpackEncodedStringArray(dfa_340s);

    class DFA556 extends DFA {

        public DFA556(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 556;
            this.eot = dfa_234;
            this.eof = dfa_335;
            this.min = dfa_336;
            this.max = dfa_337;
            this.accept = dfa_338;
            this.special = dfa_339;
            this.transition = dfa_340;
        }
        public String getDescription() {
            return "14624:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA556_43 = input.LA(1);

                         
                        int index556_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_43==EOF||LA556_43==Comma||LA556_43==EqualsSign||LA556_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_43==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_43);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA556_51 = input.LA(1);

                         
                        int index556_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_51==EOF||LA556_51==Comma||LA556_51==EqualsSign||LA556_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_51==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA556_59 = input.LA(1);

                         
                        int index556_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_59==EOF||LA556_59==Comma||LA556_59==EqualsSign||LA556_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_59==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_59);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA556_44 = input.LA(1);

                         
                        int index556_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_44==EOF||LA556_44==Comma||LA556_44==EqualsSign||LA556_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_44==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA556_52 = input.LA(1);

                         
                        int index556_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_52==EOF||LA556_52==Comma||LA556_52==EqualsSign||LA556_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_52==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_52);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA556_60 = input.LA(1);

                         
                        int index556_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_60==EOF||LA556_60==Comma||LA556_60==EqualsSign||LA556_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_60==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_60);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA556_45 = input.LA(1);

                         
                        int index556_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_45==EOF||LA556_45==Comma||LA556_45==EqualsSign||LA556_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_45==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA556_53 = input.LA(1);

                         
                        int index556_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_53==EOF||LA556_53==Comma||LA556_53==EqualsSign||LA556_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_53==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_53);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA556_61 = input.LA(1);

                         
                        int index556_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_61==EOF||LA556_61==Comma||LA556_61==EqualsSign||LA556_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_61==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_61);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA556_1 = input.LA(1);

                         
                        int index556_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_1==EOF||LA556_1==Comma||LA556_1==EqualsSign||LA556_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_1==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA556_46 = input.LA(1);

                         
                        int index556_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_46==EOF||LA556_46==Comma||LA556_46==EqualsSign||LA556_46==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_46==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_46);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA556_54 = input.LA(1);

                         
                        int index556_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_54==EOF||LA556_54==Comma||LA556_54==EqualsSign||LA556_54==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_54==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_54);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA556_62 = input.LA(1);

                         
                        int index556_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_62==EOF||LA556_62==Comma||LA556_62==EqualsSign||LA556_62==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_62==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_62);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA556_39 = input.LA(1);

                         
                        int index556_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_39==EOF||LA556_39==Comma||LA556_39==EqualsSign||LA556_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_39==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_39);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA556_47 = input.LA(1);

                         
                        int index556_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_47==EOF||LA556_47==Comma||LA556_47==EqualsSign||LA556_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_47==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA556_55 = input.LA(1);

                         
                        int index556_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_55==EOF||LA556_55==Comma||LA556_55==EqualsSign||LA556_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_55==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_55);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA556_63 = input.LA(1);

                         
                        int index556_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_63==EOF||LA556_63==Comma||LA556_63==EqualsSign||LA556_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_63==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_63);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA556_0 = input.LA(1);

                         
                        int index556_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA556_0>=7 && LA556_0<=126 && (s=T2S.M_48[LA556_0-(7)])>=0) && (synpred327_InternalN4JSXParser())) { /* 33 cases */ }
                        else if ( (LA556_0==Yield) ) {s = 34;}

                        else if ( (LA556_0==Null) && (synpred327_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA556_0==True) && (synpred327_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA556_0==False) && (synpred327_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA556_0==Enum) && (synpred327_InternalN4JSXParser())) {s = 38;}

                        
                        else if ((LA556_0>=4 && LA556_0<=86 && (s=T2S.M_49[LA556_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA556_0==RULE_STRING) && (synpred327_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA556_0==RULE_DOUBLE||LA556_0==RULE_HEX_INT||LA556_0==RULE_OCTAL_INT||LA556_0==RULE_SCIENTIFIC_INT||LA556_0==RULE_INT) && (synpred327_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA556_0==LeftSquareBracket) && (synpred327_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA556_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index556_0);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA556_34 = input.LA(1);

                         
                        int index556_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_34==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA556_34==EOF||LA556_34==Comma||LA556_34==EqualsSign||LA556_34==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index556_34);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA556_40 = input.LA(1);

                         
                        int index556_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_40==EOF||LA556_40==Comma||LA556_40==EqualsSign||LA556_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_40==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_40);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA556_48 = input.LA(1);

                         
                        int index556_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_48==EOF||LA556_48==Comma||LA556_48==EqualsSign||LA556_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_48==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_48);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA556_56 = input.LA(1);

                         
                        int index556_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_56==EOF||LA556_56==Comma||LA556_56==EqualsSign||LA556_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_56==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_56);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA556_41 = input.LA(1);

                         
                        int index556_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_41==EOF||LA556_41==Comma||LA556_41==EqualsSign||LA556_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_41==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_41);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA556_49 = input.LA(1);

                         
                        int index556_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_49==EOF||LA556_49==Comma||LA556_49==EqualsSign||LA556_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_49==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_49);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA556_57 = input.LA(1);

                         
                        int index556_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_57==EOF||LA556_57==Comma||LA556_57==EqualsSign||LA556_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_57==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_57);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA556_42 = input.LA(1);

                         
                        int index556_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_42==EOF||LA556_42==Comma||LA556_42==EqualsSign||LA556_42==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_42==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_42);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA556_50 = input.LA(1);

                         
                        int index556_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_50==EOF||LA556_50==Comma||LA556_50==EqualsSign||LA556_50==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_50==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_50);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA556_58 = input.LA(1);

                         
                        int index556_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA556_58==EOF||LA556_58==Comma||LA556_58==EqualsSign||LA556_58==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA556_58==Colon) && (synpred327_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index556_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 556, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_341s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_342s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_343s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_344s = "\1\16\1\6\45\uffff\1\12\1\17\1\22\1\25\1\30\1\0\1\3\1\7\1\13\1\20\1\23\1\26\1\31\1\1\1\4\1\10\1\14\1\21\1\24\1\27\1\32\1\2\1\5\1\11\1\15\5\uffff}>";
    static final String[] dfa_345s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_341 = DFA.unpackEncodedStringToUnsignedChars(dfa_341s);
    static final char[] dfa_342 = DFA.unpackEncodedStringToUnsignedChars(dfa_342s);
    static final short[] dfa_343 = DFA.unpackEncodedString(dfa_343s);
    static final short[] dfa_344 = DFA.unpackEncodedString(dfa_344s);
    static final short[][] dfa_345 = unpackEncodedStringArray(dfa_345s);

    class DFA557 extends DFA {

        public DFA557(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 557;
            this.eot = dfa_234;
            this.eof = dfa_234;
            this.min = dfa_341;
            this.max = dfa_342;
            this.accept = dfa_343;
            this.special = dfa_344;
            this.transition = dfa_345;
        }
        public String getDescription() {
            return "14655:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA557_44 = input.LA(1);

                         
                        int index557_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_44==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_44==Comma||LA557_44==EqualsSign||LA557_44==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA557_52 = input.LA(1);

                         
                        int index557_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_52==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_52==Comma||LA557_52==EqualsSign||LA557_52==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_52);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA557_60 = input.LA(1);

                         
                        int index557_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_60==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_60==Comma||LA557_60==EqualsSign||LA557_60==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_60);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA557_45 = input.LA(1);

                         
                        int index557_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_45==Comma||LA557_45==EqualsSign||LA557_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA557_45==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index557_45);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA557_53 = input.LA(1);

                         
                        int index557_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_53==Comma||LA557_53==EqualsSign||LA557_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA557_53==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index557_53);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA557_61 = input.LA(1);

                         
                        int index557_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_61==Comma||LA557_61==EqualsSign||LA557_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA557_61==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index557_61);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA557_1 = input.LA(1);

                         
                        int index557_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_1==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_1==Comma||LA557_1==EqualsSign||LA557_1==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA557_46 = input.LA(1);

                         
                        int index557_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_46==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_46==Comma||LA557_46==EqualsSign||LA557_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA557_54 = input.LA(1);

                         
                        int index557_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_54==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_54==Comma||LA557_54==EqualsSign||LA557_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_54);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA557_62 = input.LA(1);

                         
                        int index557_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_62==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_62==Comma||LA557_62==EqualsSign||LA557_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_62);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA557_39 = input.LA(1);

                         
                        int index557_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_39==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_39==Comma||LA557_39==EqualsSign||LA557_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_39);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA557_47 = input.LA(1);

                         
                        int index557_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_47==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_47==Comma||LA557_47==EqualsSign||LA557_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA557_55 = input.LA(1);

                         
                        int index557_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_55==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_55==Comma||LA557_55==EqualsSign||LA557_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA557_63 = input.LA(1);

                         
                        int index557_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_63==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_63==Comma||LA557_63==EqualsSign||LA557_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_63);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA557_0 = input.LA(1);

                         
                        int index557_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA557_0>=7 && LA557_0<=126 && (s=T2S.M_50[LA557_0-(7)])>=0) && (synpred328_InternalN4JSXParser())) { /* 38 cases */ }
                        
                        else if ((LA557_0>=4 && LA557_0<=86 && (s=T2S.M_49[LA557_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA557_0==RULE_STRING) && (synpred328_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA557_0==RULE_DOUBLE||LA557_0==RULE_HEX_INT||LA557_0==RULE_OCTAL_INT||LA557_0==RULE_SCIENTIFIC_INT||LA557_0==RULE_INT) && (synpred328_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA557_0==LeftSquareBracket) && (synpred328_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA557_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index557_0);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA557_40 = input.LA(1);

                         
                        int index557_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_40==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_40==Comma||LA557_40==EqualsSign||LA557_40==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_40);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA557_48 = input.LA(1);

                         
                        int index557_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_48==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_48==Comma||LA557_48==EqualsSign||LA557_48==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_48);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA557_56 = input.LA(1);

                         
                        int index557_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_56==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_56==Comma||LA557_56==EqualsSign||LA557_56==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA557_41 = input.LA(1);

                         
                        int index557_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_41==Comma||LA557_41==EqualsSign||LA557_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA557_41==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index557_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA557_49 = input.LA(1);

                         
                        int index557_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_49==Comma||LA557_49==EqualsSign||LA557_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA557_49==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index557_49);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA557_57 = input.LA(1);

                         
                        int index557_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_57==Comma||LA557_57==EqualsSign||LA557_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA557_57==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index557_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA557_42 = input.LA(1);

                         
                        int index557_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_42==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_42==Comma||LA557_42==EqualsSign||LA557_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_42);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA557_50 = input.LA(1);

                         
                        int index557_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_50==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_50==Comma||LA557_50==EqualsSign||LA557_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA557_58 = input.LA(1);

                         
                        int index557_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_58==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_58==Comma||LA557_58==EqualsSign||LA557_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_58);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA557_43 = input.LA(1);

                         
                        int index557_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_43==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_43==Comma||LA557_43==EqualsSign||LA557_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA557_51 = input.LA(1);

                         
                        int index557_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_51==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_51==Comma||LA557_51==EqualsSign||LA557_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA557_59 = input.LA(1);

                         
                        int index557_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA557_59==Colon) && (synpred328_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA557_59==Comma||LA557_59==EqualsSign||LA557_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index557_59);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 557, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_346s = "\23\uffff";
    static final String dfa_347s = "\1\4\1\0\21\uffff";
    static final String dfa_348s = "\1\176\1\0\21\uffff";
    static final String dfa_349s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_350s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_351s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\14\uffff\1\3\1\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final char[] dfa_347 = DFA.unpackEncodedStringToUnsignedChars(dfa_347s);
    static final char[] dfa_348 = DFA.unpackEncodedStringToUnsignedChars(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final short[][] dfa_351 = unpackEncodedStringArray(dfa_351s);

    class DFA574 extends DFA {

        public DFA574(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 574;
            this.eot = dfa_346;
            this.eof = dfa_346;
            this.min = dfa_347;
            this.max = dfa_348;
            this.accept = dfa_349;
            this.special = dfa_350;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "15070:1: ( ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=> (LeftParenthesisKeyword_0_0_0_1= LeftParenthesis TAnonymousFormalParameterListParserRuleCall_0_0_0_2= ruleTAnonymousFormalParameterList RightParenthesisKeyword_0_0_0_3= RightParenthesis EqualsSignGreaterThanSignKeyword_0_0_0_4= EqualsSignGreaterThanSign ) ) ( (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0= rulePrimaryTypeExpression ) ) ) | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA574_1 = input.LA(1);

                         
                        int index574_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_InternalN4JSXParser()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index574_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 574, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_352s = "\174\uffff";
    static final String dfa_353s = "\1\2\173\uffff";
    static final String dfa_354s = "\1\4\1\0\172\uffff";
    static final String dfa_355s = "\1\u0099\1\0\172\uffff";
    static final String dfa_356s = "\2\uffff\1\2\170\uffff\1\1";
    static final String dfa_357s = "\1\uffff\1\0\172\uffff}>";
    static final String[] dfa_358s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_352 = DFA.unpackEncodedString(dfa_352s);
    static final short[] dfa_353 = DFA.unpackEncodedString(dfa_353s);
    static final char[] dfa_354 = DFA.unpackEncodedStringToUnsignedChars(dfa_354s);
    static final char[] dfa_355 = DFA.unpackEncodedStringToUnsignedChars(dfa_355s);
    static final short[] dfa_356 = DFA.unpackEncodedString(dfa_356s);
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[][] dfa_358 = unpackEncodedStringArray(dfa_358s);

    class DFA578 extends DFA {

        public DFA578(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 578;
            this.eot = dfa_352;
            this.eof = dfa_353;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "15161:2: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA578_1 = input.LA(1);

                         
                        int index578_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index578_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 578, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_359s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_360s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_361s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String[] dfa_362s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\7\16\uffff\1\3\2\uffff\1\6\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_359 = DFA.unpackEncodedStringToUnsignedChars(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final short[] dfa_361 = DFA.unpackEncodedString(dfa_361s);
    static final short[][] dfa_362 = unpackEncodedStringArray(dfa_362s);

    class DFA581 extends DFA {

        public DFA581(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 581;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_55;
            this.transition = dfa_362;
        }
        public String getDescription() {
            return "15226:1: (ParameterizedTypeRefParserRuleCall_0= ruleParameterizedTypeRef | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | ThisTypeRefParserRuleCall_2= ruleThisTypeRef | TypeTypeRefParserRuleCall_3= ruleTypeTypeRef | FunctionTypeExpressionOLDParserRuleCall_4= ruleFunctionTypeExpressionOLD | ArrowFunctionTypeExpressionParserRuleCall_5= ruleArrowFunctionTypeExpression | UnionTypeExpressionOLDParserRuleCall_6= ruleUnionTypeExpressionOLD | IntersectionTypeExpressionOLDParserRuleCall_7= ruleIntersectionTypeExpressionOLD )";
        }
    }
    static final String dfa_363s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_364s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_365s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_366s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_367s = "\1\0\1\2\12\uffff\1\3\1\uffff\1\4\1\6\1\5\1\7\1\1\1\10\1\11\11\uffff}>";
    static final String[] dfa_368s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_363 = DFA.unpackEncodedString(dfa_363s);
    static final char[] dfa_364 = DFA.unpackEncodedStringToUnsignedChars(dfa_364s);
    static final char[] dfa_365 = DFA.unpackEncodedStringToUnsignedChars(dfa_365s);
    static final short[] dfa_366 = DFA.unpackEncodedString(dfa_366s);
    static final short[] dfa_367 = DFA.unpackEncodedString(dfa_367s);
    static final short[][] dfa_368 = unpackEncodedStringArray(dfa_368s);

    class DFA592 extends DFA {

        public DFA592(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 592;
            this.eot = dfa_57;
            this.eof = dfa_363;
            this.min = dfa_364;
            this.max = dfa_365;
            this.accept = dfa_366;
            this.special = dfa_367;
            this.transition = dfa_368;
        }
        public String getDescription() {
            return "15449:3: ( ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_0_0= ruleBindingIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA592_0 = input.LA(1);

                         
                        int index592_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA592_0>=11 && LA592_0<=126 && (s=T2S.M_52[LA592_0-(11)])>=0) && (synpred337_InternalN4JSXParser())) { /* 11 cases */ }
                        else if ( (LA592_0==Constructor) ) {s = 12;}

                        else if ( (LA592_0==Of) && (synpred337_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA592_0==Target) ) {s = 14;}

                        else if ( (LA592_0==Type) ) {s = 15;}

                        else if ( (LA592_0==Union) ) {s = 16;}

                        else if ( (LA592_0==Intersection) ) {s = 17;}

                        else if ( (LA592_0==This) ) {s = 18;}

                        else if ( (LA592_0==Promisify) ) {s = 19;}

                        else if ( (LA592_0==Await) ) {s = 20;}

                        else if ( (LA592_0==Async) && (synpred337_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA592_0==Implements) && (synpred337_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA592_0==Interface) && (synpred337_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA592_0==Private) && (synpred337_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA592_0==Protected) && (synpred337_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA592_0==Public) && (synpred337_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA592_0==Out) && (synpred337_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA592_0==This_1||LA592_0==Void||LA592_0==LeftParenthesis||LA592_0==QuestionMark||LA592_0==LeftSquareBracket||LA592_0==LeftCurlyBracket||LA592_0==Tilde) ) {s = 28;}

                         
                        input.seek(index592_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA592_18 = input.LA(1);

                         
                        int index592_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_18==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA592_18==EOF||LA592_18==Ampersand||LA592_18==RightParenthesis||(LA592_18>=PlusSign && LA592_18<=Comma)||LA592_18==LessThanSign||LA592_18==QuestionMark||LA592_18==VerticalLine) ) {s = 28;}

                         
                        input.seek(index592_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA592_1 = input.LA(1);

                         
                        int index592_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_1==EOF||LA592_1==Ampersand||LA592_1==RightParenthesis||(LA592_1>=PlusSign && LA592_1<=Comma)||LA592_1==FullStop||LA592_1==LessThanSign||LA592_1==QuestionMark||LA592_1==VerticalLine) ) {s = 28;}

                        else if ( (LA592_1==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index592_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA592_12 = input.LA(1);

                         
                        int index592_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA592_12==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index592_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA592_14 = input.LA(1);

                         
                        int index592_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_14==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA592_14==EOF||LA592_14==Ampersand||LA592_14==RightParenthesis||(LA592_14>=PlusSign && LA592_14<=Comma)||LA592_14==LessThanSign||LA592_14==QuestionMark||LA592_14==VerticalLine) ) {s = 28;}

                         
                        input.seek(index592_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA592_16 = input.LA(1);

                         
                        int index592_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_16==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA592_16==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index592_16);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA592_15 = input.LA(1);

                         
                        int index592_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_15==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA592_15==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index592_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA592_17 = input.LA(1);

                         
                        int index592_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_17==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA592_17==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index592_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA592_19 = input.LA(1);

                         
                        int index592_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_19==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA592_19==EOF||LA592_19==Ampersand||LA592_19==RightParenthesis||(LA592_19>=PlusSign && LA592_19<=Comma)||LA592_19==LessThanSign||LA592_19==QuestionMark||LA592_19==VerticalLine) ) {s = 28;}

                         
                        input.seek(index592_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA592_20 = input.LA(1);

                         
                        int index592_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA592_20==EOF||LA592_20==Ampersand||LA592_20==RightParenthesis||(LA592_20>=PlusSign && LA592_20<=Comma)||LA592_20==LessThanSign||LA592_20==QuestionMark||LA592_20==VerticalLine) ) {s = 28;}

                        else if ( (LA592_20==Colon) && (synpred337_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index592_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 592, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_369s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_369 = unpackEncodedStringArray(dfa_369s);

    class DFA597 extends DFA {

        public DFA597(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 597;
            this.eot = dfa_352;
            this.eof = dfa_353;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_369;
        }
        public String getDescription() {
            return "15568:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA597_1 = input.LA(1);

                         
                        int index597_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index597_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 597, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA599 extends DFA {

        public DFA599(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 599;
            this.eot = dfa_352;
            this.eof = dfa_353;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_369;
        }
        public String getDescription() {
            return "15636:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA599_1 = input.LA(1);

                         
                        int index599_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index599_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 599, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_370s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_371s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_372s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_373s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_374s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_370 = DFA.unpackEncodedStringToUnsignedChars(dfa_370s);
    static final char[] dfa_371 = DFA.unpackEncodedStringToUnsignedChars(dfa_371s);
    static final short[] dfa_372 = DFA.unpackEncodedString(dfa_372s);
    static final short[] dfa_373 = DFA.unpackEncodedString(dfa_373s);
    static final short[][] dfa_374 = unpackEncodedStringArray(dfa_374s);

    class DFA603 extends DFA {

        public DFA603(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 603;
            this.eot = dfa_227;
            this.eof = dfa_227;
            this.min = dfa_370;
            this.max = dfa_371;
            this.accept = dfa_372;
            this.special = dfa_373;
            this.transition = dfa_374;
        }
        public String getDescription() {
            return "15689:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA603_0 = input.LA(1);

                         
                        int index603_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA603_0==Get) ) {s = 1;}

                        else if ( (LA603_0==Set) ) {s = 2;}

                        else if ( (LA603_0==LessThanSign) && (synpred342_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA603_0>=4 && LA603_0<=126 && (s=T2S.M_53[LA603_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index603_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA603_1 = input.LA(1);

                         
                        int index603_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA603_2 = input.LA(1);

                         
                        int index603_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSXParser()) ) {s = 67;}

                        else if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA603_4 = input.LA(1);

                         
                        int index603_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA603_5 = input.LA(1);

                         
                        int index603_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA603_6 = input.LA(1);

                         
                        int index603_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA603_7 = input.LA(1);

                         
                        int index603_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA603_8 = input.LA(1);

                         
                        int index603_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA603_9 = input.LA(1);

                         
                        int index603_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA603_10 = input.LA(1);

                         
                        int index603_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA603_11 = input.LA(1);

                         
                        int index603_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA603_12 = input.LA(1);

                         
                        int index603_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA603_13 = input.LA(1);

                         
                        int index603_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA603_14 = input.LA(1);

                         
                        int index603_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA603_15 = input.LA(1);

                         
                        int index603_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA603_16 = input.LA(1);

                         
                        int index603_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA603_17 = input.LA(1);

                         
                        int index603_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA603_18 = input.LA(1);

                         
                        int index603_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA603_19 = input.LA(1);

                         
                        int index603_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA603_20 = input.LA(1);

                         
                        int index603_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA603_21 = input.LA(1);

                         
                        int index603_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA603_22 = input.LA(1);

                         
                        int index603_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA603_23 = input.LA(1);

                         
                        int index603_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA603_24 = input.LA(1);

                         
                        int index603_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA603_25 = input.LA(1);

                         
                        int index603_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA603_26 = input.LA(1);

                         
                        int index603_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA603_27 = input.LA(1);

                         
                        int index603_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA603_28 = input.LA(1);

                         
                        int index603_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA603_29 = input.LA(1);

                         
                        int index603_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA603_30 = input.LA(1);

                         
                        int index603_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA603_31 = input.LA(1);

                         
                        int index603_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA603_32 = input.LA(1);

                         
                        int index603_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA603_33 = input.LA(1);

                         
                        int index603_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA603_34 = input.LA(1);

                         
                        int index603_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA603_35 = input.LA(1);

                         
                        int index603_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA603_36 = input.LA(1);

                         
                        int index603_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA603_37 = input.LA(1);

                         
                        int index603_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA603_38 = input.LA(1);

                         
                        int index603_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA603_39 = input.LA(1);

                         
                        int index603_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA603_40 = input.LA(1);

                         
                        int index603_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA603_41 = input.LA(1);

                         
                        int index603_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA603_42 = input.LA(1);

                         
                        int index603_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA603_43 = input.LA(1);

                         
                        int index603_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA603_44 = input.LA(1);

                         
                        int index603_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA603_45 = input.LA(1);

                         
                        int index603_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA603_46 = input.LA(1);

                         
                        int index603_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA603_47 = input.LA(1);

                         
                        int index603_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA603_48 = input.LA(1);

                         
                        int index603_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA603_49 = input.LA(1);

                         
                        int index603_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA603_50 = input.LA(1);

                         
                        int index603_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA603_51 = input.LA(1);

                         
                        int index603_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA603_52 = input.LA(1);

                         
                        int index603_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA603_53 = input.LA(1);

                         
                        int index603_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA603_54 = input.LA(1);

                         
                        int index603_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA603_55 = input.LA(1);

                         
                        int index603_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA603_56 = input.LA(1);

                         
                        int index603_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA603_57 = input.LA(1);

                         
                        int index603_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA603_58 = input.LA(1);

                         
                        int index603_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA603_59 = input.LA(1);

                         
                        int index603_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA603_60 = input.LA(1);

                         
                        int index603_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA603_61 = input.LA(1);

                         
                        int index603_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA603_62 = input.LA(1);

                         
                        int index603_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA603_63 = input.LA(1);

                         
                        int index603_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA603_64 = input.LA(1);

                         
                        int index603_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index603_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 603, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA696 extends DFA {

        public DFA696(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 696;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "5945:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA698 extends DFA {

        public DFA698(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 698;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6093:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA700 extends DFA {

        public DFA700(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 700;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "6131:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA702 extends DFA {

        public DFA702(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 702;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6279:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA704 extends DFA {

        public DFA704(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 704;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "6322:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA706 extends DFA {

        public DFA706(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 706;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6565:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA708 extends DFA {

        public DFA708(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 708;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "6638:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA710 extends DFA {

        public DFA710(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 710;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6881:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA770 extends DFA {

        public DFA770(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 770;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 12591:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA772 extends DFA {

        public DFA772(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 772;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "12595:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA776 extends DFA {

        public DFA776(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 776;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 12776:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA778 extends DFA {

        public DFA778(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 778;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "12780:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA782 extends DFA {

        public DFA782(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 782;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 13059:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA784 extends DFA {

        public DFA784(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 784;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "13063:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA788 extends DFA {

        public DFA788(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 788;
            this.eot = dfa_24;
            this.eof = dfa_24;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_28;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 13360:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA790 extends DFA {

        public DFA790(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 790;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "13364:24: ( ruleBogusTypeRefFragment )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6AD25D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6AD25C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x40004000007C0001L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4AD2440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004000007C0001L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014000007C0001L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x000D048090000130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0020440000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0000440000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6AD25C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002460000440000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_32;
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6AD25C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6AD2440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AF2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6AD2440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0000440000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4BD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4BD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x7C07C6B4D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AF2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004040007C0001L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x040D048895184D30L,0x4002420000000000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x000D048090000132L,0x4002420000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014040007C0001L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014061007C0001L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 41, 36, 46, -1, 43, 47, 49, 32, -1, -1, 31, -1, -1, 53, -1, 48, 30, -1, -1, -1, 50, -1, 33, -1, 38, -1, 45, 44, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 42, -1, -1, -1, 35, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 27, 29, -1, 51, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25};
	final static int[] M_3 = { 7, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 80, 87, 13, 24, 90, -1, -1, 9, 10, 67, 21, 20, 12, 82, 15, 84, 36, 69, 23, 42, 81, -1, 17, 16, 59, 49, 85, 38, 78, 29, 40, 91, 89, 19, 33, 61, 48, 58, 37, 68, 83, -1, -1, -1, -1, 79, 30, 26, 47, 44, 31, 86, 25, -1, -1, -1, -1, -1, 70, -1, 71, -1, 63, -1, -1, -1, -1, -1, -1, -1, 32, 77, 76, -1, 35, -1, -1, 75, -1, -1, 45, -1, 46, 72, -1, 73, -1, 62, -1, 27, 50, -1, -1, -1, 8, 64, -1, -1, 22, -1, 88, 74, -1, -1, -1, 51, -1, 56, 53, 54, 55, -1, 57, -1, 28, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, -1, -1, -1, -1, -1, -1, -1, -1, 52};
	final static int[] M_4 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_5 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_10 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_17 = { 22, 17, 25, -1, 24, 26, 28, 13, -1, -1, 12, 50, -1, -1, -1, 27, 11, 54, -1, -1, 29, -1, 14, -1, 19, 56, 4, 1, -1, -1, 51, -1, 43, 33, -1, 21, -1, 7, 23, -1, -1, -1, 16, 45, 32, 42, 20, 55, -1, -1, -1, -1, -1, -1, 8, 10, 31, 30, 9, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, -1, 47, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 62, -1, -1, 3, -1, 5, 59, -1, 60, -1, 46, -1, -1, 34, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_18 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 50, -1, -1, -1, 26, 10, 54, -1, -1, 28, -1, 13, -1, 18, 56, 4, 1, -1, -1, 51, -1, 43, 33, -1, 20, -1, 30, 22, -1, -1, -1, 15, 45, 32, 42, 19, 55, -1, -1, -1, -1, -1, -1, 7, 9, 31, 29, 8, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, -1, 47, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 62, -1, -1, 3, -1, 5, 59, -1, 60, -1, 46, -1, -1, 34, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_19 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 14, 11, 62, 35, 5, 63, 65, 56, 21, 22, 55, 31, 23, 28, 29, 64, 54, 24, 27, 33, 66, 37, 57, 39, 6, 42, 61, 4, 16, 18, 19, 20, 49, 38, 40, 13, 44, 46, 3, 17, 26, 50, 59, 47, 9, 48, 10, 2, 45, -1, -1, -1, -1, 30, 51, 53, 36, 67, 52, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 25, 32, 34, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 68};
	final static int[] M_23 = { 13, 10, 61, 34, 4, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 5, 41, 60, 3, 15, 17, 18, 19, 48, 37, 39, 12, 43, 45, 2, 16, 25, 49, 58, 46, 8, 47, 9, 1, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 67};
	final static int[] M_25 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 52, -1, -1, -1, 30, 12, -1, -1, -1, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_27 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_28 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, 1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_29 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 48, 8, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_30 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 47, 8, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 10, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_31 = { 22, 17, 25, -1, 24, 26, 28, 13, -1, -1, 12, -1, -1, -1, -1, 27, 11, -1, -1, -1, 29, -1, 14, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, 7, 23, -1, -1, -1, 16, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, -1, 30, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6};
	final static int[] M_33 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, -1, -1, -1, -1, 26, 10, -1, -1, -1, 28, -1, 13, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, 30, 22, -1, -1, -1, 15, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 7, 9, -1, 29, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6};
	final static int[] M_35 = { 16, -1, -1, -1, -1, -1, 12, -1, -1, 11, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 13, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 9, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6};
	final static int[] M_36 = { 21, -1, 24, -1, 23, 25, 27, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 28, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 43, 33, -1, 20, -1, 30, 22, -1, -1, -1, -1, 45, 32, 42, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_37 = { 50, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, 59, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52};
	final static int[] M_38 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, -1, -1, -1, -1, 26, 10, -1, -1, -1, 28, -1, 13, -1, 18, -1, 4, 1, -1, -1, -1, -1, 43, 33, -1, 20, -1, 30, 22, -1, -1, -1, 15, 45, 32, 42, 19, -1, -1, -1, -1, -1, -1, -1, 7, 9, 31, 29, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, -1, -1, -1, 3, -1, 5, -1, -1, -1, -1, 46, -1, -1, 34, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_40 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_41 = { 67, 47, -1, 68, -1, -1, 33, 34, -1, 43, 35, 40, 41, -1, -1, 36, 39, 45, -1, 49, -1, 51, -1, 54, 28, -1, 29, 31, 32, -1, 61, 50, 52, -1, 56, 58, -1, 30, 38, 62, 65, 59, -1, 60, -1, -1, 57, -1, -1, -1, -1, 42, -1, 63, 48, 69, -1, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 37, 44, 46, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_44 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_45 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_48 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_49 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_50 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_52 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_53 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}