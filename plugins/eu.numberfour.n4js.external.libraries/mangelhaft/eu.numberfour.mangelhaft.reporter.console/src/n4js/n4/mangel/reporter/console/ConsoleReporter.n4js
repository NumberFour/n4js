/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {IInstrumentedTest} from "n4/mangel/mangeltypes/IInstrumentedTest"
import {ITestReporter} from "n4/mangel/mangeltypes/ITestReporter"
import {ResultGroups} from "n4/mangel/mangeltypes/ResultGroups"
import {TestMethodDescriptor} from "n4/mangel/mangeltypes/TestMethodDescriptor"
import {TestResult} from "n4/mangel/mangeltypes/TestResult"
import {TestSpy} from "n4/mangel/mangeltypes/TestSpy"
import {TestStatus} from "n4/mangel/mangeltypes/TestStatus"

export public class ConsoleReporter implements ITestReporter {
    public timeoutBuffer: number = 1000 * 30;
    private logger: {function(...any):void} = function(... messages: any) {console.log.apply(console, messages);};
    private buffered = false;
    public buffer: Array<Array<?>> = [];
    @Override
    @Inject
    public spy: TestSpy;
    public setLogger(logger: {function(...any):void}): this {
        this.logger = logger;
        return this;
    }
    public setBuffered(shouldBuffer: boolean): this {
        let that = this;
        this.buffered = shouldBuffer;
        if (shouldBuffer === true) {
            this.logger = function(... messages: any){
                that.buffer.push(messages);
            }
        }
        return this;
    }
    @Override public async register() {
        let that = this
            , sessionId: string = null
        ;
        async function handleTestingStart(numAllGroups: number, sid: string, numAllTests: number) {
            that.logger.call(this, "Begin tests")
        }
        this.spy.testingStarted.add(handleTestingStart);
        
        this.spy.groupStarted.add(function (group: IInstrumentedTest) {
            that.logger.call(this, ["  ", "Group", group.name, ":"].join(" "));
        });

        async function handleTestStart(group: IInstrumentedTest, test: TestMethodDescriptor) {
            //console.log(test);
        }
        this.spy.testStarted.add (handleTestStart);

        async function handleTestFinished (group: IInstrumentedTest, test: TestMethodDescriptor, testResult: TestResult) {
            let unsuccessString = "FAIL";
            let err: any+;
            if (!testResult) {
                err = new Error("testResult is null in handleTestFinished");

                console.error(that.constructor.n4type.fqn,test? test.name: "unknown test", err, err.stack);
                return true;
            }
            switch(testResult.testStatus) {
                case TestStatus.passed: {
//                    that.logger.call(this, ["  ","  ", test.name, ":", "%cOK"].join(" "), "color:green; font-weight:900");
                    that.logger.call(this, ["  ","  ", test.name, ":", "OK"].join(" "));
                    break;
                }
                case TestStatus.error:
                    unsuccessString = "ERROR";
                //fallthrough
                case TestStatus.failed: {
                    let trace: string;
                    try {
                        trace = testResult && testResult.trace && testResult.trace.length ?
                        testResult.trace.join("\n"): "NO TRACE";
                    } catch (er) {
                        that.logger(er, typeof (testResult.trace));
                        trace = testResult.trace.toString();
                    }
                    that.logger(["  ","  ", test.name, ":", unsuccessString].join(" "));
                    that.logger(["  ", "  ", "  ", testResult.message].join(" "));
                    that.logger(["  ", "  ", "  ","Stack:", trace.split(/\n/).join("\n                ")].join(" "));
                    break;
                }
                case TestStatus.skipped_precondition: {
                    that.logger.call(this, ["  ","  ", test.name, ":", "SKIPPED_PRECONDITION"].join(" "));
                    break;
                }
                case TestStatus.skipped_not_implemented: {
                    that.logger.call(this, ["  ","  ", test.name, ":", "SKIPPED_NOT_IMPLEMENTED"].join(" "));
                    break;
                }

                case TestStatus.skipped: {
                    that.logger.call(this, ["  ","  ", test.name, ":", "SKIPPED"].join(" "));
                    break;
                }

            }
        }
        this.spy.testFinished.add(handleTestFinished);

        async function handleTestingFinished(resultGroups: ResultGroups) {
            that.logger.call(this, "Tests done.")
        }
        this.spy.testingFinished.add(handleTestingFinished);
        return this;
    }
}
