/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@Global @@ProvidedByRuntime

export external public class ~ProxyHandler<T extends Object> {
    public construct: {function(/*target: */T, /*argumentsList: */Array<any>): T}?;
    public apply: {function(/*target: */T, /*thisArg: */T, /*argumentsList: */Array<any>): any}?;
    public has: {function(/*target: */T, /*property: */string): boolean}?;
    public get: {function(/*target: */T, /*property: */string, /*receiver: */T): any}?;
    public set: {function(/*target: */T, /*property: */string, /*value: */any, /*receiver: */T): boolean}?;
    public deleteProperty: {function(/*target:  */T, /*property: */string): boolean}?;
    public defineProperty: {function(/*target:  */T, /*property: */string, /*descriptor: */Object): boolean}?;
    public ownKeys: {function(/*target:  */T): Array<union{symbol, string}>}?;
    
    public getOwnPropertyDescriptor: {function(/*target:  */T, /*property: */string): Object?}?;
    public getPrototypeOf: {function(/*target:  */T): Object}?;
    public isExtensible: {function(/*target:  */T): boolean}?;
    public preventExtensions: {function(/*target:  */T): boolean}?;
    public setPrototypeOf: {function(/*target:  */T, /*proto: */Object): void}?;
}

@Final export external public class Proxy<T extends Object> {
    /**
     * Creates a proxy for the given target.
     */
    public constructor(target: T, handler: ProxyHandler<T>)/*: T*/;

    /**
     * Creates a revocable proxy, i.e. {proxy, revoke function}.
     * 
     * Calling revoke() redners the proxy unusable, any trap will throw a TypeError.
     * Revoked proxies can be garbage collected.
     */
    public static <T extends Object, T extends Object>
        revocable(target: T, handler: ProxyHandler<T>):
            ~Object with { proxy: T; revoke: Function; };
}

/* -*- mode: typescript;-*- */
