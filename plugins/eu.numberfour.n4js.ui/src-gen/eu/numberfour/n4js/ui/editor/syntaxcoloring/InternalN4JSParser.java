package eu.numberfour.n4js.ui.editor.syntaxcoloring; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import eu.numberfour.n4js.services.N4JSGrammarAccess;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }




    	private N4JSGrammarAccess grammarAccess;
    	 	
    	public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
    		this(input);
    		this.grammarAccess = grammarAccess;
    	}
    	
    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleScript() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;



            
        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getScriptAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||(LA2_0>=Asterisk && LA2_0<=PlusSign)||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getScriptAccess().getScriptElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleScriptElement_return retval = new InternalN4JSParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;



            
        try {
            {
            int alt3=7;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt16=5;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_6);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop4;
                        }
                    } while (true);

                    pushFollow(FOLLOW_6);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt13=2;
                    alt13 = dfa13.predict(input);
                    switch (alt13) {
                        case 1 :
                            {
                            {
                            loop5:
                            do {
                                int alt5=2;
                                int LA5_0 = input.LA(1);

                                if ( ((LA5_0>=Protected && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Const) ) {
                                    alt5=1;
                                }


                                switch (alt5) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_7);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop5;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2()); 
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==Tilde) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4()); 
                            }

                            }


                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==LessThanSign) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);

                            if ( (LA8_0==Implements||LA8_0==Extends) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop9:
                            do {
                                int alt9=2;
                                int LA9_0 = input.LA(1);

                                if ( ((LA9_0>=Protected && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Public||LA9_0==Static||LA9_0==Const) ) {
                                    alt9=1;
                                }


                                switch (alt9) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_11);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop9;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2()); 
                            }
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==Tilde) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4()); 
                            }

                            }


                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);

                            if ( (LA11_0==LessThanSign) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);

                            if ( (LA12_0==Implements||LA12_0==Extends) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_12);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5()); 
                    }

                    }


                    }
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==Comma) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariables_return retval = new InternalN4JSParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_16); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_17);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1()); 
            }

            }


            }
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==Comma) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_17);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclaration_return retval = new InternalN4JSParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclarationImpl_return retval = new InternalN4JSParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;



            
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_18); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0()); 
            }
            int alt20=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt20=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt20=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt20=3;
                }
                break;
            case Default:
                {
                alt20=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_20);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_21);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==From) && (synpred8_InternalN4JSParser())) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_20);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_22); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0()); 
                    }

                    }


                    }
                    int alt19=2;
                    alt19 = dfa19.predict(input);
                    switch (alt19) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_20);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSParser.ruleExportFromClause_return retval = new InternalN4JSParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;



            
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_23); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSParser.ruleExportClause_return retval = new InternalN4JSParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_24); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0()); 
            }
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( ((LA23_0>=Intersection && LA23_0<=Implements)||(LA23_0>=Promisify && LA23_0<=Abstract)||LA23_0==External||(LA23_0>=Private && LA23_0<=Project)||LA23_0==Public||LA23_0==Static||LA23_0==Target||(LA23_0>=Async && LA23_0<=Await)||LA23_0==Union||(LA23_0>=Yield && LA23_0<=This)||LA23_0==From||LA23_0==Type||(LA23_0>=Get && LA23_0<=Let)||(LA23_0>=Out && LA23_0<=Set)||LA23_0==As||LA23_0==Of||LA23_0==RULE_IDENTIFIER) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0()); 
                    }

                    }


                    }
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==Comma) ) {
                            int LA21_1 = input.LA(2);

                            if ( ((LA21_1>=Intersection && LA21_1<=Implements)||(LA21_1>=Promisify && LA21_1<=Abstract)||LA21_1==External||(LA21_1>=Private && LA21_1<=Project)||LA21_1==Public||LA21_1==Static||LA21_1==Target||(LA21_1>=Async && LA21_1<=Await)||LA21_1==Union||(LA21_1>=Yield && LA21_1<=This)||LA21_1==From||LA21_1==Type||(LA21_1>=Get && LA21_1<=Let)||(LA21_1>=Out && LA21_1<=Set)||LA21_1==As||LA21_1==Of||LA21_1==RULE_IDENTIFIER) ) {
                                alt21=1;
                            }


                        }


                        switch (alt21) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==Comma) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleExportSpecifier_return retval = new InternalN4JSParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_26);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0()); 
            }

            }


            }
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==As) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_27); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleExportableElement_return retval = new InternalN4JSParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;



            
        try {
            {
            int alt25=6;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_28);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt40=4;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    {
                    {
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( ((LA26_0>=Protected && LA26_0<=Abstract)||LA26_0==External||(LA26_0>=Private && LA26_0<=Project)||LA26_0==Public||LA26_0==Static||LA26_0==Const) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_6);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);

                    pushFollow(FOLLOW_6);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop27:
                    do {
                        int alt27=2;
                        alt27 = dfa27.predict(input);
                        switch (alt27) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_31);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3()); 
                    }

                    }


                    }
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);

                        if ( (LA28_0==Comma) ) {
                            alt28=1;
                        }


                        switch (alt28) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_31);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt37=2;
                    alt37 = dfa37.predict(input);
                    switch (alt37) {
                        case 1 :
                            {
                            {
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);

                                if ( ((LA29_0>=Protected && LA29_0<=Abstract)||LA29_0==External||(LA29_0>=Private && LA29_0<=Project)||LA29_0==Public||LA29_0==Static||LA29_0==Const) ) {
                                    alt29=1;
                                }


                                switch (alt29) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_7);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop29;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2()); 
                            }
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==Tilde) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4()); 
                            }

                            }


                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==LessThanSign) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);

                            if ( (LA32_0==Implements||LA32_0==Extends) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);

                                if ( ((LA33_0>=Protected && LA33_0<=Abstract)||LA33_0==External||(LA33_0>=Private && LA33_0<=Project)||LA33_0==Public||LA33_0==Static||LA33_0==Const) ) {
                                    alt33=1;
                                }


                                switch (alt33) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_11);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop33;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2()); 
                            }
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==Tilde) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4()); 
                            }

                            }


                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==LessThanSign) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);

                            if ( (LA36_0==Implements||LA36_0==Extends) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( ((LA38_0>=Protected && LA38_0<=Abstract)||LA38_0==External||(LA38_0>=Private && LA38_0<=Project)||LA38_0==Public||LA38_0==Static||LA38_0==Const) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_12);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5()); 
                    }

                    }


                    }
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==Comma) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclaration_return retval = new InternalN4JSParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclarationImpl_return retval = new InternalN4JSParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0()); 
            }
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=Intersection && LA41_0<=Implements)||(LA41_0>=Promisify && LA41_0<=Abstract)||LA41_0==External||(LA41_0>=Private && LA41_0<=Project)||LA41_0==Public||LA41_0==Static||LA41_0==Target||(LA41_0>=Async && LA41_0<=Await)||LA41_0==Union||(LA41_0>=Yield && LA41_0<=This)||LA41_0==From||LA41_0==Type||(LA41_0>=Get && LA41_0<=Let)||(LA41_0>=Out && LA41_0<=Set)||LA41_0==As||LA41_0==Of||LA41_0==Asterisk||LA41_0==LeftCurlyBracket||LA41_0==RULE_IDENTIFIER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    pushFollow(FOLLOW_19);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_23); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_20);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSParser.ruleImportClause_return retval = new InternalN4JSParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;



            
        try {
            {
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( ((LA43_0>=Intersection && LA43_0<=Implements)||(LA43_0>=Promisify && LA43_0<=Abstract)||LA43_0==External||(LA43_0>=Private && LA43_0<=Project)||LA43_0==Public||LA43_0==Static||LA43_0==Target||(LA43_0>=Async && LA43_0<=Await)||LA43_0==Union||(LA43_0>=Yield && LA43_0<=This)||LA43_0==From||LA43_0==Type||(LA43_0>=Get && LA43_0<=Let)||(LA43_0>=Out && LA43_0<=Set)||LA43_0==As||LA43_0==Of||LA43_0==RULE_IDENTIFIER) ) {
                alt43=1;
            }
            else if ( (LA43_0==Asterisk||LA43_0==LeftCurlyBracket) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0()); 
                    }

                    }


                    }
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==Comma) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_34); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0()); 
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Asterisk) ) {
                alt47=1;
            }
            else if ( (LA47_0==LeftCurlyBracket) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0()); 
                    }
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( ((LA46_0>=Intersection && LA46_0<=With)||(LA46_0>=For && LA46_0<=Var)||(LA46_0>=As && LA46_0<=Of)||LA46_0==RULE_IDENTIFIER) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_15);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop44:
                            do {
                                int alt44=2;
                                int LA44_0 = input.LA(1);

                                if ( (LA44_0==Comma) ) {
                                    int LA44_1 = input.LA(2);

                                    if ( ((LA44_1>=Intersection && LA44_1<=With)||(LA44_1>=For && LA44_1<=Var)||(LA44_1>=As && LA44_1<=Of)||LA44_1==RULE_IDENTIFIER) ) {
                                        alt44=1;
                                    }


                                }


                                switch (alt44) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_15);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop44;
                                }
                            } while (true);
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==Comma) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2()); 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamedImportSpecifier_return retval = new InternalN4JSParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt48=2;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_36);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0()); 
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;



            
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1()); 
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_9); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_37);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3()); 
            }

            }


            }
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==PlusSign) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleModuleSpecifier_return retval = new InternalN4JSParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleFunctionDeclaration_return retval = new InternalN4JSParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( ((LA50_0>=Protected && LA50_0<=Abstract)||LA50_0==External||(LA50_0>=Private && LA50_0<=Project)||LA50_0==Public||LA50_0==Static||LA50_0==Const) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            pushFollow(FOLLOW_6);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_38);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionDeclaration_return retval = new InternalN4JSParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( ((LA52_0>=Protected && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Const) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            pushFollow(FOLLOW_39);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_38);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Semicolon) ) {
                int LA53_1 = input.LA(2);

                if ( (synpred20_InternalN4JSParser()) ) {
                    alt53=1;
                }
            }
            else if ( (LA53_0==EOF) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_EOL) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_ML_COMMENT) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RightCurlyBracket) ) {
                int LA53_5 = input.LA(2);

                if ( (synpred20_InternalN4JSParser()) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;



            
        try {
            {
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==Async) ) {
                int LA54_1 = input.LA(2);

                if ( ((LA54_1>=Intersection && LA54_1<=With)||(LA54_1>=For && LA54_1<=Var)||(LA54_1>=As && LA54_1<=Of)||LA54_1==LeftSquareBracket||LA54_1==RULE_DOUBLE||LA54_1==RULE_HEX_INT||LA54_1==RULE_OCTAL_INT||LA54_1==RULE_SCIENTIFIC_INT||LA54_1==RULE_IDENTIFIER||LA54_1==RULE_STRING||LA54_1==RULE_NO_LINE_TERMINATOR||LA54_1==RULE_INT) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_40); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSParser.ruleFunctionImpl_return retval = new InternalN4JSParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Asterisk) ) {
                alt55=1;
            }
            else if ( ((LA55_0>=Intersection && LA55_0<=Implements)||(LA55_0>=Promisify && LA55_0<=Abstract)||LA55_0==External||(LA55_0>=Private && LA55_0<=Project)||LA55_0==Public||LA55_0==Static||LA55_0==Target||(LA55_0>=Async && LA55_0<=Await)||LA55_0==Union||(LA55_0>=Yield && LA55_0<=This)||LA55_0==From||LA55_0==Type||(LA55_0>=Get && LA55_0<=Let)||(LA55_0>=Out && LA55_0<=Set)||LA55_0==As||LA55_0==Of||LA55_0==LeftParenthesis||LA55_0==LessThanSign||LA55_0==RULE_IDENTIFIER) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionImpl_return retval = new InternalN4JSParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( ((LA56_0>=Intersection && LA56_0<=Implements)||(LA56_0>=Promisify && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Target||(LA56_0>=Async && LA56_0<=Await)||LA56_0==Union||LA56_0==This||LA56_0==From||LA56_0==Type||(LA56_0>=Get && LA56_0<=Let)||(LA56_0>=Out && LA56_0<=Set)||LA56_0==As||LA56_0==Of||LA56_0==LeftParenthesis||LA56_0==LessThanSign||LA56_0==RULE_IDENTIFIER) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm6_FunctionImpl_return retval = new InternalN4JSParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Abstract)||LA57_0==External||(LA57_0>=Private && LA57_0<=Project)||LA57_0==Public||LA57_0==Static||LA57_0==Target||(LA57_0>=Async && LA57_0<=Await)||LA57_0==Union||(LA57_0>=Yield && LA57_0<=This)||LA57_0==From||LA57_0==Type||(LA57_0>=Get && LA57_0<=Let)||(LA57_0>=Out && LA57_0<=Set)||LA57_0==As||LA57_0==Of||LA57_0==LeftParenthesis||LA57_0==LessThanSign||LA57_0==RULE_IDENTIFIER) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSParser.ruleFunctionHeader_return retval = new InternalN4JSParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LessThanSign) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    pushFollow(FOLLOW_41);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( ((LA59_0>=Intersection && LA59_0<=Implements)||(LA59_0>=Promisify && LA59_0<=Abstract)||LA59_0==External||(LA59_0>=Private && LA59_0<=Project)||LA59_0==Public||LA59_0==Static||LA59_0==Target||(LA59_0>=Async && LA59_0<=Await)||LA59_0==Union||(LA59_0>=Yield && LA59_0<=This)||LA59_0==From||LA59_0==Type||(LA59_0>=Get && LA59_0<=Let)||(LA59_0>=Out && LA59_0<=Set)||LA59_0==As||LA59_0==Of||LA59_0==RULE_IDENTIFIER) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Colon) && (synpred21_InternalN4JSParser())) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionHeader_return retval = new InternalN4JSParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LessThanSign) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_41);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=Intersection && LA62_0<=Implements)||(LA62_0>=Promisify && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Target||(LA62_0>=Async && LA62_0<=Await)||LA62_0==Union||LA62_0==This||LA62_0==From||LA62_0==Type||(LA62_0>=Get && LA62_0<=Let)||(LA62_0>=Out && LA62_0<=Set)||LA62_0==As||LA62_0==Of||LA62_0==RULE_IDENTIFIER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Colon) && (synpred22_InternalN4JSParser())) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionHeader_return retval = new InternalN4JSParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LessThanSign) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    pushFollow(FOLLOW_42);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==RULE_IDENTIFIER) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_42);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionHeader_return retval = new InternalN4JSParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    pushFollow(FOLLOW_42);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||LA68_0==This||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_42);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSParser.ruleFunctionBody_return retval = new InternalN4JSParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionBody_return retval = new InternalN4JSParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt71=2;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionBody_return retval = new InternalN4JSParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionBody_return retval = new InternalN4JSParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_6);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( ((LA72_0>=Protected && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Const) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            pushFollow(FOLLOW_6);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_6);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( ((LA73_0>=Protected && LA73_0<=Abstract)||LA73_0==External||(LA73_0>=Private && LA73_0<=Project)||LA73_0==Public||LA73_0==Static||LA73_0==Const) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            pushFollow(FOLLOW_39);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleFunctionExpression_return retval = new InternalN4JSParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_45); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0()); 
            }

            }


            }

            pushFollow(FOLLOW_46);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2()); 
            }

            }


            }

            pushFollow(FOLLOW_13);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowExpression_return retval = new InternalN4JSParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm2_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt83=4;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==LeftParenthesis) && (synpred37_InternalN4JSParser())) {
                alt83=1;
            }
            else if ( (LA83_0==Async) ) {
                int LA83_2 = input.LA(2);

                if ( (LA83_2==EqualsSignGreaterThanSign) ) {
                    alt83=4;
                }
                else if ( (LA83_2==RULE_NO_LINE_TERMINATOR) && (synpred38_InternalN4JSParser())) {
                    alt83=2;
                }
                else if ( (LA83_2==LeftParenthesis) && (synpred38_InternalN4JSParser())) {
                    alt83=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA83_0==Asterisk) && (synpred39_InternalN4JSParser())) {
                alt83=3;
            }
            else if ( ((LA83_0>=Intersection && LA83_0<=Implements)||(LA83_0>=Promisify && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Target||LA83_0==Await||LA83_0==Union||(LA83_0>=Yield && LA83_0<=This)||LA83_0==From||LA83_0==Type||(LA83_0>=Get && LA83_0<=Let)||(LA83_0>=Out && LA83_0<=Set)||LA83_0==As||LA83_0==Of||LA83_0==RULE_IDENTIFIER) ) {
                alt83=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( ((LA75_0>=Intersection && LA75_0<=Implements)||(LA75_0>=Promisify && LA75_0<=Abstract)||LA75_0==External||(LA75_0>=Private && LA75_0<=Project)||LA75_0==Public||LA75_0==Static||LA75_0==Target||(LA75_0>=Async && LA75_0<=Await)||LA75_0==Union||(LA75_0>=Yield && LA75_0<=This)||LA75_0==From||LA75_0==This_1||(LA75_0>=Type && LA75_0<=Void)||LA75_0==FullStopFullStopFullStop||(LA75_0>=Get && LA75_0<=Let)||(LA75_0>=Out && LA75_0<=Set)||LA75_0==As||LA75_0==Of||(LA75_0>=QuestionMark && LA75_0<=LeftSquareBracket)||LA75_0==LeftCurlyBracket||LA75_0==Tilde||LA75_0==RULE_IDENTIFIER) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop74:
                            do {
                                int alt74=2;
                                int LA74_0 = input.LA(1);

                                if ( (LA74_0==Comma) ) {
                                    alt74=1;
                                }


                                switch (alt74) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop74;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==Colon) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||(LA78_0>=Yield && LA78_0<=This)||LA78_0==From||LA78_0==This_1||(LA78_0>=Type && LA78_0<=Void)||LA78_0==FullStopFullStopFullStop||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||(LA78_0>=QuestionMark && LA78_0<=LeftSquareBracket)||LA78_0==LeftCurlyBracket||LA78_0==Tilde||LA78_0==RULE_IDENTIFIER) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop77:
                            do {
                                int alt77=2;
                                int LA77_0 = input.LA(1);

                                if ( (LA77_0==Comma) ) {
                                    alt77=1;
                                }


                                switch (alt77) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop77;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==Colon) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( ((LA81_0>=Intersection && LA81_0<=Implements)||(LA81_0>=Promisify && LA81_0<=Abstract)||LA81_0==External||(LA81_0>=Private && LA81_0<=Project)||LA81_0==Public||LA81_0==Static||LA81_0==Target||(LA81_0>=Async && LA81_0<=Await)||LA81_0==Union||(LA81_0>=Yield && LA81_0<=This)||LA81_0==From||LA81_0==This_1||(LA81_0>=Type && LA81_0<=Void)||LA81_0==FullStopFullStopFullStop||(LA81_0>=Get && LA81_0<=Let)||(LA81_0>=Out && LA81_0<=Set)||LA81_0==As||LA81_0==Of||(LA81_0>=QuestionMark && LA81_0<=LeftSquareBracket)||LA81_0==LeftCurlyBracket||LA81_0==Tilde||LA81_0==RULE_IDENTIFIER) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop80:
                            do {
                                int alt80=2;
                                int LA80_0 = input.LA(1);

                                if ( (LA80_0==Comma) ) {
                                    alt80=1;
                                }


                                switch (alt80) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop80;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==Colon) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm2_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ArrowExpression_return retval = new InternalN4JSParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm3_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt94=4;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==LeftParenthesis) && (synpred45_InternalN4JSParser())) {
                alt94=1;
            }
            else if ( (LA94_0==Async) ) {
                int LA94_2 = input.LA(2);

                if ( (LA94_2==EqualsSignGreaterThanSign) ) {
                    alt94=4;
                }
                else if ( (LA94_2==RULE_NO_LINE_TERMINATOR) && (synpred46_InternalN4JSParser())) {
                    alt94=2;
                }
                else if ( (LA94_2==LeftParenthesis) && (synpred46_InternalN4JSParser())) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA94_0==Asterisk) && (synpred47_InternalN4JSParser())) {
                alt94=3;
            }
            else if ( ((LA94_0>=Intersection && LA94_0<=Implements)||(LA94_0>=Promisify && LA94_0<=Abstract)||LA94_0==External||(LA94_0>=Private && LA94_0<=Project)||LA94_0==Public||LA94_0==Static||LA94_0==Target||LA94_0==Await||LA94_0==Union||(LA94_0>=Yield && LA94_0<=This)||LA94_0==From||LA94_0==Type||(LA94_0>=Get && LA94_0<=Let)||(LA94_0>=Out && LA94_0<=Set)||LA94_0==As||LA94_0==Of||LA94_0==RULE_IDENTIFIER) ) {
                alt94=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;
            }
            switch (alt94) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( ((LA86_0>=Intersection && LA86_0<=Implements)||(LA86_0>=Promisify && LA86_0<=Abstract)||LA86_0==External||(LA86_0>=Private && LA86_0<=Project)||LA86_0==Public||LA86_0==Static||LA86_0==Target||(LA86_0>=Async && LA86_0<=Await)||LA86_0==Union||(LA86_0>=Yield && LA86_0<=This)||LA86_0==From||LA86_0==This_1||(LA86_0>=Type && LA86_0<=Void)||LA86_0==FullStopFullStopFullStop||(LA86_0>=Get && LA86_0<=Let)||(LA86_0>=Out && LA86_0<=Set)||LA86_0==As||LA86_0==Of||(LA86_0>=QuestionMark && LA86_0<=LeftSquareBracket)||LA86_0==LeftCurlyBracket||LA86_0==Tilde||LA86_0==RULE_IDENTIFIER) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop85:
                            do {
                                int alt85=2;
                                int LA85_0 = input.LA(1);

                                if ( (LA85_0==Comma) ) {
                                    alt85=1;
                                }


                                switch (alt85) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop85;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==Colon) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( ((LA89_0>=Intersection && LA89_0<=Implements)||(LA89_0>=Promisify && LA89_0<=Abstract)||LA89_0==External||(LA89_0>=Private && LA89_0<=Project)||LA89_0==Public||LA89_0==Static||LA89_0==Target||(LA89_0>=Async && LA89_0<=Await)||LA89_0==Union||(LA89_0>=Yield && LA89_0<=This)||LA89_0==From||LA89_0==This_1||(LA89_0>=Type && LA89_0<=Void)||LA89_0==FullStopFullStopFullStop||(LA89_0>=Get && LA89_0<=Let)||(LA89_0>=Out && LA89_0<=Set)||LA89_0==As||LA89_0==Of||(LA89_0>=QuestionMark && LA89_0<=LeftSquareBracket)||LA89_0==LeftCurlyBracket||LA89_0==Tilde||LA89_0==RULE_IDENTIFIER) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop88:
                            do {
                                int alt88=2;
                                int LA88_0 = input.LA(1);

                                if ( (LA88_0==Comma) ) {
                                    alt88=1;
                                }


                                switch (alt88) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop88;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==Colon) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( ((LA92_0>=Intersection && LA92_0<=Implements)||(LA92_0>=Promisify && LA92_0<=Abstract)||LA92_0==External||(LA92_0>=Private && LA92_0<=Project)||LA92_0==Public||LA92_0==Static||LA92_0==Target||(LA92_0>=Async && LA92_0<=Await)||LA92_0==Union||(LA92_0>=Yield && LA92_0<=This)||LA92_0==From||LA92_0==This_1||(LA92_0>=Type && LA92_0<=Void)||LA92_0==FullStopFullStopFullStop||(LA92_0>=Get && LA92_0<=Let)||(LA92_0>=Out && LA92_0<=Set)||LA92_0==As||LA92_0==Of||(LA92_0>=QuestionMark && LA92_0<=LeftSquareBracket)||LA92_0==LeftCurlyBracket||LA92_0==Tilde||LA92_0==RULE_IDENTIFIER) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop91:
                            do {
                                int alt91=2;
                                int LA91_0 = input.LA(1);

                                if ( (LA91_0==Comma) ) {
                                    alt91=1;
                                }


                                switch (alt91) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop91;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Colon) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm3_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ArrowExpression_return retval = new InternalN4JSParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm2_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt105=4;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==LeftParenthesis) && (synpred53_InternalN4JSParser())) {
                alt105=1;
            }
            else if ( (LA105_0==Async) ) {
                int LA105_2 = input.LA(2);

                if ( (LA105_2==RULE_NO_LINE_TERMINATOR) && (synpred54_InternalN4JSParser())) {
                    alt105=2;
                }
                else if ( (LA105_2==LeftParenthesis) && (synpred54_InternalN4JSParser())) {
                    alt105=2;
                }
                else if ( (LA105_2==EqualsSignGreaterThanSign) ) {
                    alt105=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA105_0==Asterisk) && (synpred55_InternalN4JSParser())) {
                alt105=3;
            }
            else if ( ((LA105_0>=Intersection && LA105_0<=Implements)||(LA105_0>=Promisify && LA105_0<=Abstract)||LA105_0==External||(LA105_0>=Private && LA105_0<=Project)||LA105_0==Public||LA105_0==Static||LA105_0==Target||LA105_0==Await||LA105_0==Union||LA105_0==This||LA105_0==From||LA105_0==Type||(LA105_0>=Get && LA105_0<=Let)||(LA105_0>=Out && LA105_0<=Set)||LA105_0==As||LA105_0==Of||LA105_0==RULE_IDENTIFIER) ) {
                alt105=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( ((LA97_0>=Intersection && LA97_0<=Implements)||(LA97_0>=Promisify && LA97_0<=Abstract)||LA97_0==External||(LA97_0>=Private && LA97_0<=Project)||LA97_0==Public||LA97_0==Static||LA97_0==Target||(LA97_0>=Async && LA97_0<=Await)||LA97_0==Union||LA97_0==This||LA97_0==From||LA97_0==This_1||(LA97_0>=Type && LA97_0<=Void)||LA97_0==FullStopFullStopFullStop||(LA97_0>=Get && LA97_0<=Let)||(LA97_0>=Out && LA97_0<=Set)||LA97_0==As||LA97_0==Of||(LA97_0>=QuestionMark && LA97_0<=LeftSquareBracket)||LA97_0==LeftCurlyBracket||LA97_0==Tilde||LA97_0==RULE_IDENTIFIER) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop96:
                            do {
                                int alt96=2;
                                int LA96_0 = input.LA(1);

                                if ( (LA96_0==Comma) ) {
                                    alt96=1;
                                }


                                switch (alt96) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop96;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==Colon) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( ((LA100_0>=Intersection && LA100_0<=Implements)||(LA100_0>=Promisify && LA100_0<=Abstract)||LA100_0==External||(LA100_0>=Private && LA100_0<=Project)||LA100_0==Public||LA100_0==Static||LA100_0==Target||(LA100_0>=Async && LA100_0<=Await)||LA100_0==Union||LA100_0==This||LA100_0==From||LA100_0==This_1||(LA100_0>=Type && LA100_0<=Void)||LA100_0==FullStopFullStopFullStop||(LA100_0>=Get && LA100_0<=Let)||(LA100_0>=Out && LA100_0<=Set)||LA100_0==As||LA100_0==Of||(LA100_0>=QuestionMark && LA100_0<=LeftSquareBracket)||LA100_0==LeftCurlyBracket||LA100_0==Tilde||LA100_0==RULE_IDENTIFIER) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop99:
                            do {
                                int alt99=2;
                                int LA99_0 = input.LA(1);

                                if ( (LA99_0==Comma) ) {
                                    alt99=1;
                                }


                                switch (alt99) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop99;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==Colon) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( ((LA103_0>=Intersection && LA103_0<=Implements)||(LA103_0>=Promisify && LA103_0<=Abstract)||LA103_0==External||(LA103_0>=Private && LA103_0<=Project)||LA103_0==Public||LA103_0==Static||LA103_0==Target||(LA103_0>=Async && LA103_0<=Await)||LA103_0==Union||LA103_0==This||LA103_0==From||LA103_0==This_1||(LA103_0>=Type && LA103_0<=Void)||LA103_0==FullStopFullStopFullStop||(LA103_0>=Get && LA103_0<=Let)||(LA103_0>=Out && LA103_0<=Set)||LA103_0==As||LA103_0==Of||(LA103_0>=QuestionMark && LA103_0<=LeftSquareBracket)||LA103_0==LeftCurlyBracket||LA103_0==Tilde||LA103_0==RULE_IDENTIFIER) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop102:
                            do {
                                int alt102=2;
                                int LA102_0 = input.LA(1);

                                if ( (LA102_0==Comma) ) {
                                    alt102=1;
                                }


                                switch (alt102) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop102;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==Colon) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt106=2;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm2_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ArrowExpression_return retval = new InternalN4JSParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_2_0_0_2=null;
        Token CommaKeyword_0_0_0_2_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_2_2=null;
        Token ColonKeyword_0_0_0_2_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0 = null;

        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm3_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt116=4;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==LeftParenthesis) && (synpred61_InternalN4JSParser())) {
                alt116=1;
            }
            else if ( (LA116_0==Async) ) {
                int LA116_2 = input.LA(2);

                if ( (LA116_2==RULE_NO_LINE_TERMINATOR) && (synpred62_InternalN4JSParser())) {
                    alt116=2;
                }
                else if ( (LA116_2==LeftParenthesis) && (synpred62_InternalN4JSParser())) {
                    alt116=2;
                }
                else if ( (LA116_2==EqualsSignGreaterThanSign) ) {
                    alt116=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA116_0==Asterisk) && (synpred63_InternalN4JSParser())) {
                alt116=3;
            }
            else if ( ((LA116_0>=Intersection && LA116_0<=Implements)||(LA116_0>=Promisify && LA116_0<=Abstract)||LA116_0==External||(LA116_0>=Private && LA116_0<=Project)||LA116_0==Public||LA116_0==Static||LA116_0==Target||LA116_0==Await||LA116_0==Union||LA116_0==This||LA116_0==From||LA116_0==Type||(LA116_0>=Get && LA116_0<=Let)||(LA116_0>=Out && LA116_0<=Set)||LA116_0==As||LA116_0==Of||LA116_0==RULE_IDENTIFIER) ) {
                alt116=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }

                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( ((LA108_0>=Intersection && LA108_0<=Implements)||(LA108_0>=Promisify && LA108_0<=Abstract)||LA108_0==External||(LA108_0>=Private && LA108_0<=Project)||LA108_0==Public||LA108_0==Static||LA108_0==Target||(LA108_0>=Async && LA108_0<=Await)||LA108_0==Union||LA108_0==This||LA108_0==From||LA108_0==This_1||(LA108_0>=Type && LA108_0<=Void)||LA108_0==FullStopFullStopFullStop||(LA108_0>=Get && LA108_0<=Let)||(LA108_0>=Out && LA108_0<=Set)||LA108_0==As||LA108_0==Of||(LA108_0>=QuestionMark && LA108_0<=LeftSquareBracket)||LA108_0==LeftCurlyBracket||LA108_0==Tilde||LA108_0==RULE_IDENTIFIER) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop107:
                            do {
                                int alt107=2;
                                int LA107_0 = input.LA(1);

                                if ( (LA107_0==Comma) ) {
                                    alt107=1;
                                }


                                switch (alt107) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop107;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==Colon) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( ((LA111_0>=Intersection && LA111_0<=Implements)||(LA111_0>=Promisify && LA111_0<=Abstract)||LA111_0==External||(LA111_0>=Private && LA111_0<=Project)||LA111_0==Public||LA111_0==Static||LA111_0==Target||(LA111_0>=Async && LA111_0<=Await)||LA111_0==Union||LA111_0==This||LA111_0==From||LA111_0==This_1||(LA111_0>=Type && LA111_0<=Void)||LA111_0==FullStopFullStopFullStop||(LA111_0>=Get && LA111_0<=Let)||(LA111_0>=Out && LA111_0<=Set)||LA111_0==As||LA111_0==Of||(LA111_0>=QuestionMark && LA111_0<=LeftSquareBracket)||LA111_0==LeftCurlyBracket||LA111_0==Tilde||LA111_0==RULE_IDENTIFIER) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop110:
                            do {
                                int alt110=2;
                                int LA110_0 = input.LA(1);

                                if ( (LA110_0==Comma) ) {
                                    alt110=1;
                                }


                                switch (alt110) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop110;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==Colon) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0=(Token)match(input,Asterisk,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_0_2_0_0_0_0, grammarAccess.getArrowExpressionAccess().getGeneratorAsteriskKeyword_0_0_0_2_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_2_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_2_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_2_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_2_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_2_0_0_2()); 
                    }

                    }


                    }
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( ((LA114_0>=Intersection && LA114_0<=Implements)||(LA114_0>=Promisify && LA114_0<=Abstract)||LA114_0==External||(LA114_0>=Private && LA114_0<=Project)||LA114_0==Public||LA114_0==Static||LA114_0==Target||(LA114_0>=Async && LA114_0<=Await)||LA114_0==Union||LA114_0==This||LA114_0==From||LA114_0==This_1||(LA114_0>=Type && LA114_0<=Void)||LA114_0==FullStopFullStopFullStop||(LA114_0>=Get && LA114_0<=Let)||(LA114_0>=Out && LA114_0<=Set)||LA114_0==As||LA114_0==Of||(LA114_0>=QuestionMark && LA114_0<=LeftSquareBracket)||LA114_0==LeftCurlyBracket||LA114_0==Tilde||LA114_0==RULE_IDENTIFIER) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_0()); 
                            }

                            }


                            }
                            loop113:
                            do {
                                int alt113=2;
                                int LA113_0 = input.LA(1);

                                if ( (LA113_0==Comma) ) {
                                    alt113=1;
                                }


                                switch (alt113) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_2_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_2_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_2_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_2_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop113;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_2_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_2_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_2_2()); 
                    }
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==Colon) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_2_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_2_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_2_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_2_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_2_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_3_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt117=2;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm3_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.ruleStrictFormalParameters_return retval = new InternalN4JSParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=Intersection && LA119_0<=Implements)||(LA119_0>=Promisify && LA119_0<=Abstract)||LA119_0==External||(LA119_0>=Private && LA119_0<=Project)||LA119_0==Public||LA119_0==Static||LA119_0==Target||(LA119_0>=Async && LA119_0<=Await)||LA119_0==Union||(LA119_0>=Yield && LA119_0<=This)||LA119_0==From||LA119_0==This_1||(LA119_0>=Type && LA119_0<=Void)||LA119_0==FullStopFullStopFullStop||(LA119_0>=Get && LA119_0<=Let)||(LA119_0>=Out && LA119_0<=Set)||LA119_0==As||LA119_0==Of||(LA119_0>=QuestionMark && LA119_0<=LeftSquareBracket)||LA119_0==LeftCurlyBracket||LA119_0==Tilde||LA119_0==RULE_IDENTIFIER) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==Comma) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_48);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.norm1_StrictFormalParameters_return retval = new InternalN4JSParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( ((LA121_0>=Intersection && LA121_0<=Implements)||(LA121_0>=Promisify && LA121_0<=Abstract)||LA121_0==External||(LA121_0>=Private && LA121_0<=Project)||LA121_0==Public||LA121_0==Static||LA121_0==Target||(LA121_0>=Async && LA121_0<=Await)||LA121_0==Union||LA121_0==This||LA121_0==From||LA121_0==This_1||(LA121_0>=Type && LA121_0<=Void)||LA121_0==FullStopFullStopFullStop||(LA121_0>=Get && LA121_0<=Let)||(LA121_0>=Out && LA121_0<=Set)||LA121_0==As||LA121_0==Of||(LA121_0>=QuestionMark && LA121_0<=LeftSquareBracket)||LA121_0==LeftCurlyBracket||LA121_0==Tilde||LA121_0==RULE_IDENTIFIER) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==Comma) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_48);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.norm1_BlockMinusBraces_return retval = new InternalN4JSParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=Intersection && LA122_0<=Implements)||(LA122_0>=Promisify && LA122_0<=Function)||(LA122_0>=Private && LA122_0<=Delete)||(LA122_0>=Public && LA122_0<=Break)||(LA122_0>=Class && LA122_0<=This)||(LA122_0>=From && LA122_0<=With)||(LA122_0>=For && LA122_0<=Var)||LA122_0==PlusSignPlusSign||LA122_0==HyphenMinusHyphenMinus||LA122_0==SolidusEqualsSign||(LA122_0>=As && LA122_0<=If)||LA122_0==Of||LA122_0==ExclamationMark||LA122_0==LeftParenthesis||(LA122_0>=Asterisk && LA122_0<=PlusSign)||LA122_0==HyphenMinus||LA122_0==Solidus||(LA122_0>=Semicolon && LA122_0<=LessThanSign)||(LA122_0>=CommercialAt && LA122_0<=LeftSquareBracket)||LA122_0==LeftCurlyBracket||LA122_0==Tilde||LA122_0==RULE_DOUBLE||(LA122_0>=RULE_HEX_INT && LA122_0<=RULE_LEGACY_OCTAL_INT)||LA122_0==RULE_SCIENTIFIC_INT||LA122_0==RULE_IDENTIFIER||LA122_0==RULE_STRING||(LA122_0>=RULE_TEMPLATE_HEAD && LA122_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA122_0==RULE_INT) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ExpressionDisguisedAsBlock_return norm2_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.norm2_ExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.norm2_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm2_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ExpressionDisguisedAsBlock_return norm3_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.norm3_ExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.norm3_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm3_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm2_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AssignmentExpressionStatement_return norm2_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm2_AssignmentExpressionStatement_return retval = new InternalN4JSParser.norm2_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AssignmentExpressionStatement_return norm3_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm3_AssignmentExpressionStatement_return retval = new InternalN4JSParser.norm3_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExpression_return retval = new InternalN4JSParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_56);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==Class) ) {
                alt125=1;
            }
            else if ( (LA125_0==Function||LA125_0==Async) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( ((LA123_0>=Intersection && LA123_0<=Constructor)||(LA123_0>=Promisify && LA123_0<=Abstract)||LA123_0==External||(LA123_0>=Private && LA123_0<=Project)||LA123_0==Public||LA123_0==Static||LA123_0==Target||(LA123_0>=Async && LA123_0<=Await)||LA123_0==Union||(LA123_0>=Yield && LA123_0<=This)||LA123_0==From||LA123_0==Type||(LA123_0>=Get && LA123_0<=Let)||(LA123_0>=Out && LA123_0<=Set)||LA123_0==As||LA123_0==Of||LA123_0==RULE_IDENTIFIER) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==Implements) ) {
                        int LA123_2 = input.LA(2);

                        if ( (LA123_2==Implements||LA123_2==Extends||LA123_2==LeftCurlyBracket) ) {
                            alt123=1;
                        }
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==Implements||LA124_0==Extends) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_10);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedExpression_return retval = new InternalN4JSParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_56);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==Class) ) {
                alt128=1;
            }
            else if ( (LA128_0==Function||LA128_0==Async) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( ((LA126_0>=Intersection && LA126_0<=Constructor)||(LA126_0>=Promisify && LA126_0<=Abstract)||LA126_0==External||(LA126_0>=Private && LA126_0<=Project)||LA126_0==Public||LA126_0==Static||LA126_0==Target||(LA126_0>=Async && LA126_0<=Await)||LA126_0==Union||LA126_0==This||LA126_0==From||LA126_0==Type||(LA126_0>=Get && LA126_0<=Let)||(LA126_0>=Out && LA126_0<=Set)||LA126_0==As||LA126_0==Of||LA126_0==RULE_IDENTIFIER) ) {
                        alt126=1;
                    }
                    else if ( (LA126_0==Implements) ) {
                        int LA126_2 = input.LA(2);

                        if ( (LA126_2==Implements||LA126_2==Extends||LA126_2==LeftCurlyBracket) ) {
                            alt126=1;
                        }
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_58);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==Implements||LA127_0==Extends) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_58);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariable_return retval = new InternalN4JSParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt129=3;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Out) ) {
                alt129=1;
            }
            else if ( (LA129_0==In) ) {
                alt129=2;
            }
            switch (alt129) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_59);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1()); 
            }

            }


            }
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==Extends) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleFormalParameter_return retval = new InternalN4JSParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_FormalParameter_return retval = new InternalN4JSParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementFragment_return retval = new InternalN4JSParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt135=2;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_60);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==CommercialAt) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_61);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);
                    int alt132=2;
                    alt132 = dfa132.predict(input);
                    switch (alt132) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_62);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==FullStopFullStopFullStop) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_63);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==Colon) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_60);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==EqualsSign) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementFragment_return retval = new InternalN4JSParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_60);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==CommercialAt) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_61);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);
                    int alt138=2;
                    alt138 = dfa138.predict(input);
                    switch (alt138) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_62);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==FullStopFullStopFullStop) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_63);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==Colon) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_60);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==EqualsSign) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepTypeRef_return retval = new InternalN4JSParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;



            
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBogusTypeRefFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBogusTypeRefFragment_return ruleBogusTypeRefFragment() throws RecognitionException {
        InternalN4JSParser.ruleBogusTypeRefFragment_return retval = new InternalN4JSParser.ruleBogusTypeRefFragment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBogusTypeRef_return BogusTypeRefBogusTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BogusTypeRefBogusTypeRefParserRuleCall_0=ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.start):null), (BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.stop):null), grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSParser.ruleBlock_return retval = new InternalN4JSParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( ((LA143_0>=Intersection && LA143_0<=Implements)||(LA143_0>=Promisify && LA143_0<=Function)||(LA143_0>=Private && LA143_0<=Delete)||(LA143_0>=Public && LA143_0<=Break)||(LA143_0>=Class && LA143_0<=This)||(LA143_0>=From && LA143_0<=With)||(LA143_0>=For && LA143_0<=Var)||LA143_0==PlusSignPlusSign||LA143_0==HyphenMinusHyphenMinus||LA143_0==SolidusEqualsSign||(LA143_0>=As && LA143_0<=If)||LA143_0==Of||LA143_0==ExclamationMark||LA143_0==LeftParenthesis||(LA143_0>=Asterisk && LA143_0<=PlusSign)||LA143_0==HyphenMinus||LA143_0==Solidus||(LA143_0>=Semicolon && LA143_0<=LessThanSign)||(LA143_0>=CommercialAt && LA143_0<=LeftSquareBracket)||LA143_0==LeftCurlyBracket||LA143_0==Tilde||LA143_0==RULE_DOUBLE||(LA143_0>=RULE_HEX_INT && LA143_0<=RULE_LEGACY_OCTAL_INT)||LA143_0==RULE_SCIENTIFIC_INT||LA143_0==RULE_IDENTIFIER||LA143_0==RULE_STRING||(LA143_0>=RULE_TEMPLATE_HEAD && LA143_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA143_0==RULE_INT) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_55);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSParser.norm1_Block_return retval = new InternalN4JSParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( ((LA144_0>=Intersection && LA144_0<=Implements)||(LA144_0>=Promisify && LA144_0<=Function)||(LA144_0>=Private && LA144_0<=Delete)||(LA144_0>=Public && LA144_0<=Break)||(LA144_0>=Class && LA144_0<=This)||(LA144_0>=From && LA144_0<=With)||(LA144_0>=For && LA144_0<=Var)||LA144_0==PlusSignPlusSign||LA144_0==HyphenMinusHyphenMinus||LA144_0==SolidusEqualsSign||(LA144_0>=As && LA144_0<=If)||LA144_0==Of||LA144_0==ExclamationMark||LA144_0==LeftParenthesis||(LA144_0>=Asterisk && LA144_0<=PlusSign)||LA144_0==HyphenMinus||LA144_0==Solidus||(LA144_0>=Semicolon && LA144_0<=LessThanSign)||(LA144_0>=CommercialAt && LA144_0<=LeftSquareBracket)||LA144_0==LeftCurlyBracket||LA144_0==Tilde||LA144_0==RULE_DOUBLE||(LA144_0>=RULE_HEX_INT && LA144_0<=RULE_LEGACY_OCTAL_INT)||LA144_0==RULE_SCIENTIFIC_INT||LA144_0==RULE_IDENTIFIER||LA144_0==RULE_STRING||(LA144_0>=RULE_TEMPLATE_HEAD && LA144_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA144_0==RULE_INT) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_55);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSParser.ruleRootStatement_return retval = new InternalN4JSParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt145=16;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSParser.norm1_RootStatement_return retval = new InternalN4JSParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt146=16;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSParser.ruleStatement_return retval = new InternalN4JSParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt147=2;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSParser.norm1_Statement_return retval = new InternalN4JSParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt148=2;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm1_VariableStatement_return retval = new InternalN4JSParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_30);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_31);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==Comma) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_31);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm3_VariableStatement_return retval = new InternalN4JSParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_30);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_31);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==Comma) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_31);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableStatement_return retval = new InternalN4JSParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop151:
            do {
                int alt151=2;
                alt151 = dfa151.predict(input);
                switch (alt151) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_30);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_31);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3()); 
            }

            }


            }
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==Comma) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_31);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LeftCurlyBracket) && (synpred81_InternalN4JSParser())) {
                alt153=1;
            }
            else if ( (LA153_0==LeftSquareBracket) && (synpred81_InternalN4JSParser())) {
                alt153=1;
            }
            else if ( ((LA153_0>=Intersection && LA153_0<=Implements)||(LA153_0>=Promisify && LA153_0<=Abstract)||LA153_0==External||(LA153_0>=Private && LA153_0<=Project)||LA153_0==Public||LA153_0==Static||LA153_0==Target||(LA153_0>=Async && LA153_0<=Await)||LA153_0==Union||(LA153_0>=Yield && LA153_0<=This)||LA153_0==From||LA153_0==Type||(LA153_0>=Get && LA153_0<=Let)||(LA153_0>=Out && LA153_0<=Set)||LA153_0==As||LA153_0==Of||LA153_0==CommercialAt||LA153_0==RULE_IDENTIFIER) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LeftCurlyBracket) && (synpred82_InternalN4JSParser())) {
                alt154=1;
            }
            else if ( (LA154_0==LeftSquareBracket) && (synpred82_InternalN4JSParser())) {
                alt154=1;
            }
            else if ( ((LA154_0>=Intersection && LA154_0<=Implements)||(LA154_0>=Promisify && LA154_0<=Abstract)||LA154_0==External||(LA154_0>=Private && LA154_0<=Project)||LA154_0==Public||LA154_0==Static||LA154_0==Target||(LA154_0>=Async && LA154_0<=Await)||LA154_0==Union||(LA154_0>=Yield && LA154_0<=This)||LA154_0==From||LA154_0==Type||(LA154_0>=Get && LA154_0<=Let)||(LA154_0>=Out && LA154_0<=Set)||LA154_0==As||LA154_0==Of||LA154_0==CommercialAt||LA154_0==RULE_IDENTIFIER) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LeftCurlyBracket) && (synpred83_InternalN4JSParser())) {
                alt155=1;
            }
            else if ( (LA155_0==LeftSquareBracket) && (synpred83_InternalN4JSParser())) {
                alt155=1;
            }
            else if ( ((LA155_0>=Intersection && LA155_0<=Implements)||(LA155_0>=Promisify && LA155_0<=Abstract)||LA155_0==External||(LA155_0>=Private && LA155_0<=Project)||LA155_0==Public||LA155_0==Static||LA155_0==Target||(LA155_0>=Async && LA155_0<=Await)||LA155_0==Union||LA155_0==This||LA155_0==From||LA155_0==Type||(LA155_0>=Get && LA155_0<=Let)||(LA155_0>=Out && LA155_0<=Set)||LA155_0==As||LA155_0==Of||LA155_0==CommercialAt||LA155_0==RULE_IDENTIFIER) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LeftCurlyBracket) && (synpred84_InternalN4JSParser())) {
                alt156=1;
            }
            else if ( (LA156_0==LeftSquareBracket) && (synpred84_InternalN4JSParser())) {
                alt156=1;
            }
            else if ( ((LA156_0>=Intersection && LA156_0<=Implements)||(LA156_0>=Promisify && LA156_0<=Abstract)||LA156_0==External||(LA156_0>=Private && LA156_0<=Project)||LA156_0==Public||LA156_0==Static||LA156_0==Target||(LA156_0>=Async && LA156_0<=Await)||LA156_0==Union||LA156_0==This||LA156_0==From||LA156_0==Type||(LA156_0>=Get && LA156_0<=Let)||(LA156_0>=Out && LA156_0<=Set)||LA156_0==As||LA156_0==Of||LA156_0==CommercialAt||LA156_0==RULE_IDENTIFIER) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==LeftCurlyBracket) && (synpred85_InternalN4JSParser())) {
                alt157=1;
            }
            else if ( (LA157_0==LeftSquareBracket) && (synpred85_InternalN4JSParser())) {
                alt157=1;
            }
            else if ( ((LA157_0>=Intersection && LA157_0<=Implements)||(LA157_0>=Promisify && LA157_0<=Abstract)||LA157_0==External||(LA157_0>=Private && LA157_0<=Project)||LA157_0==Public||LA157_0==Static||LA157_0==Target||(LA157_0>=Async && LA157_0<=Await)||LA157_0==Union||(LA157_0>=Yield && LA157_0<=This)||LA157_0==From||LA157_0==Type||(LA157_0>=Get && LA157_0<=Let)||(LA157_0>=Out && LA157_0<=Set)||LA157_0==As||LA157_0==Of||LA157_0==CommercialAt||LA157_0==RULE_IDENTIFIER) ) {
                alt157=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==LeftCurlyBracket) && (synpred86_InternalN4JSParser())) {
                alt158=1;
            }
            else if ( (LA158_0==LeftSquareBracket) && (synpred86_InternalN4JSParser())) {
                alt158=1;
            }
            else if ( ((LA158_0>=Intersection && LA158_0<=Implements)||(LA158_0>=Promisify && LA158_0<=Abstract)||LA158_0==External||(LA158_0>=Private && LA158_0<=Project)||LA158_0==Public||LA158_0==Static||LA158_0==Target||(LA158_0>=Async && LA158_0<=Await)||LA158_0==Union||LA158_0==This||LA158_0==From||LA158_0==Type||(LA158_0>=Get && LA158_0<=Let)||(LA158_0>=Out && LA158_0<=Set)||LA158_0==As||LA158_0==Of||LA158_0==CommercialAt||LA158_0==RULE_IDENTIFIER) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableBinding_return retval = new InternalN4JSParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_64);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableBinding_return retval = new InternalN4JSParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_64);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableBinding_return retval = new InternalN4JSParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_64);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableBinding_return retval = new InternalN4JSParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_64);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableBinding_return retval = new InternalN4JSParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EqualsSign) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==EqualsSign) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableBinding_return retval = new InternalN4JSParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==EqualsSign) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==EqualsSign) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclaration_return retval = new InternalN4JSParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclaration_return retval = new InternalN4JSParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclaration_return retval = new InternalN4JSParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return retval = new InternalN4JSParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclaration_return retval = new InternalN4JSParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return retval = new InternalN4JSParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop163:
            do {
                int alt163=2;
                alt163 = dfa163.predict(input);
                switch (alt163) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==EqualsSign) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop165:
            do {
                int alt165=2;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==EqualsSign) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop167:
            do {
                int alt167=2;
                alt167 = dfa167.predict(input);
                switch (alt167) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==EqualsSign) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop169:
            do {
                int alt169=2;
                alt169 = dfa169.predict(input);
                switch (alt169) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==EqualsSign) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop171:
            do {
                int alt171=2;
                alt171 = dfa171.predict(input);
                switch (alt171) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==Colon) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    pushFollow(FOLLOW_60);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==EqualsSign) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop174:
            do {
                int alt174=2;
                alt174 = dfa174.predict(input);
                switch (alt174) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==Colon) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    {
                    pushFollow(FOLLOW_60);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==EqualsSign) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop177:
            do {
                int alt177=2;
                alt177 = dfa177.predict(input);
                switch (alt177) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==Colon) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_60);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==EqualsSign) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop180:
            do {
                int alt180=2;
                alt180 = dfa180.predict(input);
                switch (alt180) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==Colon) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    {
                    pushFollow(FOLLOW_60);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==EqualsSign) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==LeftCurlyBracket) && (synpred103_InternalN4JSParser())) {
                alt183=1;
            }
            else if ( (LA183_0==LeftSquareBracket) && (synpred103_InternalN4JSParser())) {
                alt183=1;
            }
            else if ( ((LA183_0>=Intersection && LA183_0<=Implements)||(LA183_0>=Promisify && LA183_0<=Abstract)||LA183_0==External||(LA183_0>=Private && LA183_0<=Project)||LA183_0==Public||LA183_0==Static||LA183_0==Target||(LA183_0>=Async && LA183_0<=Await)||LA183_0==Union||(LA183_0>=Yield && LA183_0<=This)||LA183_0==From||LA183_0==Type||(LA183_0>=Get && LA183_0<=Let)||(LA183_0>=Out && LA183_0<=Set)||LA183_0==As||LA183_0==Of||LA183_0==CommercialAt||LA183_0==RULE_IDENTIFIER) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LeftCurlyBracket) && (synpred104_InternalN4JSParser())) {
                alt184=1;
            }
            else if ( (LA184_0==LeftSquareBracket) && (synpred104_InternalN4JSParser())) {
                alt184=1;
            }
            else if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||LA184_0==External||(LA184_0>=Private && LA184_0<=Project)||LA184_0==Public||LA184_0==Static||LA184_0==Target||(LA184_0>=Async && LA184_0<=Await)||LA184_0==Union||LA184_0==This||LA184_0==From||LA184_0==Type||(LA184_0>=Get && LA184_0<=Let)||(LA184_0>=Out && LA184_0<=Set)||LA184_0==As||LA184_0==Of||LA184_0==CommercialAt||LA184_0==RULE_IDENTIFIER) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableBinding_return retval = new InternalN4JSParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_64);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_64);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSParser.ruleEmptyStatement_return retval = new InternalN4JSParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;


            
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleExpressionStatement_return retval = new InternalN4JSParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionStatement_return retval = new InternalN4JSParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSParser.ruleIfStatement_return retval = new InternalN4JSParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_68);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==Else) ) {
                int LA185_1 = input.LA(2);

                if ( (synpred107_InternalN4JSParser()) ) {
                    alt185=1;
                }
            }
            switch (alt185) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IfStatement_return retval = new InternalN4JSParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_68);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==Else) ) {
                int LA186_1 = input.LA(2);

                if ( (synpred108_InternalN4JSParser()) ) {
                    alt186=1;
                }
            }
            switch (alt186) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSParser.ruleIterationStatement_return retval = new InternalN4JSParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt187=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt187=1;
                }
                break;
            case While:
                {
                alt187=2;
                }
                break;
            case For:
                {
                alt187=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IterationStatement_return retval = new InternalN4JSParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt188=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt188=1;
                }
                break;
            case While:
                {
                alt188=2;
                }
                break;
            case For:
                {
                alt188=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSParser.ruleDoStatement_return retval = new InternalN4JSParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_69);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt189=2;
            alt189 = dfa189.predict(input);
            switch (alt189) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSParser.norm1_DoStatement_return retval = new InternalN4JSParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_69);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==Semicolon) ) {
                int LA190_1 = input.LA(2);

                if ( (synpred110_InternalN4JSParser()) ) {
                    alt190=1;
                }
            }
            else if ( (LA190_0==EOF) && (synpred110_InternalN4JSParser())) {
                alt190=1;
            }
            else if ( (LA190_0==RULE_EOL) && (synpred110_InternalN4JSParser())) {
                alt190=1;
            }
            else if ( (LA190_0==RULE_ML_COMMENT) && (synpred110_InternalN4JSParser())) {
                alt190=1;
            }
            else if ( (LA190_0==RightCurlyBracket) ) {
                int LA190_5 = input.LA(2);

                if ( (synpred110_InternalN4JSParser()) ) {
                    alt190=1;
                }
            }
            switch (alt190) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSParser.ruleWhileStatement_return retval = new InternalN4JSParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WhileStatement_return retval = new InternalN4JSParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSParser.ruleForStatement_return retval = new InternalN4JSParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt208=2;
            alt208 = dfa208.predict(input);
            switch (alt208) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_71);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt207=3;
                    alt207 = dfa207.predict(input);
                    switch (alt207) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_30);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt199=2;
                            alt199 = dfa199.predict(input);
                            switch (alt199) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_72);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt191=2;
                                    int LA191_0 = input.LA(1);

                                    if ( (LA191_0==In) ) {
                                        alt191=1;
                                    }
                                    else if ( (LA191_0==Of) ) {
                                        alt191=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 191, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt191) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt192=2;
                                    alt192 = dfa192.predict(input);
                                    switch (alt192) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_74);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt198=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt198=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt198=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt198=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 198, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            loop193:
                                            do {
                                                int alt193=2;
                                                int LA193_0 = input.LA(1);

                                                if ( (LA193_0==Comma) ) {
                                                    alt193=1;
                                                }


                                                switch (alt193) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_75);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop193;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_76); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt194=2;
                                            int LA194_0 = input.LA(1);

                                            if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||LA194_0==Public||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||(LA194_0>=Get && LA194_0<=Set)||LA194_0==PlusSignPlusSign||LA194_0==HyphenMinusHyphenMinus||LA194_0==SolidusEqualsSign||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||(LA194_0>=Asterisk && LA194_0<=PlusSign)||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {
                                                alt194=1;
                                            }
                                            switch (alt194) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_77);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt195=2;
                                            int LA195_0 = input.LA(1);

                                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||LA195_0==Public||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||LA195_0==HyphenMinusHyphenMinus||LA195_0==SolidusEqualsSign||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||(LA195_0>=Asterisk && LA195_0<=PlusSign)||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                                alt195=1;
                                            }
                                            switch (alt195) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_66);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt196=2;
                                            int LA196_0 = input.LA(1);

                                            if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||LA196_0==Public||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||LA196_0==HyphenMinusHyphenMinus||LA196_0==SolidusEqualsSign||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||(LA196_0>=Asterisk && LA196_0<=PlusSign)||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {
                                                alt196=1;
                                            }
                                            switch (alt196) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_66);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt197=2;
                                            int LA197_0 = input.LA(1);

                                            if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||LA197_0==Public||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||(LA197_0>=Get && LA197_0<=Set)||LA197_0==PlusSignPlusSign||LA197_0==HyphenMinusHyphenMinus||LA197_0==SolidusEqualsSign||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||(LA197_0>=Asterisk && LA197_0<=PlusSign)||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_HEX_INT && LA197_0<=RULE_LEGACY_OCTAL_INT)||LA197_0==RULE_SCIENTIFIC_INT||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_STRING||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_INT) ) {
                                                alt197=1;
                                            }
                                            switch (alt197) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_66);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_78);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt204=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt204=1;
                                }
                                break;
                            case In:
                                {
                                alt204=2;
                                }
                                break;
                            case Of:
                                {
                                alt204=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 204, 0, input);

                                throw nvae;
                            }

                            switch (alt204) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_76); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt200=2;
                                    int LA200_0 = input.LA(1);

                                    if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||LA200_0==Public||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||(LA200_0>=Get && LA200_0<=Set)||LA200_0==PlusSignPlusSign||LA200_0==HyphenMinusHyphenMinus||LA200_0==SolidusEqualsSign||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||(LA200_0>=Asterisk && LA200_0<=PlusSign)||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_HEX_INT && LA200_0<=RULE_LEGACY_OCTAL_INT)||LA200_0==RULE_SCIENTIFIC_INT||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_STRING||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_INT) ) {
                                        alt200=1;
                                    }
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_77);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_73); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt201=2;
                                    int LA201_0 = input.LA(1);

                                    if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||LA201_0==Public||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||LA201_0==HyphenMinusHyphenMinus||LA201_0==SolidusEqualsSign||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||(LA201_0>=Asterisk && LA201_0<=PlusSign)||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_HEX_INT && LA201_0<=RULE_LEGACY_OCTAL_INT)||LA201_0==RULE_SCIENTIFIC_INT||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_STRING||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_INT) ) {
                                        alt201=1;
                                    }
                                    switch (alt201) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_73); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt202=2;
                                    int LA202_0 = input.LA(1);

                                    if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||LA202_0==Public||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||LA202_0==HyphenMinusHyphenMinus||LA202_0==SolidusEqualsSign||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||(LA202_0>=Asterisk && LA202_0<=PlusSign)||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                        alt202=1;
                                    }
                                    switch (alt202) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_73); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt203=2;
                                    int LA203_0 = input.LA(1);

                                    if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||LA203_0==Public||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||LA203_0==HyphenMinusHyphenMinus||LA203_0==SolidusEqualsSign||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||(LA203_0>=Asterisk && LA203_0<=PlusSign)||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                        alt203=1;
                                    }
                                    switch (alt203) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_76); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt205=2;
                            int LA205_0 = input.LA(1);

                            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||LA205_0==Public||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||(LA205_0>=Get && LA205_0<=Set)||LA205_0==PlusSignPlusSign||LA205_0==HyphenMinusHyphenMinus||LA205_0==SolidusEqualsSign||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||(LA205_0>=Asterisk && LA205_0<=PlusSign)||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {
                                alt205=1;
                            }
                            switch (alt205) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_77);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_73); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt206=2;
                            int LA206_0 = input.LA(1);

                            if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||(LA206_0>=External && LA206_0<=Function)||(LA206_0>=Private && LA206_0<=Delete)||LA206_0==Public||LA206_0==Static||(LA206_0>=Target && LA206_0<=Await)||LA206_0==Class||(LA206_0>=False && LA206_0<=Super)||LA206_0==Union||(LA206_0>=Yield && LA206_0<=This)||(LA206_0>=From && LA206_0<=Void)||(LA206_0>=Get && LA206_0<=Set)||LA206_0==PlusSignPlusSign||LA206_0==HyphenMinusHyphenMinus||LA206_0==SolidusEqualsSign||LA206_0==As||LA206_0==Of||LA206_0==ExclamationMark||LA206_0==LeftParenthesis||(LA206_0>=Asterisk && LA206_0<=PlusSign)||LA206_0==HyphenMinus||LA206_0==Solidus||LA206_0==LessThanSign||(LA206_0>=CommercialAt && LA206_0<=LeftSquareBracket)||LA206_0==LeftCurlyBracket||LA206_0==Tilde||LA206_0==RULE_DOUBLE||(LA206_0>=RULE_HEX_INT && LA206_0<=RULE_LEGACY_OCTAL_INT)||LA206_0==RULE_SCIENTIFIC_INT||LA206_0==RULE_IDENTIFIER||LA206_0==RULE_STRING||(LA206_0>=RULE_TEMPLATE_HEAD && LA206_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA206_0==RULE_INT) ) {
                                alt206=1;
                            }
                            switch (alt206) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_66);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ForStatement_return retval = new InternalN4JSParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt226=2;
            alt226 = dfa226.predict(input);
            switch (alt226) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_71);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt225=3;
                    alt225 = dfa225.predict(input);
                    switch (alt225) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_30);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt217=2;
                            alt217 = dfa217.predict(input);
                            switch (alt217) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_72);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt209=2;
                                    int LA209_0 = input.LA(1);

                                    if ( (LA209_0==In) ) {
                                        alt209=1;
                                    }
                                    else if ( (LA209_0==Of) ) {
                                        alt209=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 209, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt209) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt210=2;
                                    alt210 = dfa210.predict(input);
                                    switch (alt210) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_74);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt216=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt216=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt216=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt216=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 216, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt216) {
                                        case 1 :
                                            {
                                            {
                                            loop211:
                                            do {
                                                int alt211=2;
                                                int LA211_0 = input.LA(1);

                                                if ( (LA211_0==Comma) ) {
                                                    alt211=1;
                                                }


                                                switch (alt211) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_75);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop211;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_76); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt212=2;
                                            int LA212_0 = input.LA(1);

                                            if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||LA212_0==Public||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||LA212_0==HyphenMinusHyphenMinus||LA212_0==SolidusEqualsSign||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||(LA212_0>=Asterisk && LA212_0<=PlusSign)||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                                                alt212=1;
                                            }
                                            switch (alt212) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_77);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt213=2;
                                            int LA213_0 = input.LA(1);

                                            if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||LA213_0==Public||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||(LA213_0>=Asterisk && LA213_0<=PlusSign)||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                                alt213=1;
                                            }
                                            switch (alt213) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_66);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt214=2;
                                            int LA214_0 = input.LA(1);

                                            if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||LA214_0==Public||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||LA214_0==HyphenMinusHyphenMinus||LA214_0==SolidusEqualsSign||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||(LA214_0>=Asterisk && LA214_0<=PlusSign)||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_HEX_INT && LA214_0<=RULE_LEGACY_OCTAL_INT)||LA214_0==RULE_SCIENTIFIC_INT||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_STRING||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_INT) ) {
                                                alt214=1;
                                            }
                                            switch (alt214) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_66);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_73); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt215=2;
                                            int LA215_0 = input.LA(1);

                                            if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||LA215_0==Public||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||(LA215_0>=Get && LA215_0<=Set)||LA215_0==PlusSignPlusSign||LA215_0==HyphenMinusHyphenMinus||LA215_0==SolidusEqualsSign||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||(LA215_0>=Asterisk && LA215_0<=PlusSign)||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_HEX_INT && LA215_0<=RULE_LEGACY_OCTAL_INT)||LA215_0==RULE_SCIENTIFIC_INT||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_STRING||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_INT) ) {
                                                alt215=1;
                                            }
                                            switch (alt215) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_66);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_78);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt222=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt222=1;
                                }
                                break;
                            case In:
                                {
                                alt222=2;
                                }
                                break;
                            case Of:
                                {
                                alt222=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 222, 0, input);

                                throw nvae;
                            }

                            switch (alt222) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_76); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt218=2;
                                    int LA218_0 = input.LA(1);

                                    if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||(LA218_0>=External && LA218_0<=Function)||(LA218_0>=Private && LA218_0<=Delete)||LA218_0==Public||LA218_0==Static||(LA218_0>=Target && LA218_0<=Await)||LA218_0==Class||(LA218_0>=False && LA218_0<=Super)||LA218_0==Union||(LA218_0>=Yield && LA218_0<=This)||(LA218_0>=From && LA218_0<=Void)||(LA218_0>=Get && LA218_0<=Set)||LA218_0==PlusSignPlusSign||LA218_0==HyphenMinusHyphenMinus||LA218_0==SolidusEqualsSign||LA218_0==As||LA218_0==Of||LA218_0==ExclamationMark||LA218_0==LeftParenthesis||(LA218_0>=Asterisk && LA218_0<=PlusSign)||LA218_0==HyphenMinus||LA218_0==Solidus||LA218_0==LessThanSign||(LA218_0>=CommercialAt && LA218_0<=LeftSquareBracket)||LA218_0==LeftCurlyBracket||LA218_0==Tilde||LA218_0==RULE_DOUBLE||(LA218_0>=RULE_HEX_INT && LA218_0<=RULE_LEGACY_OCTAL_INT)||LA218_0==RULE_SCIENTIFIC_INT||LA218_0==RULE_IDENTIFIER||LA218_0==RULE_STRING||(LA218_0>=RULE_TEMPLATE_HEAD && LA218_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA218_0==RULE_INT) ) {
                                        alt218=1;
                                    }
                                    switch (alt218) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_77);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_73); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt219=2;
                                    int LA219_0 = input.LA(1);

                                    if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||(LA219_0>=External && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||LA219_0==Public||LA219_0==Static||(LA219_0>=Target && LA219_0<=Await)||LA219_0==Class||(LA219_0>=False && LA219_0<=Super)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||(LA219_0>=From && LA219_0<=Void)||(LA219_0>=Get && LA219_0<=Set)||LA219_0==PlusSignPlusSign||LA219_0==HyphenMinusHyphenMinus||LA219_0==SolidusEqualsSign||LA219_0==As||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||(LA219_0>=Asterisk && LA219_0<=PlusSign)||LA219_0==HyphenMinus||LA219_0==Solidus||LA219_0==LessThanSign||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_HEX_INT && LA219_0<=RULE_LEGACY_OCTAL_INT)||LA219_0==RULE_SCIENTIFIC_INT||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_STRING||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_INT) ) {
                                        alt219=1;
                                    }
                                    switch (alt219) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_73); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt220=2;
                                    int LA220_0 = input.LA(1);

                                    if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||(LA220_0>=External && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||LA220_0==Public||LA220_0==Static||(LA220_0>=Target && LA220_0<=Await)||LA220_0==Class||(LA220_0>=False && LA220_0<=Super)||LA220_0==Union||(LA220_0>=Yield && LA220_0<=This)||(LA220_0>=From && LA220_0<=Void)||(LA220_0>=Get && LA220_0<=Set)||LA220_0==PlusSignPlusSign||LA220_0==HyphenMinusHyphenMinus||LA220_0==SolidusEqualsSign||LA220_0==As||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||(LA220_0>=Asterisk && LA220_0<=PlusSign)||LA220_0==HyphenMinus||LA220_0==Solidus||LA220_0==LessThanSign||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_HEX_INT && LA220_0<=RULE_LEGACY_OCTAL_INT)||LA220_0==RULE_SCIENTIFIC_INT||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_STRING||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_INT) ) {
                                        alt220=1;
                                    }
                                    switch (alt220) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_73); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt221=2;
                                    int LA221_0 = input.LA(1);

                                    if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||LA221_0==Public||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||(LA221_0>=Get && LA221_0<=Set)||LA221_0==PlusSignPlusSign||LA221_0==HyphenMinusHyphenMinus||LA221_0==SolidusEqualsSign||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||(LA221_0>=Asterisk && LA221_0<=PlusSign)||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                                        alt221=1;
                                    }
                                    switch (alt221) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_66);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_76); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt223=2;
                            int LA223_0 = input.LA(1);

                            if ( ((LA223_0>=Intersection && LA223_0<=Implements)||(LA223_0>=Promisify && LA223_0<=Abstract)||(LA223_0>=External && LA223_0<=Function)||(LA223_0>=Private && LA223_0<=Delete)||LA223_0==Public||LA223_0==Static||(LA223_0>=Target && LA223_0<=Await)||LA223_0==Class||(LA223_0>=False && LA223_0<=Super)||LA223_0==Union||(LA223_0>=Yield && LA223_0<=This)||(LA223_0>=From && LA223_0<=Void)||(LA223_0>=Get && LA223_0<=Set)||LA223_0==PlusSignPlusSign||LA223_0==HyphenMinusHyphenMinus||LA223_0==SolidusEqualsSign||LA223_0==As||LA223_0==Of||LA223_0==ExclamationMark||LA223_0==LeftParenthesis||(LA223_0>=Asterisk && LA223_0<=PlusSign)||LA223_0==HyphenMinus||LA223_0==Solidus||LA223_0==LessThanSign||(LA223_0>=CommercialAt && LA223_0<=LeftSquareBracket)||LA223_0==LeftCurlyBracket||LA223_0==Tilde||LA223_0==RULE_DOUBLE||(LA223_0>=RULE_HEX_INT && LA223_0<=RULE_LEGACY_OCTAL_INT)||LA223_0==RULE_SCIENTIFIC_INT||LA223_0==RULE_IDENTIFIER||LA223_0==RULE_STRING||(LA223_0>=RULE_TEMPLATE_HEAD && LA223_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA223_0==RULE_INT) ) {
                                alt223=1;
                            }
                            switch (alt223) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_77);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_73); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt224=2;
                            int LA224_0 = input.LA(1);

                            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||(LA224_0>=External && LA224_0<=Function)||(LA224_0>=Private && LA224_0<=Delete)||LA224_0==Public||LA224_0==Static||(LA224_0>=Target && LA224_0<=Await)||LA224_0==Class||(LA224_0>=False && LA224_0<=Super)||LA224_0==Union||(LA224_0>=Yield && LA224_0<=This)||(LA224_0>=From && LA224_0<=Void)||(LA224_0>=Get && LA224_0<=Set)||LA224_0==PlusSignPlusSign||LA224_0==HyphenMinusHyphenMinus||LA224_0==SolidusEqualsSign||LA224_0==As||LA224_0==Of||LA224_0==ExclamationMark||LA224_0==LeftParenthesis||(LA224_0>=Asterisk && LA224_0<=PlusSign)||LA224_0==HyphenMinus||LA224_0==Solidus||LA224_0==LessThanSign||(LA224_0>=CommercialAt && LA224_0<=LeftSquareBracket)||LA224_0==LeftCurlyBracket||LA224_0==Tilde||LA224_0==RULE_DOUBLE||(LA224_0>=RULE_HEX_INT && LA224_0<=RULE_LEGACY_OCTAL_INT)||LA224_0==RULE_SCIENTIFIC_INT||LA224_0==RULE_IDENTIFIER||LA224_0==RULE_STRING||(LA224_0>=RULE_TEMPLATE_HEAD && LA224_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA224_0==RULE_INT) ) {
                                alt224=1;
                            }
                            switch (alt224) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_66);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleLetIdentifierRef_return retval = new InternalN4JSParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleLetAsIdentifier_return retval = new InternalN4JSParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;


            
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSParser.ruleContinueStatement_return retval = new InternalN4JSParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( ((LA227_0>=Intersection && LA227_0<=Implements)||(LA227_0>=Promisify && LA227_0<=Abstract)||LA227_0==External||(LA227_0>=Private && LA227_0<=Project)||LA227_0==Public||LA227_0==Static||LA227_0==Target||(LA227_0>=Async && LA227_0<=Await)||LA227_0==Union||(LA227_0>=Yield && LA227_0<=This)||LA227_0==From||LA227_0==Type||(LA227_0>=Get && LA227_0<=Let)||(LA227_0>=Out && LA227_0<=Set)||LA227_0==As||LA227_0==Of||LA227_0==RULE_IDENTIFIER) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ContinueStatement_return retval = new InternalN4JSParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||LA228_0==External||(LA228_0>=Private && LA228_0<=Project)||LA228_0==Public||LA228_0==Static||LA228_0==Target||(LA228_0>=Async && LA228_0<=Await)||LA228_0==Union||LA228_0==This||LA228_0==From||LA228_0==Type||(LA228_0>=Get && LA228_0<=Let)||(LA228_0>=Out && LA228_0<=Set)||LA228_0==As||LA228_0==Of||LA228_0==RULE_IDENTIFIER) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSParser.ruleBreakStatement_return retval = new InternalN4JSParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Abstract)||LA229_0==External||(LA229_0>=Private && LA229_0<=Project)||LA229_0==Public||LA229_0==Static||LA229_0==Target||(LA229_0>=Async && LA229_0<=Await)||LA229_0==Union||(LA229_0>=Yield && LA229_0<=This)||LA229_0==From||LA229_0==Type||(LA229_0>=Get && LA229_0<=Let)||(LA229_0>=Out && LA229_0<=Set)||LA229_0==As||LA229_0==Of||LA229_0==RULE_IDENTIFIER) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSParser.norm1_BreakStatement_return retval = new InternalN4JSParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Abstract)||LA230_0==External||(LA230_0>=Private && LA230_0<=Project)||LA230_0==Public||LA230_0==Static||LA230_0==Target||(LA230_0>=Async && LA230_0<=Await)||LA230_0==Union||LA230_0==This||LA230_0==From||LA230_0==Type||(LA230_0>=Get && LA230_0<=Let)||(LA230_0>=Out && LA230_0<=Set)||LA230_0==As||LA230_0==Of||LA230_0==RULE_IDENTIFIER) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSParser.ruleReturnStatement_return retval = new InternalN4JSParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_80); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( ((LA231_0>=Intersection && LA231_0<=Implements)||(LA231_0>=Promisify && LA231_0<=Abstract)||(LA231_0>=External && LA231_0<=Function)||(LA231_0>=Private && LA231_0<=Delete)||LA231_0==Public||LA231_0==Static||(LA231_0>=Target && LA231_0<=Await)||LA231_0==Class||(LA231_0>=False && LA231_0<=Super)||LA231_0==Union||(LA231_0>=Yield && LA231_0<=This)||(LA231_0>=From && LA231_0<=Void)||(LA231_0>=Get && LA231_0<=Set)||LA231_0==PlusSignPlusSign||LA231_0==HyphenMinusHyphenMinus||LA231_0==SolidusEqualsSign||LA231_0==As||LA231_0==Of||LA231_0==ExclamationMark||LA231_0==LeftParenthesis||(LA231_0>=Asterisk && LA231_0<=PlusSign)||LA231_0==HyphenMinus||LA231_0==Solidus||LA231_0==LessThanSign||(LA231_0>=CommercialAt && LA231_0<=LeftSquareBracket)||LA231_0==LeftCurlyBracket||LA231_0==Tilde||LA231_0==RULE_DOUBLE||(LA231_0>=RULE_HEX_INT && LA231_0<=RULE_LEGACY_OCTAL_INT)||LA231_0==RULE_SCIENTIFIC_INT||LA231_0==RULE_IDENTIFIER||LA231_0==RULE_STRING||(LA231_0>=RULE_TEMPLATE_HEAD && LA231_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA231_0==RULE_INT) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ReturnStatement_return retval = new InternalN4JSParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_80); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( ((LA232_0>=Intersection && LA232_0<=Implements)||(LA232_0>=Promisify && LA232_0<=Abstract)||(LA232_0>=External && LA232_0<=Function)||(LA232_0>=Private && LA232_0<=Delete)||LA232_0==Public||LA232_0==Static||(LA232_0>=Target && LA232_0<=Await)||LA232_0==Class||(LA232_0>=False && LA232_0<=Super)||LA232_0==Union||(LA232_0>=Yield && LA232_0<=This)||(LA232_0>=From && LA232_0<=Void)||(LA232_0>=Get && LA232_0<=Set)||LA232_0==PlusSignPlusSign||LA232_0==HyphenMinusHyphenMinus||LA232_0==SolidusEqualsSign||LA232_0==As||LA232_0==Of||LA232_0==ExclamationMark||LA232_0==LeftParenthesis||(LA232_0>=Asterisk && LA232_0<=PlusSign)||LA232_0==HyphenMinus||LA232_0==Solidus||LA232_0==LessThanSign||(LA232_0>=CommercialAt && LA232_0<=LeftSquareBracket)||LA232_0==LeftCurlyBracket||LA232_0==Tilde||LA232_0==RULE_DOUBLE||(LA232_0>=RULE_HEX_INT && LA232_0<=RULE_LEGACY_OCTAL_INT)||LA232_0==RULE_SCIENTIFIC_INT||LA232_0==RULE_IDENTIFIER||LA232_0==RULE_STRING||(LA232_0>=RULE_TEMPLATE_HEAD && LA232_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA232_0==RULE_INT) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSParser.ruleWithStatement_return retval = new InternalN4JSParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WithStatement_return retval = new InternalN4JSParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSParser.ruleSwitchStatement_return retval = new InternalN4JSParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==Case) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_81);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==Default) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_82);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);

                        if ( (LA234_0==Case) ) {
                            alt234=1;
                        }


                        switch (alt234) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_82);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop234;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSParser.norm1_SwitchStatement_return retval = new InternalN4JSParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==Case) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_81);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==Default) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_82);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop237:
                    do {
                        int alt237=2;
                        int LA237_0 = input.LA(1);

                        if ( (LA237_0==Case) ) {
                            alt237=1;
                        }


                        switch (alt237) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_82);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop237;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSParser.ruleCaseClause_return retval = new InternalN4JSParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_83);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( ((LA239_0>=Intersection && LA239_0<=Implements)||(LA239_0>=Promisify && LA239_0<=Function)||(LA239_0>=Private && LA239_0<=Delete)||(LA239_0>=Public && LA239_0<=Break)||(LA239_0>=Class && LA239_0<=This)||(LA239_0>=From && LA239_0<=With)||(LA239_0>=For && LA239_0<=Var)||LA239_0==PlusSignPlusSign||LA239_0==HyphenMinusHyphenMinus||LA239_0==SolidusEqualsSign||(LA239_0>=As && LA239_0<=If)||LA239_0==Of||LA239_0==ExclamationMark||LA239_0==LeftParenthesis||(LA239_0>=Asterisk && LA239_0<=PlusSign)||LA239_0==HyphenMinus||LA239_0==Solidus||(LA239_0>=Semicolon && LA239_0<=LessThanSign)||(LA239_0>=CommercialAt && LA239_0<=LeftSquareBracket)||LA239_0==LeftCurlyBracket||LA239_0==Tilde||LA239_0==RULE_DOUBLE||(LA239_0>=RULE_HEX_INT && LA239_0<=RULE_LEGACY_OCTAL_INT)||LA239_0==RULE_SCIENTIFIC_INT||LA239_0==RULE_IDENTIFIER||LA239_0==RULE_STRING||(LA239_0>=RULE_TEMPLATE_HEAD && LA239_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA239_0==RULE_INT) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSParser.norm1_CaseClause_return retval = new InternalN4JSParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_83);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( ((LA240_0>=Intersection && LA240_0<=Implements)||(LA240_0>=Promisify && LA240_0<=Function)||(LA240_0>=Private && LA240_0<=Delete)||(LA240_0>=Public && LA240_0<=Break)||(LA240_0>=Class && LA240_0<=This)||(LA240_0>=From && LA240_0<=With)||(LA240_0>=For && LA240_0<=Var)||LA240_0==PlusSignPlusSign||LA240_0==HyphenMinusHyphenMinus||LA240_0==SolidusEqualsSign||(LA240_0>=As && LA240_0<=If)||LA240_0==Of||LA240_0==ExclamationMark||LA240_0==LeftParenthesis||(LA240_0>=Asterisk && LA240_0<=PlusSign)||LA240_0==HyphenMinus||LA240_0==Solidus||(LA240_0>=Semicolon && LA240_0<=LessThanSign)||(LA240_0>=CommercialAt && LA240_0<=LeftSquareBracket)||LA240_0==LeftCurlyBracket||LA240_0==Tilde||LA240_0==RULE_DOUBLE||(LA240_0>=RULE_HEX_INT && LA240_0<=RULE_LEGACY_OCTAL_INT)||LA240_0==RULE_SCIENTIFIC_INT||LA240_0==RULE_IDENTIFIER||LA240_0==RULE_STRING||(LA240_0>=RULE_TEMPLATE_HEAD && LA240_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA240_0==RULE_INT) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSParser.ruleDefaultClause_return retval = new InternalN4JSParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_83); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( ((LA241_0>=Intersection && LA241_0<=Implements)||(LA241_0>=Promisify && LA241_0<=Function)||(LA241_0>=Private && LA241_0<=Delete)||(LA241_0>=Public && LA241_0<=Break)||(LA241_0>=Class && LA241_0<=This)||(LA241_0>=From && LA241_0<=With)||(LA241_0>=For && LA241_0<=Var)||LA241_0==PlusSignPlusSign||LA241_0==HyphenMinusHyphenMinus||LA241_0==SolidusEqualsSign||(LA241_0>=As && LA241_0<=If)||LA241_0==Of||LA241_0==ExclamationMark||LA241_0==LeftParenthesis||(LA241_0>=Asterisk && LA241_0<=PlusSign)||LA241_0==HyphenMinus||LA241_0==Solidus||(LA241_0>=Semicolon && LA241_0<=LessThanSign)||(LA241_0>=CommercialAt && LA241_0<=LeftSquareBracket)||LA241_0==LeftCurlyBracket||LA241_0==Tilde||LA241_0==RULE_DOUBLE||(LA241_0>=RULE_HEX_INT && LA241_0<=RULE_LEGACY_OCTAL_INT)||LA241_0==RULE_SCIENTIFIC_INT||LA241_0==RULE_IDENTIFIER||LA241_0==RULE_STRING||(LA241_0>=RULE_TEMPLATE_HEAD && LA241_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA241_0==RULE_INT) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSParser.norm1_DefaultClause_return retval = new InternalN4JSParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_83); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( ((LA242_0>=Intersection && LA242_0<=Implements)||(LA242_0>=Promisify && LA242_0<=Function)||(LA242_0>=Private && LA242_0<=Delete)||(LA242_0>=Public && LA242_0<=Break)||(LA242_0>=Class && LA242_0<=This)||(LA242_0>=From && LA242_0<=With)||(LA242_0>=For && LA242_0<=Var)||LA242_0==PlusSignPlusSign||LA242_0==HyphenMinusHyphenMinus||LA242_0==SolidusEqualsSign||(LA242_0>=As && LA242_0<=If)||LA242_0==Of||LA242_0==ExclamationMark||LA242_0==LeftParenthesis||(LA242_0>=Asterisk && LA242_0<=PlusSign)||LA242_0==HyphenMinus||LA242_0==Solidus||(LA242_0>=Semicolon && LA242_0<=LessThanSign)||(LA242_0>=CommercialAt && LA242_0<=LeftSquareBracket)||LA242_0==LeftCurlyBracket||LA242_0==Tilde||LA242_0==RULE_DOUBLE||(LA242_0>=RULE_HEX_INT && LA242_0<=RULE_LEGACY_OCTAL_INT)||LA242_0==RULE_SCIENTIFIC_INT||LA242_0==RULE_IDENTIFIER||LA242_0==RULE_STRING||(LA242_0>=RULE_TEMPLATE_HEAD && LA242_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_0==RULE_INT) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSParser.ruleLabelledStatement_return retval = new InternalN4JSParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_83);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSParser.norm1_LabelledStatement_return retval = new InternalN4JSParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_83);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSParser.ruleThrowStatement_return retval = new InternalN4JSParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ThrowStatement_return retval = new InternalN4JSParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSParser.ruleTryStatement_return retval = new InternalN4JSParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_84);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==Catch) ) {
                alt244=1;
            }
            else if ( (LA244_0==Finally) ) {
                alt244=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }
            switch (alt244) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==Finally) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSParser.norm1_TryStatement_return retval = new InternalN4JSParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_84);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==Catch) ) {
                alt246=1;
            }
            else if ( (LA246_0==Finally) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==Finally) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSParser.ruleCatchBlock_return retval = new InternalN4JSParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSParser.norm1_CatchBlock_return retval = new InternalN4JSParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSParser.ruleCatchVariable_return retval = new InternalN4JSParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt248=3;
            alt248 = dfa248.predict(input);
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_83);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt247=2;
                    alt247 = dfa247.predict(input);
                    switch (alt247) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_9);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSParser.norm1_CatchVariable_return retval = new InternalN4JSParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt250=3;
            alt250 = dfa250.predict(input);
            switch (alt250) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_83);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt249=2;
                    alt249 = dfa249.predict(input);
                    switch (alt249) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_9);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSParser.ruleFinallyBlock_return retval = new InternalN4JSParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSParser.norm1_FinallyBlock_return retval = new InternalN4JSParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSParser.ruleDebuggerStatement_return retval = new InternalN4JSParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_20); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1()); 
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryExpression_return retval = new InternalN4JSParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSParser.ruleParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;



            
        try {
            {
            int alt251=13;
            alt251 = dfa251.predict(input);
            switch (alt251) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PrimaryExpression_return retval = new InternalN4JSParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;



            
        try {
            {
            int alt252=13;
            alt252 = dfa252.predict(input);
            switch (alt252) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSParser.ruleParenExpression_return retval = new InternalN4JSParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParenExpression_return retval = new InternalN4JSParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierRef_return retval = new InternalN4JSParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSParser.norm1_IdentifierRef_return retval = new InternalN4JSParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSParser.ruleSuperLiteral_return retval = new InternalN4JSParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;


            
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSParser.ruleThisLiteral_return retval = new InternalN4JSParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSParser.ruleArrayLiteral_return retval = new InternalN4JSParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_87); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( (LA253_0==Comma) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_87);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop253;
                }
            } while (true);
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( ((LA258_0>=Intersection && LA258_0<=Implements)||(LA258_0>=Promisify && LA258_0<=Abstract)||(LA258_0>=External && LA258_0<=Function)||(LA258_0>=Private && LA258_0<=Delete)||LA258_0==Public||LA258_0==Static||(LA258_0>=Target && LA258_0<=Await)||LA258_0==Class||(LA258_0>=False && LA258_0<=Super)||LA258_0==Union||(LA258_0>=Yield && LA258_0<=This)||(LA258_0>=From && LA258_0<=Void)||LA258_0==FullStopFullStopFullStop||(LA258_0>=Get && LA258_0<=Set)||LA258_0==PlusSignPlusSign||LA258_0==HyphenMinusHyphenMinus||LA258_0==SolidusEqualsSign||LA258_0==As||LA258_0==Of||LA258_0==ExclamationMark||LA258_0==LeftParenthesis||(LA258_0>=Asterisk && LA258_0<=PlusSign)||LA258_0==HyphenMinus||LA258_0==Solidus||LA258_0==LessThanSign||(LA258_0>=CommercialAt && LA258_0<=LeftSquareBracket)||LA258_0==LeftCurlyBracket||LA258_0==Tilde||LA258_0==RULE_DOUBLE||(LA258_0>=RULE_HEX_INT && LA258_0<=RULE_LEGACY_OCTAL_INT)||LA258_0==RULE_SCIENTIFIC_INT||LA258_0==RULE_IDENTIFIER||LA258_0==RULE_STRING||(LA258_0>=RULE_TEMPLATE_HEAD && LA258_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA258_0==RULE_INT) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_88);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop255:
                    do {
                        int alt255=2;
                        alt255 = dfa255.predict(input);
                        switch (alt255) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_89); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop254:
                    	    do {
                    	        int alt254=2;
                    	        int LA254_0 = input.LA(1);

                    	        if ( (LA254_0==Comma) ) {
                    	            alt254=1;
                    	        }


                    	        switch (alt254) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_89);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop254;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_88);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop255;
                        }
                    } while (true);
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==Comma) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_88); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop256:
                            do {
                                int alt256=2;
                                int LA256_0 = input.LA(1);

                                if ( (LA256_0==Comma) ) {
                                    alt256=1;
                                }


                                switch (alt256) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_88);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop256;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayLiteral_return retval = new InternalN4JSParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_87); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==Comma) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_87);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( ((LA264_0>=Intersection && LA264_0<=Implements)||(LA264_0>=Promisify && LA264_0<=Abstract)||(LA264_0>=External && LA264_0<=Function)||(LA264_0>=Private && LA264_0<=Delete)||LA264_0==Public||LA264_0==Static||(LA264_0>=Target && LA264_0<=Await)||LA264_0==Class||(LA264_0>=False && LA264_0<=Super)||LA264_0==Union||(LA264_0>=Yield && LA264_0<=This)||(LA264_0>=From && LA264_0<=Void)||LA264_0==FullStopFullStopFullStop||(LA264_0>=Get && LA264_0<=Set)||LA264_0==PlusSignPlusSign||LA264_0==HyphenMinusHyphenMinus||LA264_0==SolidusEqualsSign||LA264_0==As||LA264_0==Of||LA264_0==ExclamationMark||LA264_0==LeftParenthesis||(LA264_0>=Asterisk && LA264_0<=PlusSign)||LA264_0==HyphenMinus||LA264_0==Solidus||LA264_0==LessThanSign||(LA264_0>=CommercialAt && LA264_0<=LeftSquareBracket)||LA264_0==LeftCurlyBracket||LA264_0==Tilde||LA264_0==RULE_DOUBLE||(LA264_0>=RULE_HEX_INT && LA264_0<=RULE_LEGACY_OCTAL_INT)||LA264_0==RULE_SCIENTIFIC_INT||LA264_0==RULE_IDENTIFIER||LA264_0==RULE_STRING||(LA264_0>=RULE_TEMPLATE_HEAD && LA264_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA264_0==RULE_INT) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_88);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop261:
                    do {
                        int alt261=2;
                        alt261 = dfa261.predict(input);
                        switch (alt261) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_89); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop260:
                    	    do {
                    	        int alt260=2;
                    	        int LA260_0 = input.LA(1);

                    	        if ( (LA260_0==Comma) ) {
                    	            alt260=1;
                    	        }


                    	        switch (alt260) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_89);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop260;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_88);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop261;
                        }
                    } while (true);
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==Comma) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_88); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop262:
                            do {
                                int alt262=2;
                                int LA262_0 = input.LA(1);

                                if ( (LA262_0==Comma) ) {
                                    alt262=1;
                                }


                                switch (alt262) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_88);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop262;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSParser.ruleArrayPadding_return retval = new InternalN4JSParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSParser.ruleArrayElement_return retval = new InternalN4JSParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==FullStopFullStopFullStop) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayElement_return retval = new InternalN4JSParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==FullStopFullStopFullStop) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSParser.ruleObjectLiteral_return retval = new InternalN4JSParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( ((LA269_0>=Intersection && LA269_0<=With)||(LA269_0>=For && LA269_0<=Var)||(LA269_0>=As && LA269_0<=Of)||LA269_0==LeftParenthesis||LA269_0==Asterisk||LA269_0==LessThanSign||(LA269_0>=QuestionMark && LA269_0<=LeftSquareBracket)||LA269_0==LeftCurlyBracket||LA269_0==Tilde||LA269_0==RULE_DOUBLE||LA269_0==RULE_HEX_INT||LA269_0==RULE_OCTAL_INT||LA269_0==RULE_SCIENTIFIC_INT||LA269_0==RULE_IDENTIFIER||LA269_0==RULE_STRING||LA269_0==RULE_INT) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop267:
                    do {
                        int alt267=2;
                        int LA267_0 = input.LA(1);

                        if ( (LA267_0==Comma) ) {
                            int LA267_1 = input.LA(2);

                            if ( ((LA267_1>=Intersection && LA267_1<=With)||(LA267_1>=For && LA267_1<=Var)||(LA267_1>=As && LA267_1<=Of)||LA267_1==LeftParenthesis||LA267_1==Asterisk||LA267_1==LessThanSign||(LA267_1>=QuestionMark && LA267_1<=LeftSquareBracket)||LA267_1==LeftCurlyBracket||LA267_1==Tilde||LA267_1==RULE_DOUBLE||LA267_1==RULE_HEX_INT||LA267_1==RULE_OCTAL_INT||LA267_1==RULE_SCIENTIFIC_INT||LA267_1==RULE_IDENTIFIER||LA267_1==RULE_STRING||LA267_1==RULE_INT) ) {
                                alt267=1;
                            }


                        }


                        switch (alt267) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_91); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop267;
                        }
                    } while (true);
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==Comma) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectLiteral_return retval = new InternalN4JSParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( ((LA272_0>=Intersection && LA272_0<=With)||(LA272_0>=For && LA272_0<=Var)||(LA272_0>=As && LA272_0<=Of)||LA272_0==LeftParenthesis||LA272_0==Asterisk||LA272_0==LessThanSign||(LA272_0>=QuestionMark && LA272_0<=LeftSquareBracket)||LA272_0==LeftCurlyBracket||LA272_0==Tilde||LA272_0==RULE_DOUBLE||LA272_0==RULE_HEX_INT||LA272_0==RULE_OCTAL_INT||LA272_0==RULE_SCIENTIFIC_INT||LA272_0==RULE_IDENTIFIER||LA272_0==RULE_STRING||LA272_0==RULE_INT) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop270:
                    do {
                        int alt270=2;
                        int LA270_0 = input.LA(1);

                        if ( (LA270_0==Comma) ) {
                            int LA270_1 = input.LA(2);

                            if ( ((LA270_1>=Intersection && LA270_1<=With)||(LA270_1>=For && LA270_1<=Var)||(LA270_1>=As && LA270_1<=Of)||LA270_1==LeftParenthesis||LA270_1==Asterisk||LA270_1==LessThanSign||(LA270_1>=QuestionMark && LA270_1<=LeftSquareBracket)||LA270_1==LeftCurlyBracket||LA270_1==Tilde||LA270_1==RULE_DOUBLE||LA270_1==RULE_HEX_INT||LA270_1==RULE_OCTAL_INT||LA270_1==RULE_SCIENTIFIC_INT||LA270_1==RULE_IDENTIFIER||LA270_1==RULE_STRING||LA270_1==RULE_INT) ) {
                                alt270=1;
                            }


                        }


                        switch (alt270) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_91); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop270;
                        }
                    } while (true);
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==Comma) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignment_return retval = new InternalN4JSParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt273=6;
            alt273 = dfa273.predict(input);
            switch (alt273) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyAssignment_return retval = new InternalN4JSParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt274=6;
            alt274 = dfa274.predict(input);
            switch (alt274) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_92);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt282=5;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt275=2;
                    alt275 = dfa275.predict(input);
                    switch (alt275) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_93);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_83);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    FparFormalParameterParserRuleCall_1_2_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==LessThanSign) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_94);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt277=2;
                    alt277 = dfa277.predict(input);
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_94);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==Asterisk) ) {
                        alt278=1;
                    }
                    else if ( ((LA278_0>=Intersection && LA278_0<=With)||(LA278_0>=For && LA278_0<=Var)||(LA278_0>=As && LA278_0<=Of)||LA278_0==LeftSquareBracket||LA278_0==RULE_DOUBLE||LA278_0==RULE_HEX_INT||LA278_0==RULE_OCTAL_INT||LA278_0==RULE_SCIENTIFIC_INT||LA278_0==RULE_IDENTIFIER||LA278_0==RULE_STRING||LA278_0==RULE_INT) ) {
                        alt278=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 278, 0, input);

                        throw nvae;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==Semicolon) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt280=2;
                    alt280 = dfa280.predict(input);
                    switch (alt280) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_60);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==EqualsSign) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_92);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt290=5;
            alt290 = dfa290.predict(input);
            switch (alt290) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt283=2;
                    alt283 = dfa283.predict(input);
                    switch (alt283) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_93);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_83);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    FparFormalParameterParserRuleCall_1_2_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==LessThanSign) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_94);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt285=2;
                    alt285 = dfa285.predict(input);
                    switch (alt285) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_94);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==Asterisk) ) {
                        alt286=1;
                    }
                    else if ( ((LA286_0>=Intersection && LA286_0<=With)||(LA286_0>=For && LA286_0<=Var)||(LA286_0>=As && LA286_0<=Of)||LA286_0==LeftSquareBracket||LA286_0==RULE_DOUBLE||LA286_0==RULE_HEX_INT||LA286_0==RULE_OCTAL_INT||LA286_0==RULE_SCIENTIFIC_INT||LA286_0==RULE_IDENTIFIER||LA286_0==RULE_STRING||LA286_0==RULE_INT) ) {
                        alt286=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 0, input);

                        throw nvae;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==Semicolon) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt288=2;
                    alt288 = dfa288.predict(input);
                    switch (alt288) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_60);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==EqualsSign) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==LessThanSign) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    {
                    pushFollow(FOLLOW_94);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt292=2;
            alt292 = dfa292.predict(input);
            switch (alt292) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_94);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==Asterisk) ) {
                alt293=1;
            }
            else if ( ((LA293_0>=Intersection && LA293_0<=With)||(LA293_0>=For && LA293_0<=Var)||(LA293_0>=As && LA293_0<=Of)||LA293_0==LeftSquareBracket||LA293_0==RULE_DOUBLE||LA293_0==RULE_HEX_INT||LA293_0==RULE_OCTAL_INT||LA293_0==RULE_SCIENTIFIC_INT||LA293_0==RULE_IDENTIFIER||LA293_0==RULE_STRING||LA293_0==RULE_INT) ) {
                alt293=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                throw nvae;
            }
            switch (alt293) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_41);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==Semicolon) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==LessThanSign) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    pushFollow(FOLLOW_94);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt296=2;
            alt296 = dfa296.predict(input);
            switch (alt296) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_94);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==Asterisk) ) {
                alt297=1;
            }
            else if ( ((LA297_0>=Intersection && LA297_0<=With)||(LA297_0>=For && LA297_0<=Var)||(LA297_0>=As && LA297_0<=Of)||LA297_0==LeftSquareBracket||LA297_0==RULE_DOUBLE||LA297_0==RULE_HEX_INT||LA297_0==RULE_OCTAL_INT||LA297_0==RULE_SCIENTIFIC_INT||LA297_0==RULE_IDENTIFIER||LA297_0==RULE_STRING||LA297_0==RULE_INT) ) {
                alt297=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 297, 0, input);

                throw nvae;
            }
            switch (alt297) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_41);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==Semicolon) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePair_return retval = new InternalN4JSParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt299=2;
            alt299 = dfa299.predict(input);
            switch (alt299) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_83);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt300=2;
            alt300 = dfa300.predict(input);
            switch (alt300) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_83);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt301=2;
            alt301 = dfa301.predict(input);
            switch (alt301) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_60);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==EqualsSign) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt303=2;
            alt303 = dfa303.predict(input);
            switch (alt303) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_60);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==EqualsSign) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertySetterDeclaration_return retval = new InternalN4JSParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedCallExpression_return retval = new InternalN4JSParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_9);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_9);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.ruleLeftHandSideExpression_return retval = new InternalN4JSParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_96);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==LeftParenthesis) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_97);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop305:
                    do {
                        int alt305=5;
                        int LA305_0 = input.LA(1);

                        if ( (LA305_0==LeftParenthesis) ) {
                            alt305=1;
                        }
                        else if ( (LA305_0==LeftSquareBracket) ) {
                            alt305=2;
                        }
                        else if ( (LA305_0==FullStop) ) {
                            alt305=3;
                        }
                        else if ( (LA305_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred179_InternalN4JSParser())) {
                            alt305=4;
                        }
                        else if ( (LA305_0==RULE_TEMPLATE_HEAD) && (synpred179_InternalN4JSParser())) {
                            alt305=4;
                        }


                        switch (alt305) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop305;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_96);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==LeftParenthesis) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_97);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop307:
                    do {
                        int alt307=5;
                        int LA307_0 = input.LA(1);

                        if ( (LA307_0==LeftParenthesis) ) {
                            alt307=1;
                        }
                        else if ( (LA307_0==LeftSquareBracket) ) {
                            alt307=2;
                        }
                        else if ( (LA307_0==FullStop) ) {
                            alt307=3;
                        }
                        else if ( (LA307_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred180_InternalN4JSParser())) {
                            alt307=4;
                        }
                        else if ( (LA307_0==RULE_TEMPLATE_HEAD) && (synpred180_InternalN4JSParser())) {
                            alt307=4;
                        }


                        switch (alt307) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop307;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( ((LA309_0>=Intersection && LA309_0<=Implements)||(LA309_0>=Promisify && LA309_0<=Abstract)||(LA309_0>=External && LA309_0<=Function)||(LA309_0>=Private && LA309_0<=Delete)||LA309_0==Public||LA309_0==Static||(LA309_0>=Target && LA309_0<=Await)||LA309_0==Class||(LA309_0>=False && LA309_0<=Super)||LA309_0==Union||(LA309_0>=Yield && LA309_0<=This)||(LA309_0>=From && LA309_0<=Void)||LA309_0==FullStopFullStopFullStop||(LA309_0>=Get && LA309_0<=Set)||LA309_0==PlusSignPlusSign||LA309_0==HyphenMinusHyphenMinus||LA309_0==SolidusEqualsSign||LA309_0==As||LA309_0==Of||LA309_0==ExclamationMark||LA309_0==LeftParenthesis||(LA309_0>=Asterisk && LA309_0<=PlusSign)||LA309_0==HyphenMinus||LA309_0==Solidus||LA309_0==LessThanSign||(LA309_0>=CommercialAt && LA309_0<=LeftSquareBracket)||LA309_0==LeftCurlyBracket||LA309_0==Tilde||LA309_0==RULE_DOUBLE||(LA309_0>=RULE_HEX_INT && LA309_0<=RULE_LEGACY_OCTAL_INT)||LA309_0==RULE_SCIENTIFIC_INT||LA309_0==RULE_IDENTIFIER||LA309_0==RULE_STRING||(LA309_0>=RULE_TEMPLATE_HEAD && LA309_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA309_0==RULE_INT) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    pushFollow(FOLLOW_66);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( ((LA310_0>=Intersection && LA310_0<=Implements)||(LA310_0>=Promisify && LA310_0<=Abstract)||(LA310_0>=External && LA310_0<=Function)||(LA310_0>=Private && LA310_0<=Delete)||LA310_0==Public||LA310_0==Static||(LA310_0>=Target && LA310_0<=Await)||LA310_0==Class||(LA310_0>=False && LA310_0<=Super)||LA310_0==Union||(LA310_0>=Yield && LA310_0<=This)||(LA310_0>=From && LA310_0<=Void)||LA310_0==FullStopFullStopFullStop||(LA310_0>=Get && LA310_0<=Set)||LA310_0==PlusSignPlusSign||LA310_0==HyphenMinusHyphenMinus||LA310_0==SolidusEqualsSign||LA310_0==As||LA310_0==Of||LA310_0==ExclamationMark||LA310_0==LeftParenthesis||(LA310_0>=Asterisk && LA310_0<=PlusSign)||LA310_0==HyphenMinus||LA310_0==Solidus||LA310_0==LessThanSign||(LA310_0>=CommercialAt && LA310_0<=LeftSquareBracket)||LA310_0==LeftCurlyBracket||LA310_0==Tilde||LA310_0==RULE_DOUBLE||(LA310_0>=RULE_HEX_INT && LA310_0<=RULE_LEGACY_OCTAL_INT)||LA310_0==RULE_SCIENTIFIC_INT||LA310_0==RULE_IDENTIFIER||LA310_0==RULE_STRING||(LA310_0>=RULE_TEMPLATE_HEAD && LA310_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA310_0==RULE_INT) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    pushFollow(FOLLOW_66);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSParser.ruleArguments_return retval = new InternalN4JSParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_33);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);

                if ( (LA311_0==Comma) ) {
                    alt311=1;
                }


                switch (alt311) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_33);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop311;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSParser.norm1_Arguments_return retval = new InternalN4JSParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_33);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop312:
            do {
                int alt312=2;
                int LA312_0 = input.LA(1);

                if ( (LA312_0==Comma) ) {
                    alt312=1;
                }


                switch (alt312) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_33);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop312;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSParser.ruleArgument_return retval = new InternalN4JSParser.ruleArgument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==FullStopFullStopFullStop) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSParser.norm1_Argument_return retval = new InternalN4JSParser.norm1_Argument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==FullStopFullStopFullStop) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleTypeArguments_return retval = new InternalN4JSParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_17);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1()); 
            }

            }


            }
            loop315:
            do {
                int alt315=2;
                int LA315_0 = input.LA(1);

                if ( (LA315_0==Comma) ) {
                    alt315=1;
                }


                switch (alt315) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_17);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop315;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSParser.ruleMemberExpression_return retval = new InternalN4JSParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt321=3;
            alt321 = dfa321.predict(input);
            switch (alt321) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_103);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==LessThanSign) ) {
                        int LA316_1 = input.LA(2);

                        if ( (synpred183_InternalN4JSParser()) ) {
                            alt316=1;
                        }
                    }
                    switch (alt316) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt319=2;
                    int LA319_0 = input.LA(1);

                    if ( (LA319_0==LeftParenthesis) ) {
                        int LA319_1 = input.LA(2);

                        if ( (synpred184_InternalN4JSParser()) ) {
                            alt319=1;
                        }
                    }
                    switch (alt319) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt317=2;
                            int LA317_0 = input.LA(1);

                            if ( ((LA317_0>=Intersection && LA317_0<=Implements)||(LA317_0>=Promisify && LA317_0<=Abstract)||(LA317_0>=External && LA317_0<=Function)||(LA317_0>=Private && LA317_0<=Delete)||LA317_0==Public||LA317_0==Static||(LA317_0>=Target && LA317_0<=Await)||LA317_0==Class||(LA317_0>=False && LA317_0<=Super)||LA317_0==Union||(LA317_0>=Yield && LA317_0<=This)||(LA317_0>=From && LA317_0<=Void)||LA317_0==FullStopFullStopFullStop||(LA317_0>=Get && LA317_0<=Set)||LA317_0==PlusSignPlusSign||LA317_0==HyphenMinusHyphenMinus||LA317_0==SolidusEqualsSign||LA317_0==As||LA317_0==Of||LA317_0==ExclamationMark||LA317_0==LeftParenthesis||(LA317_0>=Asterisk && LA317_0<=PlusSign)||LA317_0==HyphenMinus||LA317_0==Solidus||LA317_0==LessThanSign||(LA317_0>=CommercialAt && LA317_0<=LeftSquareBracket)||LA317_0==LeftCurlyBracket||LA317_0==Tilde||LA317_0==RULE_DOUBLE||(LA317_0>=RULE_HEX_INT && LA317_0<=RULE_LEGACY_OCTAL_INT)||LA317_0==RULE_SCIENTIFIC_INT||LA317_0==RULE_IDENTIFIER||LA317_0==RULE_STRING||(LA317_0>=RULE_TEMPLATE_HEAD && LA317_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA317_0==RULE_INT) ) {
                                alt317=1;
                            }
                            switch (alt317) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_66);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop318:
                            do {
                                int alt318=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt318=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt318=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt318=3;
                                    }
                                    break;

                                }

                                switch (alt318) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop318;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop320:
                    do {
                        int alt320=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt320=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt320=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt320=3;
                            }
                            break;

                        }

                        switch (alt320) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop320;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MemberExpression_return retval = new InternalN4JSParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt327=3;
            alt327 = dfa327.predict(input);
            switch (alt327) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_103);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( (LA322_0==LessThanSign) ) {
                        int LA322_1 = input.LA(2);

                        if ( (synpred187_InternalN4JSParser()) ) {
                            alt322=1;
                        }
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==LeftParenthesis) ) {
                        int LA325_1 = input.LA(2);

                        if ( (synpred188_InternalN4JSParser()) ) {
                            alt325=1;
                        }
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt323=2;
                            int LA323_0 = input.LA(1);

                            if ( ((LA323_0>=Intersection && LA323_0<=Implements)||(LA323_0>=Promisify && LA323_0<=Abstract)||(LA323_0>=External && LA323_0<=Function)||(LA323_0>=Private && LA323_0<=Delete)||LA323_0==Public||LA323_0==Static||(LA323_0>=Target && LA323_0<=Await)||LA323_0==Class||(LA323_0>=False && LA323_0<=Super)||LA323_0==Union||(LA323_0>=Yield && LA323_0<=This)||(LA323_0>=From && LA323_0<=Void)||LA323_0==FullStopFullStopFullStop||(LA323_0>=Get && LA323_0<=Set)||LA323_0==PlusSignPlusSign||LA323_0==HyphenMinusHyphenMinus||LA323_0==SolidusEqualsSign||LA323_0==As||LA323_0==Of||LA323_0==ExclamationMark||LA323_0==LeftParenthesis||(LA323_0>=Asterisk && LA323_0<=PlusSign)||LA323_0==HyphenMinus||LA323_0==Solidus||LA323_0==LessThanSign||(LA323_0>=CommercialAt && LA323_0<=LeftSquareBracket)||LA323_0==LeftCurlyBracket||LA323_0==Tilde||LA323_0==RULE_DOUBLE||(LA323_0>=RULE_HEX_INT && LA323_0<=RULE_LEGACY_OCTAL_INT)||LA323_0==RULE_SCIENTIFIC_INT||LA323_0==RULE_IDENTIFIER||LA323_0==RULE_STRING||(LA323_0>=RULE_TEMPLATE_HEAD && LA323_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA323_0==RULE_INT) ) {
                                alt323=1;
                            }
                            switch (alt323) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_66);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop324:
                            do {
                                int alt324=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt324=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt324=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt324=3;
                                    }
                                    break;

                                }

                                switch (alt324) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop324;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop326:
                    do {
                        int alt326=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt326=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt326=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt326=3;
                            }
                            break;

                        }

                        switch (alt326) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop326;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_104);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_104);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==LessThanSign) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    pushFollow(FOLLOW_27);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==LessThanSign) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    pushFollow(FOLLOW_27);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSParser.rulePostfixExpression_return retval = new InternalN4JSParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_106);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==PlusSignPlusSign) && (synpred189_InternalN4JSParser())) {
                alt330=1;
            }
            else if ( (LA330_0==HyphenMinusHyphenMinus) && (synpred189_InternalN4JSParser())) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PostfixExpression_return retval = new InternalN4JSParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_106);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==PlusSignPlusSign) && (synpred190_InternalN4JSParser())) {
                alt331=1;
            }
            else if ( (LA331_0==HyphenMinusHyphenMinus) && (synpred190_InternalN4JSParser())) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSParser.ruleCastExpression_return retval = new InternalN4JSParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_26);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==As) && (synpred191_InternalN4JSParser())) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CastExpression_return retval = new InternalN4JSParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_26);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==As) && (synpred192_InternalN4JSParser())) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnaryExpression_return retval = new InternalN4JSParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( ((LA334_0>=Intersection && LA334_0<=Implements)||(LA334_0>=Promisify && LA334_0<=Abstract)||(LA334_0>=External && LA334_0<=Function)||(LA334_0>=Private && LA334_0<=Project)||LA334_0==Public||LA334_0==Static||LA334_0==Target||(LA334_0>=Async && LA334_0<=Await)||LA334_0==Class||(LA334_0>=False && LA334_0<=Super)||LA334_0==Union||(LA334_0>=Yield && LA334_0<=This)||(LA334_0>=From && LA334_0<=Type)||(LA334_0>=Get && LA334_0<=Set)||LA334_0==SolidusEqualsSign||LA334_0==As||LA334_0==Of||LA334_0==LeftParenthesis||LA334_0==Solidus||LA334_0==LessThanSign||(LA334_0>=CommercialAt && LA334_0<=LeftSquareBracket)||LA334_0==LeftCurlyBracket||LA334_0==RULE_DOUBLE||(LA334_0>=RULE_HEX_INT && LA334_0<=RULE_LEGACY_OCTAL_INT)||LA334_0==RULE_SCIENTIFIC_INT||LA334_0==RULE_IDENTIFIER||LA334_0==RULE_STRING||(LA334_0>=RULE_TEMPLATE_HEAD && LA334_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA334_0==RULE_INT) ) {
                alt334=1;
            }
            else if ( (LA334_0==Delete||LA334_0==Typeof||LA334_0==Void||LA334_0==PlusSignPlusSign||LA334_0==HyphenMinusHyphenMinus||LA334_0==ExclamationMark||LA334_0==PlusSign||LA334_0==HyphenMinus||LA334_0==Tilde) ) {
                alt334=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);

                throw nvae;
            }
            switch (alt334) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_54);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_UnaryExpression_return retval = new InternalN4JSParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( ((LA335_0>=Intersection && LA335_0<=Implements)||(LA335_0>=Promisify && LA335_0<=Abstract)||(LA335_0>=External && LA335_0<=Function)||(LA335_0>=Private && LA335_0<=Project)||LA335_0==Public||LA335_0==Static||LA335_0==Target||(LA335_0>=Async && LA335_0<=Await)||LA335_0==Class||(LA335_0>=False && LA335_0<=Super)||LA335_0==Union||LA335_0==This||(LA335_0>=From && LA335_0<=Type)||(LA335_0>=Get && LA335_0<=Set)||LA335_0==SolidusEqualsSign||LA335_0==As||LA335_0==Of||LA335_0==LeftParenthesis||LA335_0==Solidus||LA335_0==LessThanSign||(LA335_0>=CommercialAt && LA335_0<=LeftSquareBracket)||LA335_0==LeftCurlyBracket||LA335_0==RULE_DOUBLE||(LA335_0>=RULE_HEX_INT && LA335_0<=RULE_LEGACY_OCTAL_INT)||LA335_0==RULE_SCIENTIFIC_INT||LA335_0==RULE_IDENTIFIER||LA335_0==RULE_STRING||(LA335_0>=RULE_TEMPLATE_HEAD && LA335_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA335_0==RULE_INT) ) {
                alt335=1;
            }
            else if ( (LA335_0==Delete||LA335_0==Typeof||LA335_0==Void||LA335_0==PlusSignPlusSign||LA335_0==HyphenMinusHyphenMinus||LA335_0==ExclamationMark||LA335_0==PlusSign||LA335_0==HyphenMinus||LA335_0==Tilde) ) {
                alt335=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 335, 0, input);

                throw nvae;
            }
            switch (alt335) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_54);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.ruleMultiplicativeExpression_return retval = new InternalN4JSParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_108);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop336:
            do {
                int alt336=2;
                int LA336_0 = input.LA(1);

                if ( (LA336_0==Asterisk) && (synpred193_InternalN4JSParser())) {
                    alt336=1;
                }
                else if ( (LA336_0==Solidus) && (synpred193_InternalN4JSParser())) {
                    alt336=1;
                }
                else if ( (LA336_0==PercentSign) && (synpred193_InternalN4JSParser())) {
                    alt336=1;
                }


                switch (alt336) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_108);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop336;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_108);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop337:
            do {
                int alt337=2;
                int LA337_0 = input.LA(1);

                if ( (LA337_0==Asterisk) && (synpred194_InternalN4JSParser())) {
                    alt337=1;
                }
                else if ( (LA337_0==Solidus) && (synpred194_InternalN4JSParser())) {
                    alt337=1;
                }
                else if ( (LA337_0==PercentSign) && (synpred194_InternalN4JSParser())) {
                    alt337=1;
                }


                switch (alt337) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_108);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop337;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSParser.ruleAdditiveExpression_return retval = new InternalN4JSParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_109);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop338:
            do {
                int alt338=2;
                int LA338_0 = input.LA(1);

                if ( (LA338_0==PlusSign) && (synpred195_InternalN4JSParser())) {
                    alt338=1;
                }
                else if ( (LA338_0==HyphenMinus) && (synpred195_InternalN4JSParser())) {
                    alt338=1;
                }


                switch (alt338) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_109);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop338;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AdditiveExpression_return retval = new InternalN4JSParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_109);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop339:
            do {
                int alt339=2;
                int LA339_0 = input.LA(1);

                if ( (LA339_0==PlusSign) && (synpred196_InternalN4JSParser())) {
                    alt339=1;
                }
                else if ( (LA339_0==HyphenMinus) && (synpred196_InternalN4JSParser())) {
                    alt339=1;
                }


                switch (alt339) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_109);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop339;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSParser.ruleShiftExpression_return retval = new InternalN4JSParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_110);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop340:
            do {
                int alt340=2;
                alt340 = dfa340.predict(input);
                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_110);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ShiftExpression_return retval = new InternalN4JSParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_110);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop341:
            do {
                int alt341=2;
                alt341 = dfa341.predict(input);
                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_110);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSParser.ruleShiftOperator_return retval = new InternalN4JSParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;


            
        try {
            {
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==GreaterThanSign) ) {
                alt343=1;
            }
            else if ( (LA343_0==LessThanSignLessThanSign) ) {
                alt343=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);

                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0()); 
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1()); 
                    }
                    int alt342=2;
                    int LA342_0 = input.LA(1);

                    if ( (LA342_0==GreaterThanSign) ) {
                        alt342=1;
                    }
                    switch (alt342) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSParser.ruleRelationalExpression_return retval = new InternalN4JSParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_113);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop344:
            do {
                int alt344=2;
                alt344 = dfa344.predict(input);
                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_113);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalExpression_return retval = new InternalN4JSParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_114);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                alt345 = dfa345.predict(input);
                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_114);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_RelationalExpression_return retval = new InternalN4JSParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_113);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                alt346 = dfa346.predict(input);
                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_113);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_RelationalExpression_return retval = new InternalN4JSParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_114);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                alt347 = dfa347.predict(input);
                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_114);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSParser.ruleRelationalOperator_return retval = new InternalN4JSParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;


            
        try {
            {
            int alt348=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt348=1;
                }
                break;
            case GreaterThanSign:
                {
                alt348=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt348=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt348=4;
                }
                break;
            case Instanceof:
                {
                alt348=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);

                throw nvae;
            }

            switch (alt348) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalOperator_return retval = new InternalN4JSParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;


            
        try {
            {
            int alt349=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt349=1;
                }
                break;
            case GreaterThanSign:
                {
                alt349=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt349=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt349=4;
                }
                break;
            case Instanceof:
                {
                alt349=5;
                }
                break;
            case In:
                {
                alt349=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);

                throw nvae;
            }

            switch (alt349) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSParser.ruleEqualityExpression_return retval = new InternalN4JSParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==EqualsSignEqualsSignEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==ExclamationMarkEqualsSignEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==EqualsSignEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==ExclamationMarkEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm1_EqualityExpression_return retval = new InternalN4JSParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==EqualsSignEqualsSignEqualsSign) && (synpred208_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==ExclamationMarkEqualsSignEqualsSign) && (synpred208_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==EqualsSignEqualsSign) && (synpred208_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==ExclamationMarkEqualsSign) && (synpred208_InternalN4JSParser())) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm2_EqualityExpression_return retval = new InternalN4JSParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);

                if ( (LA352_0==EqualsSignEqualsSignEqualsSign) && (synpred209_InternalN4JSParser())) {
                    alt352=1;
                }
                else if ( (LA352_0==ExclamationMarkEqualsSignEqualsSign) && (synpred209_InternalN4JSParser())) {
                    alt352=1;
                }
                else if ( (LA352_0==EqualsSignEqualsSign) && (synpred209_InternalN4JSParser())) {
                    alt352=1;
                }
                else if ( (LA352_0==ExclamationMarkEqualsSign) && (synpred209_InternalN4JSParser())) {
                    alt352=1;
                }


                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm3_EqualityExpression_return retval = new InternalN4JSParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==EqualsSignEqualsSignEqualsSign) && (synpred210_InternalN4JSParser())) {
                    alt353=1;
                }
                else if ( (LA353_0==ExclamationMarkEqualsSignEqualsSign) && (synpred210_InternalN4JSParser())) {
                    alt353=1;
                }
                else if ( (LA353_0==EqualsSignEqualsSign) && (synpred210_InternalN4JSParser())) {
                    alt353=1;
                }
                else if ( (LA353_0==ExclamationMarkEqualsSign) && (synpred210_InternalN4JSParser())) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDExpression_return retval = new InternalN4JSParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==Ampersand) && (synpred211_InternalN4JSParser())) {
                    alt354=1;
                }


                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==Ampersand) && (synpred212_InternalN4JSParser())) {
                    alt355=1;
                }


                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==Ampersand) && (synpred213_InternalN4JSParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==Ampersand) && (synpred214_InternalN4JSParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDOperator_return retval = new InternalN4JSParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;


            
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXORExpression_return retval = new InternalN4JSParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==CircumflexAccent) && (synpred215_InternalN4JSParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==CircumflexAccent) && (synpred216_InternalN4JSParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==CircumflexAccent) && (synpred217_InternalN4JSParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==CircumflexAccent) && (synpred218_InternalN4JSParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXOROperator_return retval = new InternalN4JSParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;


            
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseORExpression_return retval = new InternalN4JSParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==VerticalLine) && (synpred219_InternalN4JSParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseORExpression_return retval = new InternalN4JSParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==VerticalLine) && (synpred220_InternalN4JSParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseORExpression_return retval = new InternalN4JSParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==VerticalLine) && (synpred221_InternalN4JSParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseORExpression_return retval = new InternalN4JSParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==VerticalLine) && (synpred222_InternalN4JSParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseOROperator_return retval = new InternalN4JSParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;


            
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDExpression_return retval = new InternalN4JSParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==AmpersandAmpersand) && (synpred223_InternalN4JSParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalANDExpression_return retval = new InternalN4JSParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==AmpersandAmpersand) && (synpred224_InternalN4JSParser())) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalANDExpression_return retval = new InternalN4JSParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==AmpersandAmpersand) && (synpred225_InternalN4JSParser())) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalANDExpression_return retval = new InternalN4JSParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);

                if ( (LA369_0==AmpersandAmpersand) && (synpred226_InternalN4JSParser())) {
                    alt369=1;
                }


                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop369;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDOperator_return retval = new InternalN4JSParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;


            
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalORExpression_return retval = new InternalN4JSParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_120);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);

                if ( (LA370_0==VerticalLineVerticalLine) && (synpred227_InternalN4JSParser())) {
                    alt370=1;
                }


                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop370;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalORExpression_return retval = new InternalN4JSParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_120);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);

                if ( (LA371_0==VerticalLineVerticalLine) && (synpred228_InternalN4JSParser())) {
                    alt371=1;
                }


                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop371;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalORExpression_return retval = new InternalN4JSParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_120);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);

                if ( (LA372_0==VerticalLineVerticalLine) && (synpred229_InternalN4JSParser())) {
                    alt372=1;
                }


                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop372;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalORExpression_return retval = new InternalN4JSParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_120);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);

                if ( (LA373_0==VerticalLineVerticalLine) && (synpred230_InternalN4JSParser())) {
                    alt373=1;
                }


                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop373;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalOROperator_return retval = new InternalN4JSParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;


            
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSParser.ruleConditionalExpression_return retval = new InternalN4JSParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt374=2;
            int LA374_0 = input.LA(1);

            if ( (LA374_0==QuestionMark) && (synpred231_InternalN4JSParser())) {
                alt374=1;
            }
            switch (alt374) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_83);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ConditionalExpression_return retval = new InternalN4JSParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt375=2;
            int LA375_0 = input.LA(1);

            if ( (LA375_0==QuestionMark) && (synpred232_InternalN4JSParser())) {
                alt375=1;
            }
            switch (alt375) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_83);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ConditionalExpression_return retval = new InternalN4JSParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt376=2;
            int LA376_0 = input.LA(1);

            if ( (LA376_0==QuestionMark) && (synpred233_InternalN4JSParser())) {
                alt376=1;
            }
            switch (alt376) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_83);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ConditionalExpression_return retval = new InternalN4JSParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==QuestionMark) && (synpred234_InternalN4JSParser())) {
                alt377=1;
            }
            switch (alt377) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_83);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpression_return retval = new InternalN4JSParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt379=4;
            alt379 = dfa379.predict(input);
            switch (alt379) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_122);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt378=2;
                    alt378 = dfa378.predict(input);
                    switch (alt378) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpression_return retval = new InternalN4JSParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt381=4;
            alt381 = dfa381.predict(input);
            switch (alt381) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_122);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt380=2;
                    alt380 = dfa380.predict(input);
                    switch (alt380) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AssignmentExpression_return retval = new InternalN4JSParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt383=5;
            alt383 = dfa383.predict(input);
            switch (alt383) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_122);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt382=2;
                    alt382 = dfa382.predict(input);
                    switch (alt382) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AssignmentExpression_return retval = new InternalN4JSParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt385=5;
            alt385 = dfa385.predict(input);
            switch (alt385) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_122);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt384=2;
                    alt384 = dfa384.predict(input);
                    switch (alt384) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSParser.ruleYieldExpression_return retval = new InternalN4JSParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt386=2;
            alt386 = dfa386.predict(input);
            switch (alt386) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt387=2;
            alt387 = dfa387.predict(input);
            switch (alt387) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSParser.norm1_YieldExpression_return retval = new InternalN4JSParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt388=2;
            alt388 = dfa388.predict(input);
            switch (alt388) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt389=2;
            alt389 = dfa389.predict(input);
            switch (alt389) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperator_return retval = new InternalN4JSParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;


            
        try {
            {
            int alt391=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt391=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt391=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt391=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt391=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt391=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt391=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt391=7;
                }
                break;
            case GreaterThanSign:
                {
                alt391=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt391=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt391=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt391=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 391, 0, input);

                throw nvae;
            }

            switch (alt391) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0()); 
                    }
                    int alt390=2;
                    int LA390_0 = input.LA(1);

                    if ( (LA390_0==GreaterThanSign) ) {
                        alt390=1;
                    }
                    switch (alt390) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_125); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1()); 
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSParser.ruleAwaitExpression_return retval = new InternalN4JSParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AwaitExpression_return retval = new InternalN4JSParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AwaitExpression_return retval = new InternalN4JSParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AwaitExpression_return retval = new InternalN4JSParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSParser.rulePromisifyExpression_return retval = new InternalN4JSParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PromisifyExpression_return retval = new InternalN4JSParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm2_PromisifyExpression_return retval = new InternalN4JSParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm3_PromisifyExpression_return retval = new InternalN4JSParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSParser.ruleExpression_return retval = new InternalN4JSParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==Comma) ) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop392:
                    do {
                        int alt392=2;
                        int LA392_0 = input.LA(1);

                        if ( (LA392_0==Comma) ) {
                            alt392=1;
                        }


                        switch (alt392) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop392;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSParser.norm1_Expression_return retval = new InternalN4JSParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt395=2;
            int LA395_0 = input.LA(1);

            if ( (LA395_0==Comma) ) {
                alt395=1;
            }
            switch (alt395) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop394:
                    do {
                        int alt394=2;
                        int LA394_0 = input.LA(1);

                        if ( (LA394_0==Comma) ) {
                            alt394=1;
                        }


                        switch (alt394) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop394;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSParser.norm2_Expression_return retval = new InternalN4JSParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt397=2;
            int LA397_0 = input.LA(1);

            if ( (LA397_0==Comma) ) {
                alt397=1;
            }
            switch (alt397) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop396:
                    do {
                        int alt396=2;
                        int LA396_0 = input.LA(1);

                        if ( (LA396_0==Comma) ) {
                            alt396=1;
                        }


                        switch (alt396) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop396;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSParser.norm3_Expression_return retval = new InternalN4JSParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt399=2;
            int LA399_0 = input.LA(1);

            if ( (LA399_0==Comma) ) {
                alt399=1;
            }
            switch (alt399) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop398:
                    do {
                        int alt398=2;
                        int LA398_0 = input.LA(1);

                        if ( (LA398_0==Comma) ) {
                            alt398=1;
                        }


                        switch (alt398) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop398;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateLiteral_return retval = new InternalN4JSParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt403=2;
            int LA403_0 = input.LA(1);

            if ( (LA403_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt403=1;
            }
            else if ( (LA403_0==RULE_TEMPLATE_HEAD) ) {
                alt403=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 403, 0, input);

                throw nvae;
            }
            switch (alt403) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_127);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt400=2;
                    int LA400_0 = input.LA(1);

                    if ( ((LA400_0>=Intersection && LA400_0<=Implements)||(LA400_0>=Promisify && LA400_0<=Abstract)||(LA400_0>=External && LA400_0<=Function)||(LA400_0>=Private && LA400_0<=Delete)||LA400_0==Public||LA400_0==Static||(LA400_0>=Target && LA400_0<=Await)||LA400_0==Class||(LA400_0>=False && LA400_0<=Super)||LA400_0==Union||(LA400_0>=Yield && LA400_0<=This)||(LA400_0>=From && LA400_0<=Void)||(LA400_0>=Get && LA400_0<=Set)||LA400_0==PlusSignPlusSign||LA400_0==HyphenMinusHyphenMinus||LA400_0==SolidusEqualsSign||LA400_0==As||LA400_0==Of||LA400_0==ExclamationMark||LA400_0==LeftParenthesis||(LA400_0>=Asterisk && LA400_0<=PlusSign)||LA400_0==HyphenMinus||LA400_0==Solidus||LA400_0==LessThanSign||(LA400_0>=CommercialAt && LA400_0<=LeftSquareBracket)||LA400_0==LeftCurlyBracket||LA400_0==Tilde||LA400_0==RULE_DOUBLE||(LA400_0>=RULE_HEX_INT && LA400_0<=RULE_LEGACY_OCTAL_INT)||LA400_0==RULE_SCIENTIFIC_INT||LA400_0==RULE_IDENTIFIER||LA400_0==RULE_STRING||(LA400_0>=RULE_TEMPLATE_HEAD && LA400_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA400_0==RULE_INT) ) {
                        alt400=1;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_127);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_128);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop402:
                    do {
                        int alt402=2;
                        int LA402_0 = input.LA(1);

                        if ( (LA402_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt402=1;
                        }


                        switch (alt402) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_127);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt401=2;
                    	    int LA401_0 = input.LA(1);

                    	    if ( ((LA401_0>=Intersection && LA401_0<=Implements)||(LA401_0>=Promisify && LA401_0<=Abstract)||(LA401_0>=External && LA401_0<=Function)||(LA401_0>=Private && LA401_0<=Delete)||LA401_0==Public||LA401_0==Static||(LA401_0>=Target && LA401_0<=Await)||LA401_0==Class||(LA401_0>=False && LA401_0<=Super)||LA401_0==Union||(LA401_0>=Yield && LA401_0<=This)||(LA401_0>=From && LA401_0<=Void)||(LA401_0>=Get && LA401_0<=Set)||LA401_0==PlusSignPlusSign||LA401_0==HyphenMinusHyphenMinus||LA401_0==SolidusEqualsSign||LA401_0==As||LA401_0==Of||LA401_0==ExclamationMark||LA401_0==LeftParenthesis||(LA401_0>=Asterisk && LA401_0<=PlusSign)||LA401_0==HyphenMinus||LA401_0==Solidus||LA401_0==LessThanSign||(LA401_0>=CommercialAt && LA401_0<=LeftSquareBracket)||LA401_0==LeftCurlyBracket||LA401_0==Tilde||LA401_0==RULE_DOUBLE||(LA401_0>=RULE_HEX_INT && LA401_0<=RULE_LEGACY_OCTAL_INT)||LA401_0==RULE_SCIENTIFIC_INT||LA401_0==RULE_IDENTIFIER||LA401_0==RULE_STRING||(LA401_0>=RULE_TEMPLATE_HEAD && LA401_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA401_0==RULE_INT) ) {
                    	        alt401=1;
                    	    }
                    	    switch (alt401) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_127);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_128);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop402;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_TemplateLiteral_return retval = new InternalN4JSParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt407=1;
            }
            else if ( (LA407_0==RULE_TEMPLATE_HEAD) ) {
                alt407=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);

                throw nvae;
            }
            switch (alt407) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_127);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt404=2;
                    int LA404_0 = input.LA(1);

                    if ( ((LA404_0>=Intersection && LA404_0<=Implements)||(LA404_0>=Promisify && LA404_0<=Abstract)||(LA404_0>=External && LA404_0<=Function)||(LA404_0>=Private && LA404_0<=Delete)||LA404_0==Public||LA404_0==Static||(LA404_0>=Target && LA404_0<=Await)||LA404_0==Class||(LA404_0>=False && LA404_0<=Super)||LA404_0==Union||(LA404_0>=Yield && LA404_0<=This)||(LA404_0>=From && LA404_0<=Void)||(LA404_0>=Get && LA404_0<=Set)||LA404_0==PlusSignPlusSign||LA404_0==HyphenMinusHyphenMinus||LA404_0==SolidusEqualsSign||LA404_0==As||LA404_0==Of||LA404_0==ExclamationMark||LA404_0==LeftParenthesis||(LA404_0>=Asterisk && LA404_0<=PlusSign)||LA404_0==HyphenMinus||LA404_0==Solidus||LA404_0==LessThanSign||(LA404_0>=CommercialAt && LA404_0<=LeftSquareBracket)||LA404_0==LeftCurlyBracket||LA404_0==Tilde||LA404_0==RULE_DOUBLE||(LA404_0>=RULE_HEX_INT && LA404_0<=RULE_LEGACY_OCTAL_INT)||LA404_0==RULE_SCIENTIFIC_INT||LA404_0==RULE_IDENTIFIER||LA404_0==RULE_STRING||(LA404_0>=RULE_TEMPLATE_HEAD && LA404_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA404_0==RULE_INT) ) {
                        alt404=1;
                    }
                    switch (alt404) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_127);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_128);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop406:
                    do {
                        int alt406=2;
                        int LA406_0 = input.LA(1);

                        if ( (LA406_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt406=1;
                        }


                        switch (alt406) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_127);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt405=2;
                    	    int LA405_0 = input.LA(1);

                    	    if ( ((LA405_0>=Intersection && LA405_0<=Implements)||(LA405_0>=Promisify && LA405_0<=Abstract)||(LA405_0>=External && LA405_0<=Function)||(LA405_0>=Private && LA405_0<=Delete)||LA405_0==Public||LA405_0==Static||(LA405_0>=Target && LA405_0<=Await)||LA405_0==Class||(LA405_0>=False && LA405_0<=Super)||LA405_0==Union||(LA405_0>=Yield && LA405_0<=This)||(LA405_0>=From && LA405_0<=Void)||(LA405_0>=Get && LA405_0<=Set)||LA405_0==PlusSignPlusSign||LA405_0==HyphenMinusHyphenMinus||LA405_0==SolidusEqualsSign||LA405_0==As||LA405_0==Of||LA405_0==ExclamationMark||LA405_0==LeftParenthesis||(LA405_0>=Asterisk && LA405_0<=PlusSign)||LA405_0==HyphenMinus||LA405_0==Solidus||LA405_0==LessThanSign||(LA405_0>=CommercialAt && LA405_0<=LeftSquareBracket)||LA405_0==LeftCurlyBracket||LA405_0==Tilde||LA405_0==RULE_DOUBLE||(LA405_0>=RULE_HEX_INT && LA405_0<=RULE_LEGACY_OCTAL_INT)||LA405_0==RULE_SCIENTIFIC_INT||LA405_0==RULE_IDENTIFIER||LA405_0==RULE_STRING||(LA405_0>=RULE_TEMPLATE_HEAD && LA405_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA405_0==RULE_INT) ) {
                    	        alt405=1;
                    	    }
                    	    switch (alt405) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_127);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_128);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop406;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        		setInTemplateSegment();
            
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSParser.ruleTemplateHead_return retval = new InternalN4JSParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTail_return retval = new InternalN4JSParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddle_return retval = new InternalN4JSParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLiteral_return retval = new InternalN4JSParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;



            
        try {
            {
            int alt408=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt408=1;
                }
                break;
            case False:
            case True:
                {
                alt408=2;
                }
                break;
            case RULE_STRING:
                {
                alt408=3;
                }
                break;
            case Null:
                {
                alt408=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt408=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;
            }

            switch (alt408) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNullLiteral_return retval = new InternalN4JSParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;


            
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBooleanLiteral_return retval = new InternalN4JSParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;


            
        try {
            {
            {
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==True) ) {
                alt409=1;
            }
            else if ( (LA409_0==False) ) {
                alt409=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 409, 0, input);

                throw nvae;
            }
            switch (alt409) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSParser.ruleStringLiteral_return retval = new InternalN4JSParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteral_return retval = new InternalN4JSParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;



            
        try {
            {
            int alt410=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt410=1;
                }
                break;
            case RULE_INT:
                {
                alt410=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt410=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt410=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt410=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt410=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt410=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 410, 0, input);

                throw nvae;
            }

            switch (alt410) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleDoubleLiteral_return retval = new InternalN4JSParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleIntLiteral_return retval = new InternalN4JSParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleOctalIntLiteral_return retval = new InternalN4JSParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleHexIntLiteral_return retval = new InternalN4JSParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBinaryIntLiteral_return retval = new InternalN4JSParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleScientificIntLiteral_return retval = new InternalN4JSParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteralAsString_return retval = new InternalN4JSParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);


            
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierOrThis_return retval = new InternalN4JSParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;


            
        try {
            {
            int alt411=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt411=1;
                }
                break;
            case This:
                {
                alt411=2;
                }
                break;
            case Promisify:
                {
                alt411=3;
                }
                break;
            case Target:
                {
                alt411=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);

                throw nvae;
            }

            switch (alt411) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationName_return retval = new InternalN4JSParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;


            
        try {
            {
            int alt412=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt412=1;
                }
                break;
            case This:
                {
                alt412=2;
                }
                break;
            case Target:
                {
                alt412=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 412, 0, input);

                throw nvae;
            }

            switch (alt412) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSParser.ruleREGEX_LITERAL_return retval = new InternalN4JSParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        		setInRegularExpression();
            
        try {
            {
            {
            int alt413=2;
            int LA413_0 = input.LA(1);

            if ( (LA413_0==Solidus) ) {
                alt413=1;
            }
            else if ( (LA413_0==SolidusEqualsSign) ) {
                alt413=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 413, 0, input);

                throw nvae;
            }
            switch (alt413) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1()); 
                    }

                    }
                    break;

            }
            int alt414=2;
            int LA414_0 = input.LA(1);

            if ( (LA414_0==RULE_REGEX_TAIL) ) {
                alt414=1;
            }
            switch (alt414) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTailLiteral_return retval = new InternalN4JSParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt415=2;
            int LA415_0 = input.LA(1);

            if ( (LA415_0==RULE_TEMPLATE_END) ) {
                alt415=1;
            }
            switch (alt415) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSParser.ruleSemi_return retval = new InternalN4JSParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        		int marker = input.mark();
        		promoteEOL();
            
        try {
            int alt416=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt416=1;
                }
                break;
            case EOF:
                {
                alt416=2;
                }
                break;
            case RULE_EOL:
                {
                alt416=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt416=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt416=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }

            switch (alt416) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSParser.ruleNoLineTerminator_return retval = new InternalN4JSParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;


            
        try {
            {
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==RULE_NO_LINE_TERMINATOR) ) {
                alt417=1;
            }
            switch (alt417) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleAnnotation_return retval = new InternalN4JSParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return retval = new InternalN4JSParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_96);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt420=2;
            alt420 = dfa420.predict(input);
            switch (alt420) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0()); 
                    }

                    }
                    int alt419=2;
                    int LA419_0 = input.LA(1);

                    if ( ((LA419_0>=Intersection && LA419_0<=Constructor)||LA419_0==Promisify||LA419_0==Target||LA419_0==Await||LA419_0==False||LA419_0==Union||LA419_0==This||(LA419_0>=Null && LA419_0<=Void)||LA419_0==SolidusEqualsSign||LA419_0==LeftParenthesis||LA419_0==Solidus||LA419_0==QuestionMark||LA419_0==LeftSquareBracket||LA419_0==LeftCurlyBracket||LA419_0==Tilde||LA419_0==RULE_DOUBLE||(LA419_0>=RULE_HEX_INT && LA419_0<=RULE_LEGACY_OCTAL_INT)||LA419_0==RULE_SCIENTIFIC_INT||LA419_0==RULE_IDENTIFIER||LA419_0==RULE_STRING||LA419_0==RULE_INT) ) {
                        alt419=1;
                    }
                    switch (alt419) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop418:
                            do {
                                int alt418=2;
                                int LA418_0 = input.LA(1);

                                if ( (LA418_0==Comma) ) {
                                    alt418=1;
                                }


                                switch (alt418) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_132); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop418;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationArgument_return retval = new InternalN4JSParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;



            
        try {
            {
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==False||LA421_0==Null||LA421_0==True||LA421_0==SolidusEqualsSign||LA421_0==Solidus||LA421_0==RULE_DOUBLE||(LA421_0>=RULE_HEX_INT && LA421_0<=RULE_LEGACY_OCTAL_INT)||LA421_0==RULE_SCIENTIFIC_INT||LA421_0==RULE_STRING||LA421_0==RULE_INT) ) {
                alt421=1;
            }
            else if ( ((LA421_0>=Intersection && LA421_0<=Constructor)||LA421_0==Promisify||LA421_0==Target||LA421_0==Await||LA421_0==Union||LA421_0==This||LA421_0==This_1||(LA421_0>=Type && LA421_0<=Void)||LA421_0==LeftParenthesis||LA421_0==QuestionMark||LA421_0==LeftSquareBracket||LA421_0==LeftCurlyBracket||LA421_0==Tilde||LA421_0==RULE_IDENTIFIER) ) {
                alt421=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationList_return retval = new InternalN4JSParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_133);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2()); 
            }

            }


            }


            }


            }
            loop422:
            do {
                int alt422=2;
                int LA422_0 = input.LA(1);

                if ( (LA422_0==CommercialAt) ) {
                    alt422=1;
                }


                switch (alt422) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_133);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop422;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleExpressionAnnotationList_return retval = new InternalN4JSParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt423=0;
            loop423:
            do {
                int alt423=2;
                int LA423_0 = input.LA(1);

                if ( (LA423_0==CommercialAt) ) {
                    alt423=1;
                }


                switch (alt423) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_133);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt423 >= 1 ) break loop423;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(423, input);
                        throw eee;
                }
                cnt423++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt424=0;
            loop424:
            do {
                int alt424=2;
                int LA424_0 = input.LA(1);

                if ( (LA424_0==CommercialAt) ) {
                    alt424=1;
                }


                switch (alt424) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_133);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt424 >= 1 ) break loop424;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(424, input);
                        throw eee;
                }
                cnt424++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt425=0;
            loop425:
            do {
                int alt425=2;
                int LA425_0 = input.LA(1);

                if ( (LA425_0==CommercialAt) ) {
                    alt425=1;
                }


                switch (alt425) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_133);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt425 >= 1 ) break loop425;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(425, input);
                        throw eee;
                }
                cnt425++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSParser.ruleTypeReferenceName_return retval = new InternalN4JSParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;


            
        try {
            {
            int alt426=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt426=1;
                }
                break;
            case This:
                {
                alt426=2;
                }
                break;
            case Await:
                {
                alt426=3;
                }
                break;
            case Promisify:
                {
                alt426=4;
                }
                break;
            case Target:
                {
                alt426=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt426=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);

                throw nvae;
            }

            switch (alt426) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_134); if (state.failed) return ;
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==FullStop) ) {
                alt427=1;
            }
            switch (alt427) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_135); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0()); 
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassDeclaration_return retval = new InternalN4JSParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop428:
            do {
                int alt428=2;
                int LA428_0 = input.LA(1);

                if ( ((LA428_0>=Protected && LA428_0<=Abstract)||LA428_0==External||(LA428_0>=Private && LA428_0<=Project)||LA428_0==Public||LA428_0==Static||LA428_0==Const) ) {
                    alt428=1;
                }


                switch (alt428) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_7);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop428;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2()); 
            }
            int alt429=2;
            int LA429_0 = input.LA(1);

            if ( (LA429_0==Tilde) ) {
                alt429=1;
            }
            switch (alt429) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt430=2;
            int LA430_0 = input.LA(1);

            if ( ((LA430_0>=Intersection && LA430_0<=Constructor)||(LA430_0>=Promisify && LA430_0<=Abstract)||LA430_0==External||(LA430_0>=Private && LA430_0<=Project)||LA430_0==Public||LA430_0==Static||LA430_0==Target||(LA430_0>=Async && LA430_0<=Await)||LA430_0==Union||(LA430_0>=Yield && LA430_0<=This)||LA430_0==From||LA430_0==Type||(LA430_0>=Get && LA430_0<=Let)||(LA430_0>=Out && LA430_0<=Set)||LA430_0==As||LA430_0==Of||LA430_0==RULE_IDENTIFIER) ) {
                alt430=1;
            }
            else if ( (LA430_0==Implements) ) {
                int LA430_2 = input.LA(2);

                if ( (LA430_2==Implements||LA430_2==Extends||LA430_2==LessThanSign||LA430_2==LeftCurlyBracket) ) {
                    alt430=1;
                }
            }
            switch (alt430) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt431=2;
            int LA431_0 = input.LA(1);

            if ( (LA431_0==LessThanSign) ) {
                alt431=1;
            }
            switch (alt431) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==Implements||LA432_0==Extends) ) {
                alt432=1;
            }
            switch (alt432) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSParser.ruleMembers_return retval = new InternalN4JSParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop433:
            do {
                int alt433=2;
                int LA433_0 = input.LA(1);

                if ( ((LA433_0>=Intersection && LA433_0<=With)||(LA433_0>=For && LA433_0<=Var)||(LA433_0>=As && LA433_0<=Of)||LA433_0==LeftParenthesis||LA433_0==Asterisk||LA433_0==LessThanSign||(LA433_0>=QuestionMark && LA433_0<=LeftSquareBracket)||LA433_0==LeftCurlyBracket||LA433_0==Tilde||LA433_0==RULE_DOUBLE||LA433_0==RULE_HEX_INT||LA433_0==RULE_OCTAL_INT||LA433_0==RULE_SCIENTIFIC_INT||LA433_0==RULE_IDENTIFIER||LA433_0==RULE_STRING||LA433_0==RULE_INT) ) {
                    alt433=1;
                }


                switch (alt433) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop433;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSParser.norm1_Members_return retval = new InternalN4JSParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop434:
            do {
                int alt434=2;
                int LA434_0 = input.LA(1);

                if ( ((LA434_0>=Intersection && LA434_0<=With)||(LA434_0>=For && LA434_0<=Var)||(LA434_0>=As && LA434_0<=Of)||LA434_0==LeftParenthesis||LA434_0==Asterisk||LA434_0==LessThanSign||(LA434_0>=QuestionMark && LA434_0<=LeftSquareBracket)||LA434_0==LeftCurlyBracket||LA434_0==Tilde||LA434_0==RULE_DOUBLE||LA434_0==RULE_HEX_INT||LA434_0==RULE_OCTAL_INT||LA434_0==RULE_SCIENTIFIC_INT||LA434_0==RULE_IDENTIFIER||LA434_0==RULE_STRING||LA434_0==RULE_INT) ) {
                    alt434=1;
                }


                switch (alt434) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop434;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsClause_return retval = new InternalN4JSParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==Extends) ) {
                alt438=1;
            }
            else if ( (LA438_0==Implements) ) {
                alt438=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);

                throw nvae;
            }
            switch (alt438) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt437=2;
                    int LA437_0 = input.LA(1);

                    if ( (LA437_0==Void) && (synpred279_InternalN4JSParser())) {
                        alt437=1;
                    }
                    else if ( (LA437_0==This) ) {
                        int LA437_2 = input.LA(2);

                        if ( (synpred279_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Await) ) {
                        int LA437_3 = input.LA(2);

                        if ( (synpred279_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Promisify) ) {
                        int LA437_4 = input.LA(2);

                        if ( (synpred279_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Target) ) {
                        int LA437_5 = input.LA(2);

                        if ( (synpred279_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==RULE_IDENTIFIER) ) {
                        int LA437_6 = input.LA(2);

                        if ( (synpred279_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA437_0>=Intersection && LA437_0<=Implements)||(LA437_0>=Interface && LA437_0<=Abstract)||(LA437_0>=External && LA437_0<=Function)||(LA437_0>=Private && LA437_0<=Project)||LA437_0==Public||LA437_0==Static||LA437_0==Async||LA437_0==Class||(LA437_0>=False && LA437_0<=Super)||LA437_0==Union||LA437_0==Yield||(LA437_0>=From && LA437_0<=Type)||(LA437_0>=Get && LA437_0<=Set)||LA437_0==SolidusEqualsSign||LA437_0==As||LA437_0==Of||LA437_0==LeftParenthesis||LA437_0==Solidus||LA437_0==LessThanSign||(LA437_0>=CommercialAt && LA437_0<=LeftSquareBracket)||LA437_0==LeftCurlyBracket||LA437_0==RULE_DOUBLE||(LA437_0>=RULE_HEX_INT && LA437_0<=RULE_LEGACY_OCTAL_INT)||LA437_0==RULE_SCIENTIFIC_INT||LA437_0==RULE_STRING||(LA437_0>=RULE_TEMPLATE_HEAD && LA437_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA437_0==RULE_INT) ) {
                        alt437=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 437, 0, input);

                        throw nvae;
                    }
                    switch (alt437) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_138);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt436=2;
                            int LA436_0 = input.LA(1);

                            if ( (LA436_0==Implements||LA436_0==Extends) ) {
                                alt436=1;
                            }
                            switch (alt436) {
                                case 1 :
                                    {
                                    int alt435=2;
                                    int LA435_0 = input.LA(1);

                                    if ( (LA435_0==Implements) ) {
                                        alt435=1;
                                    }
                                    else if ( (LA435_0==Extends) ) {
                                        alt435=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 435, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt435) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsClause_return retval = new InternalN4JSParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==Extends) ) {
                alt442=1;
            }
            else if ( (LA442_0==Implements) ) {
                alt442=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 442, 0, input);

                throw nvae;
            }
            switch (alt442) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt441=2;
                    int LA441_0 = input.LA(1);

                    if ( (LA441_0==Void) && (synpred280_InternalN4JSParser())) {
                        alt441=1;
                    }
                    else if ( (LA441_0==This) ) {
                        int LA441_2 = input.LA(2);

                        if ( (synpred280_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==Await) ) {
                        int LA441_3 = input.LA(2);

                        if ( (synpred280_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==Promisify) ) {
                        int LA441_4 = input.LA(2);

                        if ( (synpred280_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==Target) ) {
                        int LA441_5 = input.LA(2);

                        if ( (synpred280_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==RULE_IDENTIFIER) ) {
                        int LA441_6 = input.LA(2);

                        if ( (synpred280_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA441_0>=Intersection && LA441_0<=Implements)||(LA441_0>=Interface && LA441_0<=Abstract)||(LA441_0>=External && LA441_0<=Function)||(LA441_0>=Private && LA441_0<=Project)||LA441_0==Public||LA441_0==Static||LA441_0==Async||LA441_0==Class||(LA441_0>=False && LA441_0<=Super)||LA441_0==Union||(LA441_0>=From && LA441_0<=Type)||(LA441_0>=Get && LA441_0<=Set)||LA441_0==SolidusEqualsSign||LA441_0==As||LA441_0==Of||LA441_0==LeftParenthesis||LA441_0==Solidus||LA441_0==LessThanSign||(LA441_0>=CommercialAt && LA441_0<=LeftSquareBracket)||LA441_0==LeftCurlyBracket||LA441_0==RULE_DOUBLE||(LA441_0>=RULE_HEX_INT && LA441_0<=RULE_LEGACY_OCTAL_INT)||LA441_0==RULE_SCIENTIFIC_INT||LA441_0==RULE_STRING||(LA441_0>=RULE_TEMPLATE_HEAD && LA441_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA441_0==RULE_INT) ) {
                        alt441=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 441, 0, input);

                        throw nvae;
                    }
                    switch (alt441) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_138);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt440=2;
                            int LA440_0 = input.LA(1);

                            if ( (LA440_0==Implements||LA440_0==Extends) ) {
                                alt440=1;
                            }
                            switch (alt440) {
                                case 1 :
                                    {
                                    int alt439=2;
                                    int LA439_0 = input.LA(1);

                                    if ( (LA439_0==Implements) ) {
                                        alt439=1;
                                    }
                                    else if ( (LA439_0==Extends) ) {
                                        alt439=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 439, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt439) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleClassImplementsList_return retval = new InternalN4JSParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_140);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0()); 
            }

            }


            }
            loop444:
            do {
                int alt444=2;
                int LA444_0 = input.LA(1);

                if ( (LA444_0==Implements||LA444_0==Extends||LA444_0==Comma) ) {
                    alt444=1;
                }


                switch (alt444) {
            	case 1 :
            	    {
            	    int alt443=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt443=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt443=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt443=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 443, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt443) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop444;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassExpression_return retval = new InternalN4JSParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt445=2;
            int LA445_0 = input.LA(1);

            if ( ((LA445_0>=Intersection && LA445_0<=Constructor)||(LA445_0>=Promisify && LA445_0<=Abstract)||LA445_0==External||(LA445_0>=Private && LA445_0<=Project)||LA445_0==Public||LA445_0==Static||LA445_0==Target||(LA445_0>=Async && LA445_0<=Await)||LA445_0==Union||(LA445_0>=Yield && LA445_0<=This)||LA445_0==From||LA445_0==Type||(LA445_0>=Get && LA445_0<=Let)||(LA445_0>=Out && LA445_0<=Set)||LA445_0==As||LA445_0==Of||LA445_0==RULE_IDENTIFIER) ) {
                alt445=1;
            }
            else if ( (LA445_0==Implements) ) {
                int LA445_2 = input.LA(2);

                if ( (LA445_2==Implements||LA445_2==Extends||LA445_2==LeftCurlyBracket) ) {
                    alt445=1;
                }
            }
            switch (alt445) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==Implements||LA446_0==Extends) ) {
                alt446=1;
            }
            switch (alt446) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSParser.norm1_N4ClassExpression_return retval = new InternalN4JSParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( ((LA447_0>=Intersection && LA447_0<=Constructor)||(LA447_0>=Promisify && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Target||(LA447_0>=Async && LA447_0<=Await)||LA447_0==Union||LA447_0==This||LA447_0==From||LA447_0==Type||(LA447_0>=Get && LA447_0<=Let)||(LA447_0>=Out && LA447_0<=Set)||LA447_0==As||LA447_0==Of||LA447_0==RULE_IDENTIFIER) ) {
                alt447=1;
            }
            else if ( (LA447_0==Implements) ) {
                int LA447_2 = input.LA(2);

                if ( (LA447_2==Implements||LA447_2==Extends||LA447_2==LeftCurlyBracket) ) {
                    alt447=1;
                }
            }
            switch (alt447) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_58);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==Implements||LA448_0==Extends) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    pushFollow(FOLLOW_58);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop449:
            do {
                int alt449=2;
                int LA449_0 = input.LA(1);

                if ( ((LA449_0>=Protected && LA449_0<=Abstract)||LA449_0==External||(LA449_0>=Private && LA449_0<=Project)||LA449_0==Public||LA449_0==Static||LA449_0==Const) ) {
                    alt449=1;
                }


                switch (alt449) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop449;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2()); 
            }
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==Tilde) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt451=2;
            int LA451_0 = input.LA(1);

            if ( ((LA451_0>=Intersection && LA451_0<=Constructor)||(LA451_0>=Promisify && LA451_0<=Abstract)||LA451_0==External||(LA451_0>=Private && LA451_0<=Project)||LA451_0==Public||LA451_0==Static||LA451_0==Target||(LA451_0>=Async && LA451_0<=Await)||LA451_0==Union||(LA451_0>=Yield && LA451_0<=This)||LA451_0==From||LA451_0==Type||(LA451_0>=Get && LA451_0<=Let)||(LA451_0>=Out && LA451_0<=Set)||LA451_0==As||LA451_0==Of||LA451_0==RULE_IDENTIFIER) ) {
                alt451=1;
            }
            else if ( (LA451_0==Implements) ) {
                int LA451_2 = input.LA(2);

                if ( (LA451_2==Implements||LA451_2==Extends||LA451_2==LessThanSign||LA451_2==LeftCurlyBracket) ) {
                    alt451=1;
                }
            }
            switch (alt451) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( (LA452_0==LessThanSign) ) {
                alt452=1;
            }
            switch (alt452) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==Implements||LA453_0==Extends) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleInterfaceImplementsList_return retval = new InternalN4JSParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==Extends) ) {
                alt454=1;
            }
            else if ( (LA454_0==Implements) ) {
                alt454=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 454, 0, input);

                throw nvae;
            }
            switch (alt454) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_140);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1()); 
            }

            }


            }
            loop456:
            do {
                int alt456=2;
                int LA456_0 = input.LA(1);

                if ( (LA456_0==Implements||LA456_0==Extends||LA456_0==Comma) ) {
                    alt456=1;
                }


                switch (alt456) {
            	case 1 :
            	    {
            	    int alt455=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt455=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt455=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt455=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 455, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt455) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop456;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumDeclaration_return retval = new InternalN4JSParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop457:
            do {
                int alt457=2;
                int LA457_0 = input.LA(1);

                if ( ((LA457_0>=Protected && LA457_0<=Abstract)||LA457_0==External||(LA457_0>=Private && LA457_0<=Project)||LA457_0==Public||LA457_0==Static||LA457_0==Const) ) {
                    alt457=1;
                }


                switch (alt457) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_12);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop457;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2()); 
            }
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( ((LA458_0>=Intersection && LA458_0<=Implements)||(LA458_0>=Promisify && LA458_0<=Abstract)||LA458_0==External||(LA458_0>=Private && LA458_0<=Project)||LA458_0==Public||LA458_0==Static||LA458_0==Target||(LA458_0>=Async && LA458_0<=Await)||LA458_0==Union||(LA458_0>=Yield && LA458_0<=This)||LA458_0==From||LA458_0==Type||(LA458_0>=Get && LA458_0<=Let)||(LA458_0>=Out && LA458_0<=Set)||LA458_0==As||LA458_0==Of||LA458_0==RULE_IDENTIFIER) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt460=2;
            int LA460_0 = input.LA(1);

            if ( (LA460_0==Promisify||LA460_0==Target||LA460_0==This||LA460_0==RULE_IDENTIFIER) ) {
                alt460=1;
            }
            switch (alt460) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0()); 
                    }

                    }


                    }
                    loop459:
                    do {
                        int alt459=2;
                        int LA459_0 = input.LA(1);

                        if ( (LA459_0==Comma) ) {
                            alt459=1;
                        }


                        switch (alt459) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop459;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumLiteral_return retval = new InternalN4JSParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_43);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt461=2;
            int LA461_0 = input.LA(1);

            if ( (LA461_0==Colon) ) {
                alt461=1;
            }
            switch (alt461) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_23); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberDeclaration_return retval = new InternalN4JSParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt462=6;
            alt462 = dfa462.predict(input);
            switch (alt462) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt463=6;
            alt463 = dfa463.predict(input);
            switch (alt463) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_143);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt475=4;
            alt475 = dfa475.predict(input);
            switch (alt475) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop464:
                    do {
                        int alt464=2;
                        int LA464_0 = input.LA(1);

                        if ( ((LA464_0>=Protected && LA464_0<=Abstract)||LA464_0==External||(LA464_0>=Private && LA464_0<=Project)||LA464_0==Public||LA464_0==Static||LA464_0==Const) ) {
                            alt464=1;
                        }


                        switch (alt464) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_144);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop464;
                        }
                    } while (true);

                    pushFollow(FOLLOW_145);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt465=2;
                    alt465 = dfa465.predict(input);
                    switch (alt465) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt466=2;
                    int LA466_0 = input.LA(1);

                    if ( (LA466_0==Semicolon) ) {
                        alt466=1;
                    }
                    switch (alt466) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop467:
                    do {
                        int alt467=2;
                        int LA467_0 = input.LA(1);

                        if ( ((LA467_0>=Protected && LA467_0<=Abstract)||LA467_0==External||(LA467_0>=Private && LA467_0<=Project)||LA467_0==Public||LA467_0==Static||LA467_0==Const) ) {
                            alt467=1;
                        }


                        switch (alt467) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_146);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop467;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    FparFormalParameterParserRuleCall_1_1_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt468=2;
                    alt468 = dfa468.predict(input);
                    switch (alt468) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            BodyBlockParserRuleCall_1_1_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt469=2;
                    int LA469_0 = input.LA(1);

                    if ( (LA469_0==Semicolon) ) {
                        alt469=1;
                    }
                    switch (alt469) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop470:
                    do {
                        int alt470=2;
                        alt470 = dfa470.predict(input);
                        switch (alt470) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_143);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop470;
                        }
                    } while (true);
                    int alt471=2;
                    int LA471_0 = input.LA(1);

                    if ( (LA471_0==LessThanSign) ) {
                        alt471=1;
                    }
                    switch (alt471) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_94);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt472=2;
                    alt472 = dfa472.predict(input);
                    switch (alt472) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_94);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt473=2;
                    int LA473_0 = input.LA(1);

                    if ( (LA473_0==Asterisk) ) {
                        alt473=1;
                    }
                    else if ( ((LA473_0>=Intersection && LA473_0<=With)||(LA473_0>=For && LA473_0<=Var)||(LA473_0>=As && LA473_0<=Of)||LA473_0==LeftSquareBracket||LA473_0==RULE_DOUBLE||LA473_0==RULE_HEX_INT||LA473_0==RULE_OCTAL_INT||LA473_0==RULE_SCIENTIFIC_INT||LA473_0==RULE_IDENTIFIER||LA473_0==RULE_STRING||LA473_0==RULE_INT) ) {
                        alt473=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 473, 0, input);

                        throw nvae;
                    }
                    switch (alt473) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_93);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_91);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt474=2;
                    int LA474_0 = input.LA(1);

                    if ( (LA474_0==Semicolon) ) {
                        alt474=1;
                    }
                    switch (alt474) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_143);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt487=4;
            alt487 = dfa487.predict(input);
            switch (alt487) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop476:
                    do {
                        int alt476=2;
                        int LA476_0 = input.LA(1);

                        if ( ((LA476_0>=Protected && LA476_0<=Abstract)||LA476_0==External||(LA476_0>=Private && LA476_0<=Project)||LA476_0==Public||LA476_0==Static||LA476_0==Const) ) {
                            alt476=1;
                        }


                        switch (alt476) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_144);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop476;
                        }
                    } while (true);

                    pushFollow(FOLLOW_145);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt477=2;
                    alt477 = dfa477.predict(input);
                    switch (alt477) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt478=2;
                    int LA478_0 = input.LA(1);

                    if ( (LA478_0==Semicolon) ) {
                        alt478=1;
                    }
                    switch (alt478) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop479:
                    do {
                        int alt479=2;
                        int LA479_0 = input.LA(1);

                        if ( ((LA479_0>=Protected && LA479_0<=Abstract)||LA479_0==External||(LA479_0>=Private && LA479_0<=Project)||LA479_0==Public||LA479_0==Static||LA479_0==Const) ) {
                            alt479=1;
                        }


                        switch (alt479) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_146);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop479;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    FparFormalParameterParserRuleCall_1_1_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt480=2;
                    alt480 = dfa480.predict(input);
                    switch (alt480) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            BodyBlockParserRuleCall_1_1_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt481=2;
                    int LA481_0 = input.LA(1);

                    if ( (LA481_0==Semicolon) ) {
                        alt481=1;
                    }
                    switch (alt481) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop482:
                    do {
                        int alt482=2;
                        alt482 = dfa482.predict(input);
                        switch (alt482) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_143);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop482;
                        }
                    } while (true);
                    int alt483=2;
                    int LA483_0 = input.LA(1);

                    if ( (LA483_0==LessThanSign) ) {
                        alt483=1;
                    }
                    switch (alt483) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_94);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt484=2;
                    alt484 = dfa484.predict(input);
                    switch (alt484) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_94);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt485=2;
                    int LA485_0 = input.LA(1);

                    if ( (LA485_0==Asterisk) ) {
                        alt485=1;
                    }
                    else if ( ((LA485_0>=Intersection && LA485_0<=With)||(LA485_0>=For && LA485_0<=Var)||(LA485_0>=As && LA485_0<=Of)||LA485_0==LeftSquareBracket||LA485_0==RULE_DOUBLE||LA485_0==RULE_HEX_INT||LA485_0==RULE_OCTAL_INT||LA485_0==RULE_SCIENTIFIC_INT||LA485_0==RULE_IDENTIFIER||LA485_0==RULE_STRING||LA485_0==RULE_INT) ) {
                        alt485=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 485, 0, input);

                        throw nvae;
                    }
                    switch (alt485) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_93);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_91);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_95);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);

                    if ( (LA486_0==Semicolon) ) {
                        alt486=1;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop488:
            do {
                int alt488=2;
                alt488 = dfa488.predict(input);
                switch (alt488) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_93);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop488;
                }
            } while (true);
            int alt489=2;
            alt489 = dfa489.predict(input);
            switch (alt489) {
                case 1 :
                    {
                    pushFollow(FOLLOW_93);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_147);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==Colon) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    {
                    pushFollow(FOLLOW_148);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt491=2;
            int LA491_0 = input.LA(1);

            if ( (LA491_0==EqualsSign) ) {
                alt491=1;
            }
            switch (alt491) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop492:
            do {
                int alt492=2;
                alt492 = dfa492.predict(input);
                switch (alt492) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_93);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop492;
                }
            } while (true);
            int alt493=2;
            alt493 = dfa493.predict(input);
            switch (alt493) {
                case 1 :
                    {
                    pushFollow(FOLLOW_93);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_147);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt494=2;
            int LA494_0 = input.LA(1);

            if ( (LA494_0==Colon) ) {
                alt494=1;
            }
            switch (alt494) {
                case 1 :
                    {
                    pushFollow(FOLLOW_148);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt495=2;
            int LA495_0 = input.LA(1);

            if ( (LA495_0==EqualsSign) ) {
                alt495=1;
            }
            switch (alt495) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4FieldDeclaration_return retval = new InternalN4JSParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MethodDeclaration_return retval = new InternalN4JSParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop496:
            do {
                int alt496=2;
                alt496 = dfa496.predict(input);
                switch (alt496) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop496;
                }
            } while (true);
            int alt497=2;
            int LA497_0 = input.LA(1);

            if ( (LA497_0==LessThanSign) ) {
                alt497=1;
            }
            switch (alt497) {
                case 1 :
                    {
                    pushFollow(FOLLOW_94);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt498=2;
            alt498 = dfa498.predict(input);
            switch (alt498) {
                case 1 :
                    {
                    pushFollow(FOLLOW_94);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==Asterisk) ) {
                alt499=1;
            }
            else if ( ((LA499_0>=Intersection && LA499_0<=With)||(LA499_0>=For && LA499_0<=Var)||(LA499_0>=As && LA499_0<=Of)||LA499_0==LeftSquareBracket||LA499_0==RULE_DOUBLE||LA499_0==RULE_HEX_INT||LA499_0==RULE_OCTAL_INT||LA499_0==RULE_SCIENTIFIC_INT||LA499_0==RULE_IDENTIFIER||LA499_0==RULE_STRING||LA499_0==RULE_INT) ) {
                alt499=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 499, 0, input);

                throw nvae;
            }
            switch (alt499) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_93);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_91);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==Semicolon) ) {
                alt500=1;
            }
            switch (alt500) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop501:
            do {
                int alt501=2;
                alt501 = dfa501.predict(input);
                switch (alt501) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop501;
                }
            } while (true);
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==LessThanSign) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    pushFollow(FOLLOW_94);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt503=2;
            alt503 = dfa503.predict(input);
            switch (alt503) {
                case 1 :
                    {
                    pushFollow(FOLLOW_94);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==Asterisk) ) {
                alt504=1;
            }
            else if ( ((LA504_0>=Intersection && LA504_0<=With)||(LA504_0>=For && LA504_0<=Var)||(LA504_0>=As && LA504_0<=Of)||LA504_0==LeftSquareBracket||LA504_0==RULE_DOUBLE||LA504_0==RULE_HEX_INT||LA504_0==RULE_OCTAL_INT||LA504_0==RULE_SCIENTIFIC_INT||LA504_0==RULE_IDENTIFIER||LA504_0==RULE_STRING||LA504_0==RULE_INT) ) {
                alt504=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 504, 0, input);

                throw nvae;
            }
            switch (alt504) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_93);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_91);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_95);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==Semicolon) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_95);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==Semicolon) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_95);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt507=2;
            int LA507_0 = input.LA(1);

            if ( (LA507_0==Semicolon) ) {
                alt507=1;
            }
            switch (alt507) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsAndBody_return retval = new InternalN4JSParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_149);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==LeftCurlyBracket) && (synpred311_InternalN4JSParser())) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_149);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==LeftCurlyBracket) && (synpred312_InternalN4JSParser())) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_150);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt510=2;
            int LA510_0 = input.LA(1);

            if ( (LA510_0==Colon) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_149);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt511=2;
            alt511 = dfa511.predict(input);
            switch (alt511) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_150);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( (LA512_0==Colon) ) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_149);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt513=2;
            alt513 = dfa513.predict(input);
            switch (alt513) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4GetterDeclaration_return retval = new InternalN4JSParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop514:
            do {
                int alt514=2;
                int LA514_0 = input.LA(1);

                if ( ((LA514_0>=Protected && LA514_0<=Abstract)||LA514_0==External||(LA514_0>=Private && LA514_0<=Project)||LA514_0==Public||LA514_0==Static||LA514_0==Const) ) {
                    alt514=1;
                }


                switch (alt514) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop514;
                }
            } while (true);

            pushFollow(FOLLOW_145);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt515=2;
            alt515 = dfa515.predict(input);
            switch (alt515) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==Semicolon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop517:
            do {
                int alt517=2;
                int LA517_0 = input.LA(1);

                if ( ((LA517_0>=Protected && LA517_0<=Abstract)||LA517_0==External||(LA517_0>=Private && LA517_0<=Project)||LA517_0==Public||LA517_0==Static||LA517_0==Const) ) {
                    alt517=1;
                }


                switch (alt517) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop517;
                }
            } while (true);

            pushFollow(FOLLOW_145);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt518=2;
            alt518 = dfa518.predict(input);
            switch (alt518) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt519=2;
            int LA519_0 = input.LA(1);

            if ( (LA519_0==Semicolon) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSParser.ruleGetterHeader_return retval = new InternalN4JSParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt520=2;
            int LA520_0 = input.LA(1);

            if ( ((LA520_0>=Intersection && LA520_0<=Constructor)||LA520_0==Promisify||LA520_0==Target||LA520_0==Await||LA520_0==Union||LA520_0==This||LA520_0==This_1||(LA520_0>=Type && LA520_0<=Void)||LA520_0==QuestionMark||LA520_0==LeftCurlyBracket||LA520_0==Tilde||LA520_0==RULE_IDENTIFIER) ) {
                alt520=1;
            }
            switch (alt520) {
                case 1 :
                    {
                    pushFollow(FOLLOW_151);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_66); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( (LA521_0==Colon) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSParser.norm1_GetterHeader_return retval = new InternalN4JSParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt522=2;
            int LA522_0 = input.LA(1);

            if ( ((LA522_0>=Intersection && LA522_0<=Constructor)||LA522_0==Promisify||LA522_0==Target||LA522_0==Await||LA522_0==Union||LA522_0==This||LA522_0==This_1||(LA522_0>=Type && LA522_0<=Void)||LA522_0==QuestionMark||LA522_0==LeftCurlyBracket||LA522_0==Tilde||LA522_0==RULE_IDENTIFIER) ) {
                alt522=1;
            }
            switch (alt522) {
                case 1 :
                    {
                    pushFollow(FOLLOW_151);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_66); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt523=2;
            int LA523_0 = input.LA(1);

            if ( (LA523_0==Colon) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4SetterDeclaration_return retval = new InternalN4JSParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop524:
            do {
                int alt524=2;
                int LA524_0 = input.LA(1);

                if ( ((LA524_0>=Protected && LA524_0<=Abstract)||LA524_0==External||(LA524_0>=Private && LA524_0<=Project)||LA524_0==Public||LA524_0==Static||LA524_0==Const) ) {
                    alt524=1;
                }


                switch (alt524) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_146);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop524;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt525=2;
            alt525 = dfa525.predict(input);
            switch (alt525) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    BodyBlockParserRuleCall_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt526=2;
            int LA526_0 = input.LA(1);

            if ( (LA526_0==Semicolon) ) {
                alt526=1;
            }
            switch (alt526) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop527:
            do {
                int alt527=2;
                int LA527_0 = input.LA(1);

                if ( ((LA527_0>=Protected && LA527_0<=Abstract)||LA527_0==External||(LA527_0>=Private && LA527_0<=Project)||LA527_0==Public||LA527_0==Static||LA527_0==Const) ) {
                    alt527=1;
                }


                switch (alt527) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_146);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop527;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt528=2;
            alt528 = dfa528.predict(input);
            switch (alt528) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    BodyBlockParserRuleCall_4_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt529=2;
            int LA529_0 = input.LA(1);

            if ( (LA529_0==Semicolon) ) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleBindingPattern_return retval = new InternalN4JSParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt530=2;
            int LA530_0 = input.LA(1);

            if ( (LA530_0==LeftCurlyBracket) ) {
                alt530=1;
            }
            else if ( (LA530_0==LeftSquareBracket) ) {
                alt530=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 530, 0, input);

                throw nvae;
            }
            switch (alt530) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_BindingPattern_return retval = new InternalN4JSParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt531=2;
            int LA531_0 = input.LA(1);

            if ( (LA531_0==LeftCurlyBracket) ) {
                alt531=1;
            }
            else if ( (LA531_0==LeftSquareBracket) ) {
                alt531=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 531, 0, input);

                throw nvae;
            }
            switch (alt531) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleObjectBindingPattern_return retval = new InternalN4JSParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt533=2;
            int LA533_0 = input.LA(1);

            if ( ((LA533_0>=Intersection && LA533_0<=With)||(LA533_0>=For && LA533_0<=Var)||(LA533_0>=As && LA533_0<=Of)||(LA533_0>=CommercialAt && LA533_0<=LeftSquareBracket)||LA533_0==RULE_DOUBLE||LA533_0==RULE_HEX_INT||LA533_0==RULE_OCTAL_INT||LA533_0==RULE_SCIENTIFIC_INT||LA533_0==RULE_IDENTIFIER||LA533_0==RULE_STRING||LA533_0==RULE_INT) ) {
                alt533=1;
            }
            switch (alt533) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop532:
                    do {
                        int alt532=2;
                        int LA532_0 = input.LA(1);

                        if ( (LA532_0==Comma) ) {
                            alt532=1;
                        }


                        switch (alt532) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_153); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop532;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt535=2;
            int LA535_0 = input.LA(1);

            if ( ((LA535_0>=Intersection && LA535_0<=With)||(LA535_0>=For && LA535_0<=Var)||(LA535_0>=As && LA535_0<=Of)||(LA535_0>=CommercialAt && LA535_0<=LeftSquareBracket)||LA535_0==RULE_DOUBLE||LA535_0==RULE_HEX_INT||LA535_0==RULE_OCTAL_INT||LA535_0==RULE_SCIENTIFIC_INT||LA535_0==RULE_IDENTIFIER||LA535_0==RULE_STRING||LA535_0==RULE_INT) ) {
                alt535=1;
            }
            switch (alt535) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop534:
                    do {
                        int alt534=2;
                        int LA534_0 = input.LA(1);

                        if ( (LA534_0==Comma) ) {
                            alt534=1;
                        }


                        switch (alt534) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_153); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop534;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleArrayBindingPattern_return retval = new InternalN4JSParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop536:
            do {
                int alt536=2;
                int LA536_0 = input.LA(1);

                if ( (LA536_0==Comma) ) {
                    alt536=1;
                }


                switch (alt536) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_154);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop536;
                }
            } while (true);
            int alt541=2;
            int LA541_0 = input.LA(1);

            if ( ((LA541_0>=Intersection && LA541_0<=Implements)||(LA541_0>=Promisify && LA541_0<=Abstract)||LA541_0==External||(LA541_0>=Private && LA541_0<=Project)||LA541_0==Public||LA541_0==Static||LA541_0==Target||(LA541_0>=Async && LA541_0<=Await)||LA541_0==Union||(LA541_0>=Yield && LA541_0<=This)||LA541_0==From||LA541_0==Type||LA541_0==FullStopFullStopFullStop||(LA541_0>=Get && LA541_0<=Let)||(LA541_0>=Out && LA541_0<=Set)||LA541_0==As||LA541_0==Of||(LA541_0>=CommercialAt && LA541_0<=LeftSquareBracket)||LA541_0==LeftCurlyBracket||LA541_0==RULE_IDENTIFIER) ) {
                alt541=1;
            }
            switch (alt541) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_88);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop538:
                    do {
                        int alt538=2;
                        alt538 = dfa538.predict(input);
                        switch (alt538) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_155); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop537:
                    	    do {
                    	        int alt537=2;
                    	        int LA537_0 = input.LA(1);

                    	        if ( (LA537_0==Comma) ) {
                    	            alt537=1;
                    	        }


                    	        switch (alt537) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_155);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop537;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_88);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop538;
                        }
                    } while (true);
                    int alt540=2;
                    int LA540_0 = input.LA(1);

                    if ( (LA540_0==Comma) ) {
                        alt540=1;
                    }
                    switch (alt540) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_88); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop539:
                            do {
                                int alt539=2;
                                int LA539_0 = input.LA(1);

                                if ( (LA539_0==Comma) ) {
                                    alt539=1;
                                }


                                switch (alt539) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_88);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop539;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop542:
            do {
                int alt542=2;
                int LA542_0 = input.LA(1);

                if ( (LA542_0==Comma) ) {
                    alt542=1;
                }


                switch (alt542) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_154);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop542;
                }
            } while (true);
            int alt547=2;
            int LA547_0 = input.LA(1);

            if ( ((LA547_0>=Intersection && LA547_0<=Implements)||(LA547_0>=Promisify && LA547_0<=Abstract)||LA547_0==External||(LA547_0>=Private && LA547_0<=Project)||LA547_0==Public||LA547_0==Static||LA547_0==Target||(LA547_0>=Async && LA547_0<=Await)||LA547_0==Union||LA547_0==This||LA547_0==From||LA547_0==Type||LA547_0==FullStopFullStopFullStop||(LA547_0>=Get && LA547_0<=Let)||(LA547_0>=Out && LA547_0<=Set)||LA547_0==As||LA547_0==Of||(LA547_0>=CommercialAt && LA547_0<=LeftSquareBracket)||LA547_0==LeftCurlyBracket||LA547_0==RULE_IDENTIFIER) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_88);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop544:
                    do {
                        int alt544=2;
                        alt544 = dfa544.predict(input);
                        switch (alt544) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_155); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop543:
                    	    do {
                    	        int alt543=2;
                    	        int LA543_0 = input.LA(1);

                    	        if ( (LA543_0==Comma) ) {
                    	            alt543=1;
                    	        }


                    	        switch (alt543) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_155);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop543;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_88);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop544;
                        }
                    } while (true);
                    int alt546=2;
                    int LA546_0 = input.LA(1);

                    if ( (LA546_0==Comma) ) {
                        alt546=1;
                    }
                    switch (alt546) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_88); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop545:
                            do {
                                int alt545=2;
                                int LA545_0 = input.LA(1);

                                if ( (LA545_0==Comma) ) {
                                    alt545=1;
                                }


                                switch (alt545) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_88);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop545;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSParser.ruleBindingProperty_return retval = new InternalN4JSParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt548=2;
            alt548 = dfa548.predict(input);
            switch (alt548) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_83);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSParser.norm1_BindingProperty_return retval = new InternalN4JSParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt549=2;
            alt549 = dfa549.predict(input);
            switch (alt549) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_83);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSParser.ruleSingleNameBinding_return retval = new InternalN4JSParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm1_SingleNameBinding_return retval = new InternalN4JSParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingElement_return retval = new InternalN4JSParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt551=2;
            int LA551_0 = input.LA(1);

            if ( (LA551_0==LeftCurlyBracket) && (synpred329_InternalN4JSParser())) {
                alt551=1;
            }
            else if ( (LA551_0==LeftSquareBracket) && (synpred329_InternalN4JSParser())) {
                alt551=1;
            }
            else if ( ((LA551_0>=Intersection && LA551_0<=Implements)||(LA551_0>=Promisify && LA551_0<=Abstract)||LA551_0==External||(LA551_0>=Private && LA551_0<=Project)||LA551_0==Public||LA551_0==Static||LA551_0==Target||(LA551_0>=Async && LA551_0<=Await)||LA551_0==Union||(LA551_0>=Yield && LA551_0<=This)||LA551_0==From||LA551_0==Type||(LA551_0>=Get && LA551_0<=Let)||(LA551_0>=Out && LA551_0<=Set)||LA551_0==As||LA551_0==Of||LA551_0==CommercialAt||LA551_0==RULE_IDENTIFIER) ) {
                alt551=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 551, 0, input);

                throw nvae;
            }
            switch (alt551) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_60);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt550=2;
                    int LA550_0 = input.LA(1);

                    if ( (LA550_0==EqualsSign) ) {
                        alt550=1;
                    }
                    switch (alt550) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElement_return retval = new InternalN4JSParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt553=2;
            int LA553_0 = input.LA(1);

            if ( (LA553_0==LeftCurlyBracket) && (synpred330_InternalN4JSParser())) {
                alt553=1;
            }
            else if ( (LA553_0==LeftSquareBracket) && (synpred330_InternalN4JSParser())) {
                alt553=1;
            }
            else if ( ((LA553_0>=Intersection && LA553_0<=Implements)||(LA553_0>=Promisify && LA553_0<=Abstract)||LA553_0==External||(LA553_0>=Private && LA553_0<=Project)||LA553_0==Public||LA553_0==Static||LA553_0==Target||(LA553_0>=Async && LA553_0<=Await)||LA553_0==Union||LA553_0==This||LA553_0==From||LA553_0==Type||(LA553_0>=Get && LA553_0<=Let)||(LA553_0>=Out && LA553_0<=Set)||LA553_0==As||LA553_0==Of||LA553_0==CommercialAt||LA553_0==RULE_IDENTIFIER) ) {
                alt553=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 553, 0, input);

                throw nvae;
            }
            switch (alt553) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_60);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt552=2;
                    int LA552_0 = input.LA(1);

                    if ( (LA552_0==EqualsSign) ) {
                        alt552=1;
                    }
                    switch (alt552) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingRestElement_return retval = new InternalN4JSParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt554=2;
            int LA554_0 = input.LA(1);

            if ( (LA554_0==FullStopFullStopFullStop) ) {
                alt554=1;
            }
            switch (alt554) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt556=2;
            int LA556_0 = input.LA(1);

            if ( (LA556_0==LeftCurlyBracket) && (synpred331_InternalN4JSParser())) {
                alt556=1;
            }
            else if ( (LA556_0==LeftSquareBracket) && (synpred331_InternalN4JSParser())) {
                alt556=1;
            }
            else if ( ((LA556_0>=Intersection && LA556_0<=Implements)||(LA556_0>=Promisify && LA556_0<=Abstract)||LA556_0==External||(LA556_0>=Private && LA556_0<=Project)||LA556_0==Public||LA556_0==Static||LA556_0==Target||(LA556_0>=Async && LA556_0<=Await)||LA556_0==Union||(LA556_0>=Yield && LA556_0<=This)||LA556_0==From||LA556_0==Type||(LA556_0>=Get && LA556_0<=Let)||(LA556_0>=Out && LA556_0<=Set)||LA556_0==As||LA556_0==Of||LA556_0==CommercialAt||LA556_0==RULE_IDENTIFIER) ) {
                alt556=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 556, 0, input);

                throw nvae;
            }
            switch (alt556) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_60);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt555=2;
                    int LA555_0 = input.LA(1);

                    if ( (LA555_0==EqualsSign) ) {
                        alt555=1;
                    }
                    switch (alt555) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingRestElement_return retval = new InternalN4JSParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt557=2;
            int LA557_0 = input.LA(1);

            if ( (LA557_0==FullStopFullStopFullStop) ) {
                alt557=1;
            }
            switch (alt557) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt559=2;
            int LA559_0 = input.LA(1);

            if ( (LA559_0==LeftCurlyBracket) && (synpred332_InternalN4JSParser())) {
                alt559=1;
            }
            else if ( (LA559_0==LeftSquareBracket) && (synpred332_InternalN4JSParser())) {
                alt559=1;
            }
            else if ( ((LA559_0>=Intersection && LA559_0<=Implements)||(LA559_0>=Promisify && LA559_0<=Abstract)||LA559_0==External||(LA559_0>=Private && LA559_0<=Project)||LA559_0==Public||LA559_0==Static||LA559_0==Target||(LA559_0>=Async && LA559_0<=Await)||LA559_0==Union||LA559_0==This||LA559_0==From||LA559_0==Type||(LA559_0>=Get && LA559_0<=Let)||(LA559_0>=Out && LA559_0<=Set)||LA559_0==As||LA559_0==Of||LA559_0==CommercialAt||LA559_0==RULE_IDENTIFIER) ) {
                alt559=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 559, 0, input);

                throw nvae;
            }
            switch (alt559) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_60);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt558=2;
                    int LA558_0 = input.LA(1);

                    if ( (LA558_0==EqualsSign) ) {
                        alt558=1;
                    }
                    switch (alt558) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSParser.ruleElision_return retval = new InternalN4JSParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt560=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt560=1;
                }
                break;
            case RULE_STRING:
                {
                alt560=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt560=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt560=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 560, 0, input);

                throw nvae;
            }

            switch (alt560) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_104);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt561=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt561=1;
                }
                break;
            case RULE_STRING:
                {
                alt561=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt561=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt561=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 561, 0, input);

                throw nvae;
            }

            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_104);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeRef_return retval = new InternalN4JSParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            UnionTypeExpressionParserRuleCall=ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.start):null), (UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.stop):null), grammarAccess.getTypeRefAccess().getUnionTypeExpressionParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpression_return retval = new InternalN4JSParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt563=2;
            int LA563_0 = input.LA(1);

            if ( (LA563_0==VerticalLine) ) {
                alt563=1;
            }
            switch (alt563) {
                case 1 :
                    {
                    int cnt562=0;
                    loop562:
                    do {
                        int alt562=2;
                        int LA562_0 = input.LA(1);

                        if ( (LA562_0==VerticalLine) ) {
                            alt562=1;
                        }


                        switch (alt562) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_44); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(VerticalLineKeyword_1_1_0, grammarAccess.getUnionTypeExpressionAccess().getVerticalLineKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt562 >= 1 ) break loop562;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(562, input);
                                throw eee;
                        }
                        cnt562++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.rulePrimaryTypeExpression_return TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            PrimaryTypeExpressionParserRuleCall_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.start):null), (PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0()); 
            }
            int alt565=2;
            int LA565_0 = input.LA(1);

            if ( (LA565_0==Ampersand) ) {
                alt565=1;
            }
            switch (alt565) {
                case 1 :
                    {
                    int cnt564=0;
                    loop564:
                    do {
                        int alt564=2;
                        int LA564_0 = input.LA(1);

                        if ( (LA564_0==Ampersand) ) {
                            alt564=1;
                        }


                        switch (alt564) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_44); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_116);
                    	    TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt564 >= 1 ) break loop564;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(564, input);
                                throw eee;
                        }
                        cnt564++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryTypeExpression_return retval = new InternalN4JSParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_1=null;
        Token RightParenthesisKeyword_0_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_0_4=null;
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_0_2 = null;

        InternalN4JSParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;



            
        try {
            {
            int alt566=4;
            alt566 = dfa566.predict(input);
            switch (alt566) {
                case 1 :
                    {
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1()); 
                    }
                    pushFollow(FOLLOW_66);
                    TAnonymousFormalParameterListParserRuleCall_0_0_0_2=ruleTAnonymousFormalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2()); 
                    }
                    RightParenthesisKeyword_0_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3()); 
                    }
                    EqualsSignGreaterThanSignKeyword_0_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignGreaterThanSignKeyword_0_0_0_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_66);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBogusTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBogusTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBogusTypeRef_return ruleBogusTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleBogusTypeRef_return retval = new InternalN4JSParser.ruleBogusTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            TypeRefWithModifiersParserRuleCall=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.start):null), (TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.stop):null), grammarAccess.getBogusTypeRefAccess().getTypeRefWithModifiersParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt568=2;
            int LA568_0 = input.LA(1);

            if ( ((LA568_0>=Intersection && LA568_0<=Constructor)||LA568_0==Promisify||LA568_0==Target||LA568_0==Await||LA568_0==Union||LA568_0==This||LA568_0==This_1||(LA568_0>=Type && LA568_0<=Void)||LA568_0==LeftCurlyBracket||LA568_0==Tilde||LA568_0==RULE_IDENTIFIER) ) {
                alt568=1;
            }
            else if ( (LA568_0==QuestionMark) ) {
                alt568=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 568, 0, input);

                throw nvae;
            }
            switch (alt568) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_157);
                    TypeRefWithoutModifiersParserRuleCall_0_0=ruleTypeRefWithoutModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0_0()); 
                    }
                    int alt567=2;
                    int LA567_0 = input.LA(1);

                    if ( (LA567_0==QuestionMark) ) {
                        int LA567_1 = input.LA(2);

                        if ( (synpred334_InternalN4JSParser()) ) {
                            alt567=1;
                        }
                    }
                    switch (alt567) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            UndefModifierUndefModifierTokenParserRuleCall_0_1_0=ruleUndefModifierToken();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    UndefModifierUndefModifierTokenParserRuleCall_1_1_0=ruleUndefModifierToken();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;

        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt571=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt571=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt571=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt571=3;
                }
                break;
            case Union:
                {
                alt571=4;
                }
                break;
            case Intersection:
                {
                alt571=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 571, 0, input);

                throw nvae;
            }

            switch (alt571) {
                case 1 :
                    {
                    {
                    int alt569=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt569=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA569_4 = input.LA(3);

                            if ( (LA569_4==Promisify||LA569_4==Target||LA569_4==Await||LA569_4==This||LA569_4==Void||LA569_4==RULE_IDENTIFIER) ) {
                                alt569=1;
                            }
                            else if ( (LA569_4==This_1) ) {
                                alt569=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 569, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA569_5 = input.LA(3);

                            if ( (LA569_5==Promisify||LA569_5==Target||LA569_5==Await||LA569_5==This||LA569_5==Void||LA569_5==RULE_IDENTIFIER) ) {
                                alt569=1;
                            }
                            else if ( (LA569_5==This_1) ) {
                                alt569=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 569, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt569=2;
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt569=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 569, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt569=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 569, 0, input);

                        throw nvae;
                    }

                    switch (alt569) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_37);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_37);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt570=2;
                    alt570 = dfa570.predict(input);
                    switch (alt570) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt572=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt572=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt572=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt572=3;
                }
                break;
            case Union:
                {
                alt572=4;
                }
                break;
            case Intersection:
                {
                alt572=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 572, 0, input);

                throw nvae;
            }

            switch (alt572) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefForCast_return retval = new InternalN4JSParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_4 = null;

        InternalN4JSParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_5 = null;

        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_6 = null;

        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_7 = null;



            
        try {
            {
            int alt573=8;
            alt573 = dfa573.predict(input);
            switch (alt573) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.start):null), (ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.start):null), (TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.start):null), (FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_5=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.start):null), (ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.start):null), (UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.stop):null), grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.start):null), (IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.stop):null), grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;

        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_2 = null;



            
        try {
            {
            int alt574=3;
            int LA574_0 = input.LA(1);

            if ( (LA574_0==Promisify||LA574_0==Target||LA574_0==Await||LA574_0==This||LA574_0==Void||LA574_0==RULE_IDENTIFIER) ) {
                alt574=1;
            }
            else if ( (LA574_0==This_1) ) {
                alt574=2;
            }
            else if ( (LA574_0==QuestionMark) && (synpred336_InternalN4JSParser())) {
                alt574=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 574, 0, input);

                throw nvae;
            }
            switch (alt574) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.start):null), (WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRef_return retval = new InternalN4JSParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt575=2;
            int LA575_0 = input.LA(1);

            if ( (LA575_0==This_1) ) {
                alt575=1;
            }
            else if ( (LA575_0==Tilde) ) {
                alt575=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 575, 0, input);

                throw nvae;
            }
            switch (alt575) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefNominal_return retval = new InternalN4JSParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefStructural_return retval = new InternalN4JSParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_158);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1()); 
            }
            int alt576=2;
            int LA576_0 = input.LA(1);

            if ( (LA576_0==With) ) {
                int LA576_1 = input.LA(2);

                if ( (LA576_1==LeftCurlyBracket) ) {
                    alt576=1;
                }
            }
            switch (alt576) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt577=2;
            int LA577_0 = input.LA(1);

            if ( (LA577_0==CommercialAt) ) {
                alt577=1;
            }
            switch (alt577) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0()); 
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1()); 
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_162); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_66);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4()); 
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3()); 
            }
            int alt579=2;
            int LA579_0 = input.LA(1);

            if ( (LA579_0==LessThanSign) ) {
                alt579=1;
            }
            switch (alt579) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_16); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1()); 
                    }

                    }


                    }
                    loop578:
                    do {
                        int alt578=2;
                        int LA578_0 = input.LA(1);

                        if ( (LA578_0==Comma) ) {
                            alt578=1;
                        }


                        switch (alt578) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop578;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3()); 
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5()); 
            }
            pushFollow(FOLLOW_66);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7()); 
            }
            int alt580=2;
            int LA580_0 = input.LA(1);

            if ( (LA580_0==Colon) ) {
                alt580=1;
            }
            switch (alt580) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefAssignment_8_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token EqualsSignGreaterThanSignKeyword_4=null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_2 = null;

        InternalN4JSParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1()); 
            }
            pushFollow(FOLLOW_66);
            TAnonymousFormalParameterListParserRuleCall_2=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.start):null), (TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_51); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3()); 
            }
            EqualsSignGreaterThanSignKeyword_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt582=2;
            int LA582_0 = input.LA(1);

            if ( ((LA582_0>=Intersection && LA582_0<=Implements)||(LA582_0>=Promisify && LA582_0<=Abstract)||LA582_0==External||(LA582_0>=Private && LA582_0<=Project)||LA582_0==Public||LA582_0==Static||LA582_0==Target||(LA582_0>=Async && LA582_0<=Await)||LA582_0==Union||(LA582_0>=Yield && LA582_0<=This)||LA582_0==From||LA582_0==This_1||(LA582_0>=Type && LA582_0<=Void)||LA582_0==FullStopFullStopFullStop||(LA582_0>=Get && LA582_0<=Let)||(LA582_0>=Out && LA582_0<=Set)||LA582_0==As||LA582_0==Of||LA582_0==LeftParenthesis||LA582_0==QuestionMark||LA582_0==LeftSquareBracket||LA582_0==LeftCurlyBracket||LA582_0==Tilde||LA582_0==RULE_IDENTIFIER) ) {
                alt582=1;
            }
            switch (alt582) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_33);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0()); 
                    }

                    }


                    }
                    loop581:
                    do {
                        int alt581=2;
                        int LA581_0 = input.LA(1);

                        if ( (LA581_0==Comma) ) {
                            alt581=1;
                        }


                        switch (alt581) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_165); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop581;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt583=2;
            int LA583_0 = input.LA(1);

            if ( (LA583_0==FullStopFullStopFullStop) ) {
                alt583=1;
            }
            switch (alt583) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt584=2;
            alt584 = dfa584.predict(input);
            switch (alt584) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_83);
                    NameBindingIdentifierParserRuleCall_1_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0()); 
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop585:
            do {
                int alt585=2;
                int LA585_0 = input.LA(1);

                if ( (LA585_0==Comma) ) {
                    alt585=1;
                }


                switch (alt585) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_167); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop585;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop586:
            do {
                int alt586=2;
                int LA586_0 = input.LA(1);

                if ( (LA586_0==Comma) ) {
                    alt586=1;
                }


                switch (alt586) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_167); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop586;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRef_return retval = new InternalN4JSParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt587=2;
            int LA587_0 = input.LA(1);

            if ( (LA587_0==Promisify||LA587_0==Target||LA587_0==Await||LA587_0==This||LA587_0==Void||LA587_0==RULE_IDENTIFIER) ) {
                alt587=1;
            }
            else if ( (LA587_0==Tilde) ) {
                alt587=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 587, 0, input);

                throw nvae;
            }
            switch (alt587) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_168);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0()); 
            }

            }


            }
            int alt589=2;
            alt589 = dfa589.predict(input);
            switch (alt589) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1()); 
                    }

                    }


                    }
                    loop588:
                    do {
                        int alt588=2;
                        int LA588_0 = input.LA(1);

                        if ( (LA588_0==Comma) ) {
                            alt588=1;
                        }


                        switch (alt588) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_169); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop588;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayTypeRef_return ruleArrayTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleArrayTypeRef_return retval = new InternalN4JSParser.ruleArrayTypeRef_return();
        retval.start = input.LT(1);

        Token ArrayTypeLiteralLeftSquareBracketKeyword_0_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            ArrayTypeLiteralLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ArrayTypeLiteralLeftSquareBracketKeyword_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_104);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getArrayTypeRefAccess().getTypeArgsAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_139);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_170);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1()); 
            }

            }


            }
            int alt591=2;
            alt591 = dfa591.predict(input);
            switch (alt591) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1()); 
                    }

                    }


                    }
                    loop590:
                    do {
                        int alt590=2;
                        int LA590_0 = input.LA(1);

                        if ( (LA590_0==Comma) ) {
                            alt590=1;
                        }


                        switch (alt590) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_169); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop590;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3()); 
                    }

                    }
                    break;

            }
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==With) ) {
                int LA592_1 = input.LA(2);

                if ( (LA592_1==LeftCurlyBracket) ) {
                    alt592=1;
                }
            }
            switch (alt592) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSParser.ruleTStructMemberList_return retval = new InternalN4JSParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop594:
            do {
                int alt594=2;
                int LA594_0 = input.LA(1);

                if ( ((LA594_0>=Intersection && LA594_0<=With)||(LA594_0>=For && LA594_0<=Var)||(LA594_0>=As && LA594_0<=Of)||LA594_0==LessThanSign||LA594_0==RULE_IDENTIFIER) ) {
                    alt594=1;
                }


                switch (alt594) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_172);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0()); 
            	    }

            	    }


            	    }
            	    int alt593=3;
            	    int LA593_0 = input.LA(1);

            	    if ( (LA593_0==Semicolon) ) {
            	        alt593=1;
            	    }
            	    else if ( (LA593_0==Comma) ) {
            	        alt593=2;
            	    }
            	    switch (alt593) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_171); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_171); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1()); 
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop594;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSParser.ruleTStructMember_return retval = new InternalN4JSParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;



            
        try {
            {
            int alt595=4;
            alt595 = dfa595.predict(input);
            switch (alt595) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSParser.ruleTStructMethod_return retval = new InternalN4JSParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt597=2;
            int LA597_0 = input.LA(1);

            if ( (LA597_0==LessThanSign) ) {
                alt597=1;
            }
            switch (alt597) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_16); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1()); 
                    }

                    }


                    }
                    loop596:
                    do {
                        int alt596=2;
                        int LA596_0 = input.LA(1);

                        if ( (LA596_0==Comma) ) {
                            alt596=1;
                        }


                        switch (alt596) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop596;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_27); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_53);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2()); 
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3()); 
            }

            }


            }

            pushFollow(FOLLOW_66);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2()); 
            }
            int alt598=2;
            int LA598_0 = input.LA(1);

            if ( (LA598_0==Colon) ) {
                alt598=1;
            }
            switch (alt598) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSParser.ruleTStructField_return retval = new InternalN4JSParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_43);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt599=2;
            int LA599_0 = input.LA(1);

            if ( (LA599_0==Colon) ) {
                alt599=1;
            }
            switch (alt599) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getTStructFieldAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructGetter_return retval = new InternalN4JSParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_27); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_66); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_2()); 
            }
            int alt600=2;
            int LA600_0 = input.LA(1);

            if ( (LA600_0==Colon) ) {
                alt600=1;
            }
            switch (alt600) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructGetterAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructSetter_return retval = new InternalN4JSParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_27); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_66);
            FparTAnonymousFormalParameterParserRuleCall_2_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;


            
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0()); 
            }
            int alt601=3;
            int LA601_0 = input.LA(1);

            if ( (LA601_0==Tilde) ) {
                alt601=1;
            }
            else if ( (LA601_0==RULE_STRUCTMODSUFFIX) ) {
                alt601=2;
            }
            switch (alt601) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;


            
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;



            
        try {
            {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);

            if ( (LA602_0==Type) ) {
                alt602=1;
            }
            else if ( (LA602_0==Constructor) ) {
                alt602=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);

                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }

            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_25);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3()); 
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgument_return retval = new InternalN4JSParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_2 = null;



            
        try {
            {
            int alt603=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA603_1 = input.LA(2);

                if ( (synpred346_InternalN4JSParser()) ) {
                    alt603=1;
                }
                else if ( (true) ) {
                    alt603=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 603, 1, input);

                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt603=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt603=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }

            switch (alt603) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.start):null), (TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSParser.ruleWildcard_return retval = new InternalN4JSParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1()); 
            }

            }


            }
            int alt604=3;
            int LA604_0 = input.LA(1);

            if ( (LA604_0==Extends) ) {
                alt604=1;
            }
            else if ( (LA604_0==Super) ) {
                alt604=2;
            }
            switch (alt604) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSParser.ruleWildcardNewNotation_return retval = new InternalN4JSParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);

        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt605=2;
            int LA605_0 = input.LA(1);

            if ( (LA605_0==Out) ) {
                alt605=1;
            }
            else if ( (LA605_0==In) ) {
                alt605=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);

                throw nvae;
            }
            switch (alt605) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUndefModifierToken() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUndefModifierToken();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUndefModifierToken_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUndefModifierToken_return ruleUndefModifierToken() throws RecognitionException {
        InternalN4JSParser.ruleUndefModifierToken_return retval = new InternalN4JSParser.ruleUndefModifierToken_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword=null;


            
        try {
            {
            QuestionMarkKeyword=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword, grammarAccess.getUndefModifierTokenAccess().getQuestionMarkKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifier_return retval = new InternalN4JSParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;


            
        try {
            {
            int alt606=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt606=1;
                }
                break;
            case Yield:
                {
                alt606=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt606=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);

                throw nvae;
            }

            switch (alt606) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifier_return retval = new InternalN4JSParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt607=2;
            int LA607_0 = input.LA(1);

            if ( (LA607_0==RULE_IDENTIFIER) ) {
                alt607=1;
            }
            else if ( ((LA607_0>=Intersection && LA607_0<=Implements)||(LA607_0>=Promisify && LA607_0<=Abstract)||LA607_0==External||(LA607_0>=Private && LA607_0<=Project)||LA607_0==Public||LA607_0==Static||LA607_0==Target||(LA607_0>=Async && LA607_0<=Await)||LA607_0==Union||LA607_0==This||LA607_0==From||LA607_0==Type||(LA607_0>=Get && LA607_0<=Let)||(LA607_0>=Out && LA607_0<=Set)||LA607_0==As||LA607_0==Of) ) {
                alt607=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 607, 0, input);

                throw nvae;
            }
            switch (alt607) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierName_return retval = new InternalN4JSParser.ruleIdentifierName_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt608=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt608=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt608=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt608=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 608, 0, input);

                throw nvae;
            }

            switch (alt608) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;


            
        try {
            {
            int alt609=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt609=1;
                }
                break;
            case Case:
                {
                alt609=2;
                }
                break;
            case Catch:
                {
                alt609=3;
                }
                break;
            case Class:
                {
                alt609=4;
                }
                break;
            case Const:
                {
                alt609=5;
                }
                break;
            case Continue:
                {
                alt609=6;
                }
                break;
            case Debugger:
                {
                alt609=7;
                }
                break;
            case Default:
                {
                alt609=8;
                }
                break;
            case Delete:
                {
                alt609=9;
                }
                break;
            case Do:
                {
                alt609=10;
                }
                break;
            case Else:
                {
                alt609=11;
                }
                break;
            case Export:
                {
                alt609=12;
                }
                break;
            case Extends:
                {
                alt609=13;
                }
                break;
            case Finally:
                {
                alt609=14;
                }
                break;
            case For:
                {
                alt609=15;
                }
                break;
            case Function:
                {
                alt609=16;
                }
                break;
            case If:
                {
                alt609=17;
                }
                break;
            case Import:
                {
                alt609=18;
                }
                break;
            case In:
                {
                alt609=19;
                }
                break;
            case Instanceof:
                {
                alt609=20;
                }
                break;
            case New:
                {
                alt609=21;
                }
                break;
            case Return:
                {
                alt609=22;
                }
                break;
            case Super:
                {
                alt609=23;
                }
                break;
            case Switch:
                {
                alt609=24;
                }
                break;
            case This_1:
                {
                alt609=25;
                }
                break;
            case Throw:
                {
                alt609=26;
                }
                break;
            case Try:
                {
                alt609=27;
                }
                break;
            case Typeof:
                {
                alt609=28;
                }
                break;
            case Var:
                {
                alt609=29;
                }
                break;
            case Void:
                {
                alt609=30;
                }
                break;
            case While:
                {
                alt609=31;
                }
                break;
            case With:
                {
                alt609=32;
                }
                break;
            case Yield:
                {
                alt609=33;
                }
                break;
            case Null:
                {
                alt609=34;
                }
                break;
            case True:
                {
                alt609=35;
                }
                break;
            case False:
                {
                alt609=36;
                }
                break;
            case Enum:
                {
                alt609=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 609, 0, input);

                throw nvae;
            }

            switch (alt609) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24()); 
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25()); 
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26()); 
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27()); 
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28()); 
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29()); 
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30()); 
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31()); 
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32()); 
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33()); 
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34()); 
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35()); 
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;


            
        try {
            {
            int alt610=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt610=1;
                }
                break;
            case Set:
                {
                alt610=2;
                }
                break;
            case Let:
                {
                alt610=3;
                }
                break;
            case Project:
                {
                alt610=4;
                }
                break;
            case External:
                {
                alt610=5;
                }
                break;
            case Abstract:
                {
                alt610=6;
                }
                break;
            case Static:
                {
                alt610=7;
                }
                break;
            case As:
                {
                alt610=8;
                }
                break;
            case From:
                {
                alt610=9;
                }
                break;
            case Constructor:
                {
                alt610=10;
                }
                break;
            case Of:
                {
                alt610=11;
                }
                break;
            case Target:
                {
                alt610=12;
                }
                break;
            case Type:
                {
                alt610=13;
                }
                break;
            case Union:
                {
                alt610=14;
                }
                break;
            case Intersection:
                {
                alt610=15;
                }
                break;
            case This:
                {
                alt610=16;
                }
                break;
            case Promisify:
                {
                alt610=17;
                }
                break;
            case Await:
                {
                alt610=18;
                }
                break;
            case Async:
                {
                alt610=19;
                }
                break;
            case Implements:
                {
                alt610=20;
                }
                break;
            case Interface:
                {
                alt610=21;
                }
                break;
            case Private:
                {
                alt610=22;
                }
                break;
            case Protected:
                {
                alt610=23;
                }
                break;
            case Public:
                {
                alt610=24;
                }
                break;
            case Out:
                {
                alt610=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 610, 0, input);

                throw nvae;
            }

            switch (alt610) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt611=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt611=1;
                }
                break;
            case Const:
                {
                alt611=2;
                }
                break;
            case Let:
                {
                alt611=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 611, 0, input);

                throw nvae;
            }

            switch (alt611) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt612=2;
            int LA612_0 = input.LA(1);

            if ( (LA612_0==PlusSignPlusSign) ) {
                alt612=1;
            }
            else if ( (LA612_0==HyphenMinusHyphenMinus) ) {
                alt612=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 612, 0, input);

                throw nvae;
            }
            switch (alt612) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt613=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt613=1;
                }
                break;
            case Void:
                {
                alt613=2;
                }
                break;
            case Typeof:
                {
                alt613=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt613=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt613=5;
                }
                break;
            case PlusSign:
                {
                alt613=6;
                }
                break;
            case HyphenMinus:
                {
                alt613=7;
                }
                break;
            case Tilde:
                {
                alt613=8;
                }
                break;
            case ExclamationMark:
                {
                alt613=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 613, 0, input);

                throw nvae;
            }

            switch (alt613) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt614=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt614=1;
                }
                break;
            case Solidus:
                {
                alt614=2;
                }
                break;
            case PercentSign:
                {
                alt614=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 614, 0, input);

                throw nvae;
            }

            switch (alt614) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt615=2;
            int LA615_0 = input.LA(1);

            if ( (LA615_0==PlusSign) ) {
                alt615=1;
            }
            else if ( (LA615_0==HyphenMinus) ) {
                alt615=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 615, 0, input);

                throw nvae;
            }
            switch (alt615) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt616=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt616=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt616=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt616=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt616=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 616, 0, input);

                throw nvae;
            }

            switch (alt616) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt617=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt617=1;
                }
                break;
            case Project:
                {
                alt617=2;
                }
                break;
            case Protected:
                {
                alt617=3;
                }
                break;
            case Public:
                {
                alt617=4;
                }
                break;
            case External:
                {
                alt617=5;
                }
                break;
            case Abstract:
                {
                alt617=6;
                }
                break;
            case Static:
                {
                alt617=7;
                }
                break;
            case Const:
                {
                alt617=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 617, 0, input);

                throw nvae;
            }

            switch (alt617) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_130); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop618:
        do {
            int alt618=2;
            int LA618_0 = input.LA(1);

            if ( ((LA618_0>=Protected && LA618_0<=Abstract)||LA618_0==External||(LA618_0>=Private && LA618_0<=Project)||LA618_0==Public||LA618_0==Static||LA618_0==Const) ) {
                alt618=1;
            }


            switch (alt618) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop618;
            }
        } while (true);

        match(input,Class,FOLLOW_176); if (state.failed) return ;
        int alt619=2;
        int LA619_0 = input.LA(1);

        if ( (LA619_0==Tilde) ) {
            alt619=1;
        }
        switch (alt619) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt620=2;
        int LA620_0 = input.LA(1);

        if ( ((LA620_0>=Intersection && LA620_0<=Implements)||(LA620_0>=Promisify && LA620_0<=Abstract)||LA620_0==External||(LA620_0>=Private && LA620_0<=Project)||LA620_0==Public||LA620_0==Static||LA620_0==Target||(LA620_0>=Async && LA620_0<=Await)||LA620_0==Union||(LA620_0>=Yield && LA620_0<=This)||LA620_0==From||LA620_0==Type||(LA620_0>=Get && LA620_0<=Let)||(LA620_0>=Out && LA620_0<=Set)||LA620_0==As||LA620_0==Of||LA620_0==RULE_IDENTIFIER) ) {
            alt620=1;
        }
        switch (alt620) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop621:
        do {
            int alt621=2;
            int LA621_0 = input.LA(1);

            if ( ((LA621_0>=Protected && LA621_0<=Abstract)||LA621_0==External||(LA621_0>=Private && LA621_0<=Project)||LA621_0==Public||LA621_0==Static||LA621_0==Const) ) {
                alt621=1;
            }


            switch (alt621) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop621;
            }
        } while (true);

        match(input,Interface,FOLLOW_176); if (state.failed) return ;
        int alt622=2;
        int LA622_0 = input.LA(1);

        if ( (LA622_0==Tilde) ) {
            alt622=1;
        }
        switch (alt622) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt623=2;
        int LA623_0 = input.LA(1);

        if ( ((LA623_0>=Intersection && LA623_0<=Implements)||(LA623_0>=Promisify && LA623_0<=Abstract)||LA623_0==External||(LA623_0>=Private && LA623_0<=Project)||LA623_0==Public||LA623_0==Static||LA623_0==Target||(LA623_0>=Async && LA623_0<=Await)||LA623_0==Union||(LA623_0>=Yield && LA623_0<=This)||LA623_0==From||LA623_0==Type||(LA623_0>=Get && LA623_0<=Let)||(LA623_0>=Out && LA623_0<=Set)||LA623_0==As||LA623_0==Of||LA623_0==RULE_IDENTIFIER) ) {
            alt623=1;
        }
        switch (alt623) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop624:
        do {
            int alt624=2;
            int LA624_0 = input.LA(1);

            if ( ((LA624_0>=Protected && LA624_0<=Abstract)||LA624_0==External||(LA624_0>=Private && LA624_0<=Project)||LA624_0==Public||LA624_0==Static||LA624_0==Const) ) {
                alt624=1;
            }


            switch (alt624) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop624;
            }
        } while (true);

        match(input,Enum,FOLLOW_177); if (state.failed) return ;
        int alt625=2;
        int LA625_0 = input.LA(1);

        if ( ((LA625_0>=Intersection && LA625_0<=Implements)||(LA625_0>=Promisify && LA625_0<=Abstract)||LA625_0==External||(LA625_0>=Private && LA625_0<=Project)||LA625_0==Public||LA625_0==Static||LA625_0==Target||(LA625_0>=Async && LA625_0<=Await)||LA625_0==Union||(LA625_0>=Yield && LA625_0<=This)||LA625_0==From||LA625_0==Type||(LA625_0>=Get && LA625_0<=Let)||(LA625_0>=Out && LA625_0<=Set)||LA625_0==As||LA625_0==Of||LA625_0==RULE_IDENTIFIER) ) {
            alt625=1;
        }
        switch (alt625) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop626:
        do {
            int alt626=2;
            int LA626_0 = input.LA(1);

            if ( ((LA626_0>=Protected && LA626_0<=Abstract)||LA626_0==External||(LA626_0>=Private && LA626_0<=Project)||LA626_0==Public||LA626_0==Static||LA626_0==Const) ) {
                alt626=1;
            }


            switch (alt626) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop626;
            }
        } while (true);

        pushFollow(FOLLOW_46);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred8_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_130); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop627:
        do {
            int alt627=2;
            int LA627_0 = input.LA(1);

            if ( ((LA627_0>=Protected && LA627_0<=Abstract)||LA627_0==External||(LA627_0>=Private && LA627_0<=Project)||LA627_0==Public||LA627_0==Static||LA627_0==Const) ) {
                alt627=1;
            }


            switch (alt627) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop627;
            }
        } while (true);

        match(input,Class,FOLLOW_176); if (state.failed) return ;
        int alt628=2;
        int LA628_0 = input.LA(1);

        if ( (LA628_0==Tilde) ) {
            alt628=1;
        }
        switch (alt628) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt629=2;
        int LA629_0 = input.LA(1);

        if ( ((LA629_0>=Intersection && LA629_0<=Implements)||(LA629_0>=Promisify && LA629_0<=Abstract)||LA629_0==External||(LA629_0>=Private && LA629_0<=Project)||LA629_0==Public||LA629_0==Static||LA629_0==Target||(LA629_0>=Async && LA629_0<=Await)||LA629_0==Union||(LA629_0>=Yield && LA629_0<=This)||LA629_0==From||LA629_0==Type||(LA629_0>=Get && LA629_0<=Let)||(LA629_0>=Out && LA629_0<=Set)||LA629_0==As||LA629_0==Of||LA629_0==RULE_IDENTIFIER) ) {
            alt629=1;
        }
        switch (alt629) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop630:
        do {
            int alt630=2;
            int LA630_0 = input.LA(1);

            if ( ((LA630_0>=Protected && LA630_0<=Abstract)||LA630_0==External||(LA630_0>=Private && LA630_0<=Project)||LA630_0==Public||LA630_0==Static||LA630_0==Const) ) {
                alt630=1;
            }


            switch (alt630) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop630;
            }
        } while (true);

        match(input,Interface,FOLLOW_176); if (state.failed) return ;
        int alt631=2;
        int LA631_0 = input.LA(1);

        if ( (LA631_0==Tilde) ) {
            alt631=1;
        }
        switch (alt631) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt632=2;
        int LA632_0 = input.LA(1);

        if ( ((LA632_0>=Intersection && LA632_0<=Implements)||(LA632_0>=Promisify && LA632_0<=Abstract)||LA632_0==External||(LA632_0>=Private && LA632_0<=Project)||LA632_0==Public||LA632_0==Static||LA632_0==Target||(LA632_0>=Async && LA632_0<=Await)||LA632_0==Union||(LA632_0>=Yield && LA632_0<=This)||LA632_0==From||LA632_0==Type||(LA632_0>=Get && LA632_0<=Let)||(LA632_0>=Out && LA632_0<=Set)||LA632_0==As||LA632_0==Of||LA632_0==RULE_IDENTIFIER) ) {
            alt632=1;
        }
        switch (alt632) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop633:
        do {
            int alt633=2;
            int LA633_0 = input.LA(1);

            if ( ((LA633_0>=Protected && LA633_0<=Abstract)||LA633_0==External||(LA633_0>=Private && LA633_0<=Project)||LA633_0==Public||LA633_0==Static||LA633_0==Const) ) {
                alt633=1;
            }


            switch (alt633) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop633;
            }
        } while (true);

        match(input,Enum,FOLLOW_177); if (state.failed) return ;
        int alt634=2;
        int LA634_0 = input.LA(1);

        if ( ((LA634_0>=Intersection && LA634_0<=Implements)||(LA634_0>=Promisify && LA634_0<=Abstract)||LA634_0==External||(LA634_0>=Private && LA634_0<=Project)||LA634_0==Public||LA634_0==Static||LA634_0==Target||(LA634_0>=Async && LA634_0<=Await)||LA634_0==Union||(LA634_0>=Yield && LA634_0<=This)||LA634_0==From||LA634_0==Type||(LA634_0>=Get && LA634_0<=Let)||(LA634_0>=Out && LA634_0<=Set)||LA634_0==As||LA634_0==Of||LA634_0==RULE_IDENTIFIER) ) {
            alt634=1;
        }
        switch (alt634) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred17_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred20_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred37_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred38_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred40_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred46_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred47_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred48_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred53_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred54_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred56_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred61_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred63_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred64_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop678:
        do {
            int alt678=2;
            int LA678_0 = input.LA(1);

            if ( ((LA678_0>=Protected && LA678_0<=Abstract)||LA678_0==External||(LA678_0>=Private && LA678_0<=Project)||LA678_0==Public||LA678_0==Static||LA678_0==Const) ) {
                alt678=1;
            }


            switch (alt678) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop678;
            }
        } while (true);

        pushFollow(FOLLOW_46);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred71_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred72_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_83);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred73_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred74_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop679:
        do {
            int alt679=2;
            int LA679_0 = input.LA(1);

            if ( ((LA679_0>=Protected && LA679_0<=Abstract)||LA679_0==External||(LA679_0>=Private && LA679_0<=Project)||LA679_0==Public||LA679_0==Static||LA679_0==Const) ) {
                alt679=1;
            }


            switch (alt679) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop679;
            }
        } while (true);

        pushFollow(FOLLOW_46);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred75_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_83);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_130); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_130); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred81_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred82_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred83_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred84_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred85_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred86_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred98_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred99_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt680=2;
        int LA680_0 = input.LA(1);

        if ( (LA680_0==Colon) ) {
            alt680=1;
        }
        switch (alt680) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt681=2;
        int LA681_0 = input.LA(1);

        if ( (LA681_0==Colon) ) {
            alt681=1;
        }
        switch (alt681) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt682=2;
        int LA682_0 = input.LA(1);

        if ( (LA682_0==Colon) ) {
            alt682=1;
        }
        switch (alt682) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt683=2;
        int LA683_0 = input.LA(1);

        if ( (LA683_0==Colon) ) {
            alt683=1;
        }
        switch (alt683) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred103_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred104_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_71);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_54); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_66);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred112_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred113_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_72);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt684=2;
        int LA684_0 = input.LA(1);

        if ( (LA684_0==In) ) {
            alt684=1;
        }
        else if ( (LA684_0==Of) ) {
            alt684=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 684, 0, input);

            throw nvae;
        }
        switch (alt684) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_123); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_123); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt685=2;
        int LA685_0 = input.LA(1);

        if ( ((LA685_0>=Intersection && LA685_0<=Implements)||(LA685_0>=Promisify && LA685_0<=Abstract)||(LA685_0>=External && LA685_0<=Function)||(LA685_0>=Private && LA685_0<=Delete)||LA685_0==Public||LA685_0==Static||(LA685_0>=Target && LA685_0<=Await)||LA685_0==Class||(LA685_0>=False && LA685_0<=Super)||LA685_0==Union||(LA685_0>=Yield && LA685_0<=This)||(LA685_0>=From && LA685_0<=Void)||(LA685_0>=Get && LA685_0<=Set)||LA685_0==PlusSignPlusSign||LA685_0==HyphenMinusHyphenMinus||LA685_0==SolidusEqualsSign||LA685_0==As||LA685_0==Of||LA685_0==ExclamationMark||LA685_0==LeftParenthesis||(LA685_0>=Asterisk && LA685_0<=PlusSign)||LA685_0==HyphenMinus||LA685_0==Solidus||LA685_0==LessThanSign||(LA685_0>=CommercialAt && LA685_0<=LeftSquareBracket)||LA685_0==LeftCurlyBracket||LA685_0==Tilde||LA685_0==RULE_DOUBLE||(LA685_0>=RULE_HEX_INT && LA685_0<=RULE_LEGACY_OCTAL_INT)||LA685_0==RULE_SCIENTIFIC_INT||LA685_0==RULE_IDENTIFIER||LA685_0==RULE_STRING||(LA685_0>=RULE_TEMPLATE_HEAD && LA685_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA685_0==RULE_INT) ) {
            alt685=1;
        }
        switch (alt685) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred114_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred115_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_71);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_54); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_66);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred116_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred117_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_72);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt686=2;
        int LA686_0 = input.LA(1);

        if ( (LA686_0==In) ) {
            alt686=1;
        }
        else if ( (LA686_0==Of) ) {
            alt686=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 686, 0, input);

            throw nvae;
        }
        switch (alt686) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_123); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_123); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt687=2;
        int LA687_0 = input.LA(1);

        if ( ((LA687_0>=Intersection && LA687_0<=Implements)||(LA687_0>=Promisify && LA687_0<=Abstract)||(LA687_0>=External && LA687_0<=Function)||(LA687_0>=Private && LA687_0<=Delete)||LA687_0==Public||LA687_0==Static||(LA687_0>=Target && LA687_0<=Await)||LA687_0==Class||(LA687_0>=False && LA687_0<=Super)||LA687_0==Union||(LA687_0>=Yield && LA687_0<=This)||(LA687_0>=From && LA687_0<=Void)||(LA687_0>=Get && LA687_0<=Set)||LA687_0==PlusSignPlusSign||LA687_0==HyphenMinusHyphenMinus||LA687_0==SolidusEqualsSign||LA687_0==As||LA687_0==Of||LA687_0==ExclamationMark||LA687_0==LeftParenthesis||(LA687_0>=Asterisk && LA687_0<=PlusSign)||LA687_0==HyphenMinus||LA687_0==Solidus||LA687_0==LessThanSign||(LA687_0>=CommercialAt && LA687_0<=LeftSquareBracket)||LA687_0==LeftCurlyBracket||LA687_0==Tilde||LA687_0==RULE_DOUBLE||(LA687_0>=RULE_HEX_INT && LA687_0<=RULE_LEGACY_OCTAL_INT)||LA687_0==RULE_SCIENTIFIC_INT||LA687_0==RULE_IDENTIFIER||LA687_0==RULE_STRING||(LA687_0>=RULE_TEMPLATE_HEAD && LA687_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA687_0==RULE_INT) ) {
            alt687=1;
        }
        switch (alt687) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred125_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_83);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_83);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_45); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred134_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_45); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred135_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt688=2;
        alt688 = dfa688.predict(input);
        switch (alt688) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_83);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred138_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt689=2;
        int LA689_0 = input.LA(1);

        if ( (LA689_0==LessThanSign) ) {
            alt689=1;
        }
        switch (alt689) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt690=2;
        alt690 = dfa690.predict(input);
        switch (alt690) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt691=2;
        int LA691_0 = input.LA(1);

        if ( (LA691_0==Asterisk) ) {
            alt691=1;
        }
        else if ( ((LA691_0>=Intersection && LA691_0<=With)||(LA691_0>=For && LA691_0<=Var)||(LA691_0>=As && LA691_0<=Of)||LA691_0==LeftSquareBracket||LA691_0==RULE_DOUBLE||LA691_0==RULE_HEX_INT||LA691_0==RULE_OCTAL_INT||LA691_0==RULE_SCIENTIFIC_INT||LA691_0==RULE_IDENTIFIER||LA691_0==RULE_STRING||LA691_0==RULE_INT) ) {
            alt691=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 691, 0, input);

            throw nvae;
        }
        switch (alt691) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt692=2;
        alt692 = dfa692.predict(input);
        switch (alt692) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_83);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred140_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred141_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt693=2;
        int LA693_0 = input.LA(1);

        if ( (LA693_0==LessThanSign) ) {
            alt693=1;
        }
        switch (alt693) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt694=2;
        alt694 = dfa694.predict(input);
        switch (alt694) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt695=2;
        int LA695_0 = input.LA(1);

        if ( (LA695_0==Asterisk) ) {
            alt695=1;
        }
        else if ( ((LA695_0>=Intersection && LA695_0<=With)||(LA695_0>=For && LA695_0<=Var)||(LA695_0>=As && LA695_0<=Of)||LA695_0==LeftSquareBracket||LA695_0==RULE_DOUBLE||LA695_0==RULE_HEX_INT||LA695_0==RULE_OCTAL_INT||LA695_0==RULE_SCIENTIFIC_INT||LA695_0==RULE_IDENTIFIER||LA695_0==RULE_STRING||LA695_0==RULE_INT) ) {
            alt695=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 695, 0, input);

            throw nvae;
        }
        switch (alt695) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred143_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt696=2;
        alt696 = dfa696.predict(input);
        switch (alt696) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_83);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred144_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred146_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred149_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt697=2;
        int LA697_0 = input.LA(1);

        if ( (LA697_0==LessThanSign) ) {
            alt697=1;
        }
        switch (alt697) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt698=2;
        alt698 = dfa698.predict(input);
        switch (alt698) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt699=2;
        int LA699_0 = input.LA(1);

        if ( (LA699_0==Asterisk) ) {
            alt699=1;
        }
        else if ( ((LA699_0>=Intersection && LA699_0<=With)||(LA699_0>=For && LA699_0<=Var)||(LA699_0>=As && LA699_0<=Of)||LA699_0==LeftSquareBracket||LA699_0==RULE_DOUBLE||LA699_0==RULE_HEX_INT||LA699_0==RULE_OCTAL_INT||LA699_0==RULE_SCIENTIFIC_INT||LA699_0==RULE_IDENTIFIER||LA699_0==RULE_STRING||LA699_0==RULE_INT) ) {
            alt699=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 699, 0, input);

            throw nvae;
        }
        switch (alt699) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred152_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt700=2;
        alt700 = dfa700.predict(input);
        switch (alt700) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_83);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred153_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred155_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred158_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt701=2;
        int LA701_0 = input.LA(1);

        if ( (LA701_0==LessThanSign) ) {
            alt701=1;
        }
        switch (alt701) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt702=2;
        alt702 = dfa702.predict(input);
        switch (alt702) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_94);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt703=2;
        int LA703_0 = input.LA(1);

        if ( (LA703_0==Asterisk) ) {
            alt703=1;
        }
        else if ( ((LA703_0>=Intersection && LA703_0<=With)||(LA703_0>=For && LA703_0<=Var)||(LA703_0>=As && LA703_0<=Of)||LA703_0==LeftSquareBracket||LA703_0==RULE_DOUBLE||LA703_0==RULE_HEX_INT||LA703_0==RULE_OCTAL_INT||LA703_0==RULE_SCIENTIFIC_INT||LA703_0==RULE_IDENTIFIER||LA703_0==RULE_STRING||LA703_0==RULE_INT) ) {
            alt703=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 703, 0, input);

            throw nvae;
        }
        switch (alt703) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_100); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred184_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_100); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred186_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred188_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred193_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_179);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_179);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_180);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_180);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_126); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt721=4;
        int LA721_0 = input.LA(1);

        if ( (LA721_0==LeftParenthesis) && (synpred237_InternalN4JSParser())) {
            alt721=1;
        }
        else if ( (LA721_0==Async) ) {
            int LA721_2 = input.LA(2);

            if ( (LA721_2==EqualsSignGreaterThanSign) ) {
                alt721=4;
            }
            else if ( (LA721_2==RULE_NO_LINE_TERMINATOR) && (synpred238_InternalN4JSParser())) {
                alt721=2;
            }
            else if ( (LA721_2==LeftParenthesis) && (synpred238_InternalN4JSParser())) {
                alt721=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 721, 2, input);

                throw nvae;
            }
        }
        else if ( (LA721_0==Asterisk) && (synpred239_InternalN4JSParser())) {
            alt721=3;
        }
        else if ( ((LA721_0>=Intersection && LA721_0<=Implements)||(LA721_0>=Promisify && LA721_0<=Abstract)||LA721_0==External||(LA721_0>=Private && LA721_0<=Project)||LA721_0==Public||LA721_0==Static||LA721_0==Target||LA721_0==Await||LA721_0==Union||(LA721_0>=Yield && LA721_0<=This)||LA721_0==From||LA721_0==Type||(LA721_0>=Get && LA721_0<=Let)||(LA721_0>=Out && LA721_0<=Set)||LA721_0==As||LA721_0==Of||LA721_0==RULE_IDENTIFIER) ) {
            alt721=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 721, 0, input);

            throw nvae;
        }
        switch (alt721) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }
                int alt713=2;
                int LA713_0 = input.LA(1);

                if ( ((LA713_0>=Intersection && LA713_0<=Implements)||(LA713_0>=Promisify && LA713_0<=Abstract)||LA713_0==External||(LA713_0>=Private && LA713_0<=Project)||LA713_0==Public||LA713_0==Static||LA713_0==Target||(LA713_0>=Async && LA713_0<=Await)||LA713_0==Union||(LA713_0>=Yield && LA713_0<=This)||LA713_0==From||LA713_0==This_1||(LA713_0>=Type && LA713_0<=Void)||LA713_0==FullStopFullStopFullStop||(LA713_0>=Get && LA713_0<=Let)||(LA713_0>=Out && LA713_0<=Set)||LA713_0==As||LA713_0==Of||(LA713_0>=QuestionMark && LA713_0<=LeftSquareBracket)||LA713_0==LeftCurlyBracket||LA713_0==Tilde||LA713_0==RULE_IDENTIFIER) ) {
                    alt713=1;
                }
                switch (alt713) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop712:
                        do {
                            int alt712=2;
                            int LA712_0 = input.LA(1);

                            if ( (LA712_0==Comma) ) {
                                alt712=1;
                            }


                            switch (alt712) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop712;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt714=2;
                int LA714_0 = input.LA(1);

                if ( (LA714_0==Colon) ) {
                    alt714=1;
                }
                switch (alt714) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt716=2;
                int LA716_0 = input.LA(1);

                if ( ((LA716_0>=Intersection && LA716_0<=Implements)||(LA716_0>=Promisify && LA716_0<=Abstract)||LA716_0==External||(LA716_0>=Private && LA716_0<=Project)||LA716_0==Public||LA716_0==Static||LA716_0==Target||(LA716_0>=Async && LA716_0<=Await)||LA716_0==Union||(LA716_0>=Yield && LA716_0<=This)||LA716_0==From||LA716_0==This_1||(LA716_0>=Type && LA716_0<=Void)||LA716_0==FullStopFullStopFullStop||(LA716_0>=Get && LA716_0<=Let)||(LA716_0>=Out && LA716_0<=Set)||LA716_0==As||LA716_0==Of||(LA716_0>=QuestionMark && LA716_0<=LeftSquareBracket)||LA716_0==LeftCurlyBracket||LA716_0==Tilde||LA716_0==RULE_IDENTIFIER) ) {
                    alt716=1;
                }
                switch (alt716) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop715:
                        do {
                            int alt715=2;
                            int LA715_0 = input.LA(1);

                            if ( (LA715_0==Comma) ) {
                                alt715=1;
                            }


                            switch (alt715) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop715;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt717=2;
                int LA717_0 = input.LA(1);

                if ( (LA717_0==Colon) ) {
                    alt717=1;
                }
                switch (alt717) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt719=2;
                int LA719_0 = input.LA(1);

                if ( ((LA719_0>=Intersection && LA719_0<=Implements)||(LA719_0>=Promisify && LA719_0<=Abstract)||LA719_0==External||(LA719_0>=Private && LA719_0<=Project)||LA719_0==Public||LA719_0==Static||LA719_0==Target||(LA719_0>=Async && LA719_0<=Await)||LA719_0==Union||(LA719_0>=Yield && LA719_0<=This)||LA719_0==From||LA719_0==This_1||(LA719_0>=Type && LA719_0<=Void)||LA719_0==FullStopFullStopFullStop||(LA719_0>=Get && LA719_0<=Let)||(LA719_0>=Out && LA719_0<=Set)||LA719_0==As||LA719_0==Of||(LA719_0>=QuestionMark && LA719_0<=LeftSquareBracket)||LA719_0==LeftCurlyBracket||LA719_0==Tilde||LA719_0==RULE_IDENTIFIER) ) {
                    alt719=1;
                }
                switch (alt719) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop718:
                        do {
                            int alt718=2;
                            int LA718_0 = input.LA(1);

                            if ( (LA718_0==Comma) ) {
                                alt718=1;
                            }


                            switch (alt718) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop718;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt720=2;
                int LA720_0 = input.LA(1);

                if ( (LA720_0==Colon) ) {
                    alt720=1;
                }
                switch (alt720) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred243_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_126); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt731=4;
        int LA731_0 = input.LA(1);

        if ( (LA731_0==LeftParenthesis) && (synpred244_InternalN4JSParser())) {
            alt731=1;
        }
        else if ( (LA731_0==Async) ) {
            int LA731_2 = input.LA(2);

            if ( (LA731_2==RULE_NO_LINE_TERMINATOR) && (synpred245_InternalN4JSParser())) {
                alt731=2;
            }
            else if ( (LA731_2==LeftParenthesis) && (synpred245_InternalN4JSParser())) {
                alt731=2;
            }
            else if ( (LA731_2==EqualsSignGreaterThanSign) ) {
                alt731=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 731, 2, input);

                throw nvae;
            }
        }
        else if ( (LA731_0==Asterisk) && (synpred246_InternalN4JSParser())) {
            alt731=3;
        }
        else if ( ((LA731_0>=Intersection && LA731_0<=Implements)||(LA731_0>=Promisify && LA731_0<=Abstract)||LA731_0==External||(LA731_0>=Private && LA731_0<=Project)||LA731_0==Public||LA731_0==Static||LA731_0==Target||LA731_0==Await||LA731_0==Union||(LA731_0>=Yield && LA731_0<=This)||LA731_0==From||LA731_0==Type||(LA731_0>=Get && LA731_0<=Let)||(LA731_0>=Out && LA731_0<=Set)||LA731_0==As||LA731_0==Of||LA731_0==RULE_IDENTIFIER) ) {
            alt731=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 731, 0, input);

            throw nvae;
        }
        switch (alt731) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }
                int alt723=2;
                int LA723_0 = input.LA(1);

                if ( ((LA723_0>=Intersection && LA723_0<=Implements)||(LA723_0>=Promisify && LA723_0<=Abstract)||LA723_0==External||(LA723_0>=Private && LA723_0<=Project)||LA723_0==Public||LA723_0==Static||LA723_0==Target||(LA723_0>=Async && LA723_0<=Await)||LA723_0==Union||(LA723_0>=Yield && LA723_0<=This)||LA723_0==From||LA723_0==This_1||(LA723_0>=Type && LA723_0<=Void)||LA723_0==FullStopFullStopFullStop||(LA723_0>=Get && LA723_0<=Let)||(LA723_0>=Out && LA723_0<=Set)||LA723_0==As||LA723_0==Of||(LA723_0>=QuestionMark && LA723_0<=LeftSquareBracket)||LA723_0==LeftCurlyBracket||LA723_0==Tilde||LA723_0==RULE_IDENTIFIER) ) {
                    alt723=1;
                }
                switch (alt723) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop722:
                        do {
                            int alt722=2;
                            int LA722_0 = input.LA(1);

                            if ( (LA722_0==Comma) ) {
                                alt722=1;
                            }


                            switch (alt722) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop722;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt724=2;
                int LA724_0 = input.LA(1);

                if ( (LA724_0==Colon) ) {
                    alt724=1;
                }
                switch (alt724) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt726=2;
                int LA726_0 = input.LA(1);

                if ( ((LA726_0>=Intersection && LA726_0<=Implements)||(LA726_0>=Promisify && LA726_0<=Abstract)||LA726_0==External||(LA726_0>=Private && LA726_0<=Project)||LA726_0==Public||LA726_0==Static||LA726_0==Target||(LA726_0>=Async && LA726_0<=Await)||LA726_0==Union||(LA726_0>=Yield && LA726_0<=This)||LA726_0==From||LA726_0==This_1||(LA726_0>=Type && LA726_0<=Void)||LA726_0==FullStopFullStopFullStop||(LA726_0>=Get && LA726_0<=Let)||(LA726_0>=Out && LA726_0<=Set)||LA726_0==As||LA726_0==Of||(LA726_0>=QuestionMark && LA726_0<=LeftSquareBracket)||LA726_0==LeftCurlyBracket||LA726_0==Tilde||LA726_0==RULE_IDENTIFIER) ) {
                    alt726=1;
                }
                switch (alt726) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop725:
                        do {
                            int alt725=2;
                            int LA725_0 = input.LA(1);

                            if ( (LA725_0==Comma) ) {
                                alt725=1;
                            }


                            switch (alt725) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop725;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt727=2;
                int LA727_0 = input.LA(1);

                if ( (LA727_0==Colon) ) {
                    alt727=1;
                }
                switch (alt727) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt729=2;
                int LA729_0 = input.LA(1);

                if ( ((LA729_0>=Intersection && LA729_0<=Implements)||(LA729_0>=Promisify && LA729_0<=Abstract)||LA729_0==External||(LA729_0>=Private && LA729_0<=Project)||LA729_0==Public||LA729_0==Static||LA729_0==Target||(LA729_0>=Async && LA729_0<=Await)||LA729_0==Union||(LA729_0>=Yield && LA729_0<=This)||LA729_0==From||LA729_0==This_1||(LA729_0>=Type && LA729_0<=Void)||LA729_0==FullStopFullStopFullStop||(LA729_0>=Get && LA729_0<=Let)||(LA729_0>=Out && LA729_0<=Set)||LA729_0==As||LA729_0==Of||(LA729_0>=QuestionMark && LA729_0<=LeftSquareBracket)||LA729_0==LeftCurlyBracket||LA729_0==Tilde||LA729_0==RULE_IDENTIFIER) ) {
                    alt729=1;
                }
                switch (alt729) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop728:
                        do {
                            int alt728=2;
                            int LA728_0 = input.LA(1);

                            if ( (LA728_0==Comma) ) {
                                alt728=1;
                            }


                            switch (alt728) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop728;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt730=2;
                int LA730_0 = input.LA(1);

                if ( (LA730_0==Colon) ) {
                    alt730=1;
                }
                switch (alt730) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred249_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_126); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt741=4;
        int LA741_0 = input.LA(1);

        if ( (LA741_0==LeftParenthesis) && (synpred251_InternalN4JSParser())) {
            alt741=1;
        }
        else if ( (LA741_0==Async) ) {
            int LA741_2 = input.LA(2);

            if ( (LA741_2==EqualsSignGreaterThanSign) ) {
                alt741=4;
            }
            else if ( (LA741_2==RULE_NO_LINE_TERMINATOR) && (synpred252_InternalN4JSParser())) {
                alt741=2;
            }
            else if ( (LA741_2==LeftParenthesis) && (synpred252_InternalN4JSParser())) {
                alt741=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 741, 2, input);

                throw nvae;
            }
        }
        else if ( (LA741_0==Asterisk) && (synpred253_InternalN4JSParser())) {
            alt741=3;
        }
        else if ( ((LA741_0>=Intersection && LA741_0<=Implements)||(LA741_0>=Promisify && LA741_0<=Abstract)||LA741_0==External||(LA741_0>=Private && LA741_0<=Project)||LA741_0==Public||LA741_0==Static||LA741_0==Target||LA741_0==Await||LA741_0==Union||LA741_0==This||LA741_0==From||LA741_0==Type||(LA741_0>=Get && LA741_0<=Let)||(LA741_0>=Out && LA741_0<=Set)||LA741_0==As||LA741_0==Of||LA741_0==RULE_IDENTIFIER) ) {
            alt741=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 741, 0, input);

            throw nvae;
        }
        switch (alt741) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }
                int alt733=2;
                int LA733_0 = input.LA(1);

                if ( ((LA733_0>=Intersection && LA733_0<=Implements)||(LA733_0>=Promisify && LA733_0<=Abstract)||LA733_0==External||(LA733_0>=Private && LA733_0<=Project)||LA733_0==Public||LA733_0==Static||LA733_0==Target||(LA733_0>=Async && LA733_0<=Await)||LA733_0==Union||LA733_0==This||LA733_0==From||LA733_0==This_1||(LA733_0>=Type && LA733_0<=Void)||LA733_0==FullStopFullStopFullStop||(LA733_0>=Get && LA733_0<=Let)||(LA733_0>=Out && LA733_0<=Set)||LA733_0==As||LA733_0==Of||(LA733_0>=QuestionMark && LA733_0<=LeftSquareBracket)||LA733_0==LeftCurlyBracket||LA733_0==Tilde||LA733_0==RULE_IDENTIFIER) ) {
                    alt733=1;
                }
                switch (alt733) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop732:
                        do {
                            int alt732=2;
                            int LA732_0 = input.LA(1);

                            if ( (LA732_0==Comma) ) {
                                alt732=1;
                            }


                            switch (alt732) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop732;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt734=2;
                int LA734_0 = input.LA(1);

                if ( (LA734_0==Colon) ) {
                    alt734=1;
                }
                switch (alt734) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt736=2;
                int LA736_0 = input.LA(1);

                if ( ((LA736_0>=Intersection && LA736_0<=Implements)||(LA736_0>=Promisify && LA736_0<=Abstract)||LA736_0==External||(LA736_0>=Private && LA736_0<=Project)||LA736_0==Public||LA736_0==Static||LA736_0==Target||(LA736_0>=Async && LA736_0<=Await)||LA736_0==Union||LA736_0==This||LA736_0==From||LA736_0==This_1||(LA736_0>=Type && LA736_0<=Void)||LA736_0==FullStopFullStopFullStop||(LA736_0>=Get && LA736_0<=Let)||(LA736_0>=Out && LA736_0<=Set)||LA736_0==As||LA736_0==Of||(LA736_0>=QuestionMark && LA736_0<=LeftSquareBracket)||LA736_0==LeftCurlyBracket||LA736_0==Tilde||LA736_0==RULE_IDENTIFIER) ) {
                    alt736=1;
                }
                switch (alt736) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop735:
                        do {
                            int alt735=2;
                            int LA735_0 = input.LA(1);

                            if ( (LA735_0==Comma) ) {
                                alt735=1;
                            }


                            switch (alt735) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop735;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt737=2;
                int LA737_0 = input.LA(1);

                if ( (LA737_0==Colon) ) {
                    alt737=1;
                }
                switch (alt737) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt739=2;
                int LA739_0 = input.LA(1);

                if ( ((LA739_0>=Intersection && LA739_0<=Implements)||(LA739_0>=Promisify && LA739_0<=Abstract)||LA739_0==External||(LA739_0>=Private && LA739_0<=Project)||LA739_0==Public||LA739_0==Static||LA739_0==Target||(LA739_0>=Async && LA739_0<=Await)||LA739_0==Union||LA739_0==This||LA739_0==From||LA739_0==This_1||(LA739_0>=Type && LA739_0<=Void)||LA739_0==FullStopFullStopFullStop||(LA739_0>=Get && LA739_0<=Let)||(LA739_0>=Out && LA739_0<=Set)||LA739_0==As||LA739_0==Of||(LA739_0>=QuestionMark && LA739_0<=LeftSquareBracket)||LA739_0==LeftCurlyBracket||LA739_0==Tilde||LA739_0==RULE_IDENTIFIER) ) {
                    alt739=1;
                }
                switch (alt739) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop738:
                        do {
                            int alt738=2;
                            int LA738_0 = input.LA(1);

                            if ( (LA738_0==Comma) ) {
                                alt738=1;
                            }


                            switch (alt738) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop738;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt740=2;
                int LA740_0 = input.LA(1);

                if ( (LA740_0==Colon) ) {
                    alt740=1;
                }
                switch (alt740) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred255_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred257_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_126); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Async,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt751=4;
        int LA751_0 = input.LA(1);

        if ( (LA751_0==LeftParenthesis) && (synpred258_InternalN4JSParser())) {
            alt751=1;
        }
        else if ( (LA751_0==Async) ) {
            int LA751_2 = input.LA(2);

            if ( (LA751_2==RULE_NO_LINE_TERMINATOR) && (synpred259_InternalN4JSParser())) {
                alt751=2;
            }
            else if ( (LA751_2==LeftParenthesis) && (synpred259_InternalN4JSParser())) {
                alt751=2;
            }
            else if ( (LA751_2==EqualsSignGreaterThanSign) ) {
                alt751=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 751, 2, input);

                throw nvae;
            }
        }
        else if ( (LA751_0==Asterisk) && (synpred260_InternalN4JSParser())) {
            alt751=3;
        }
        else if ( ((LA751_0>=Intersection && LA751_0<=Implements)||(LA751_0>=Promisify && LA751_0<=Abstract)||LA751_0==External||(LA751_0>=Private && LA751_0<=Project)||LA751_0==Public||LA751_0==Static||LA751_0==Target||LA751_0==Await||LA751_0==Union||LA751_0==This||LA751_0==From||LA751_0==Type||(LA751_0>=Get && LA751_0<=Let)||(LA751_0>=Out && LA751_0<=Set)||LA751_0==As||LA751_0==Of||LA751_0==RULE_IDENTIFIER) ) {
            alt751=4;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 751, 0, input);

            throw nvae;
        }
        switch (alt751) {
            case 1 :
                {
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }
                int alt743=2;
                int LA743_0 = input.LA(1);

                if ( ((LA743_0>=Intersection && LA743_0<=Implements)||(LA743_0>=Promisify && LA743_0<=Abstract)||LA743_0==External||(LA743_0>=Private && LA743_0<=Project)||LA743_0==Public||LA743_0==Static||LA743_0==Target||(LA743_0>=Async && LA743_0<=Await)||LA743_0==Union||LA743_0==This||LA743_0==From||LA743_0==This_1||(LA743_0>=Type && LA743_0<=Void)||LA743_0==FullStopFullStopFullStop||(LA743_0>=Get && LA743_0<=Let)||(LA743_0>=Out && LA743_0<=Set)||LA743_0==As||LA743_0==Of||(LA743_0>=QuestionMark && LA743_0<=LeftSquareBracket)||LA743_0==LeftCurlyBracket||LA743_0==Tilde||LA743_0==RULE_IDENTIFIER) ) {
                    alt743=1;
                }
                switch (alt743) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop742:
                        do {
                            int alt742=2;
                            int LA742_0 = input.LA(1);

                            if ( (LA742_0==Comma) ) {
                                alt742=1;
                            }


                            switch (alt742) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop742;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt744=2;
                int LA744_0 = input.LA(1);

                if ( (LA744_0==Colon) ) {
                    alt744=1;
                }
                switch (alt744) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt746=2;
                int LA746_0 = input.LA(1);

                if ( ((LA746_0>=Intersection && LA746_0<=Implements)||(LA746_0>=Promisify && LA746_0<=Abstract)||LA746_0==External||(LA746_0>=Private && LA746_0<=Project)||LA746_0==Public||LA746_0==Static||LA746_0==Target||(LA746_0>=Async && LA746_0<=Await)||LA746_0==Union||LA746_0==This||LA746_0==From||LA746_0==This_1||(LA746_0>=Type && LA746_0<=Void)||LA746_0==FullStopFullStopFullStop||(LA746_0>=Get && LA746_0<=Let)||(LA746_0>=Out && LA746_0<=Set)||LA746_0==As||LA746_0==Of||(LA746_0>=QuestionMark && LA746_0<=LeftSquareBracket)||LA746_0==LeftCurlyBracket||LA746_0==Tilde||LA746_0==RULE_IDENTIFIER) ) {
                    alt746=1;
                }
                switch (alt746) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop745:
                        do {
                            int alt745=2;
                            int LA745_0 = input.LA(1);

                            if ( (LA745_0==Comma) ) {
                                alt745=1;
                            }


                            switch (alt745) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop745;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt747=2;
                int LA747_0 = input.LA(1);

                if ( (LA747_0==Colon) ) {
                    alt747=1;
                }
                switch (alt747) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt749=2;
                int LA749_0 = input.LA(1);

                if ( ((LA749_0>=Intersection && LA749_0<=Implements)||(LA749_0>=Promisify && LA749_0<=Abstract)||LA749_0==External||(LA749_0>=Private && LA749_0<=Project)||LA749_0==Public||LA749_0==Static||LA749_0==Target||(LA749_0>=Async && LA749_0<=Await)||LA749_0==Union||LA749_0==This||LA749_0==From||LA749_0==This_1||(LA749_0>=Type && LA749_0<=Void)||LA749_0==FullStopFullStopFullStop||(LA749_0>=Get && LA749_0<=Let)||(LA749_0>=Out && LA749_0<=Set)||LA749_0==As||LA749_0==Of||(LA749_0>=QuestionMark && LA749_0<=LeftSquareBracket)||LA749_0==LeftCurlyBracket||LA749_0==Tilde||LA749_0==RULE_IDENTIFIER) ) {
                    alt749=1;
                }
                switch (alt749) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop748:
                        do {
                            int alt748=2;
                            int LA748_0 = input.LA(1);

                            if ( (LA748_0==Comma) ) {
                                alt748=1;
                            }


                            switch (alt748) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop748;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt750=2;
                int LA750_0 = input.LA(1);

                if ( (LA750_0==Colon) ) {
                    alt750=1;
                }
                switch (alt750) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 4 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred262_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred264_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred265_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||(input.LA(1)>=Asterisk && input.LA(1)<=PlusSign)||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred280_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred283_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop760:
        do {
            int alt760=2;
            int LA760_0 = input.LA(1);

            if ( ((LA760_0>=Protected && LA760_0<=Abstract)||LA760_0==External||(LA760_0>=Private && LA760_0<=Project)||LA760_0==Public||LA760_0==Static||LA760_0==Const) ) {
                alt760=1;
            }


            switch (alt760) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop760;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred284_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop761:
        do {
            int alt761=2;
            int LA761_0 = input.LA(1);

            if ( ((LA761_0>=Protected && LA761_0<=Abstract)||LA761_0==External||(LA761_0>=Private && LA761_0<=Project)||LA761_0==Public||LA761_0==Static||LA761_0==Const) ) {
                alt761=1;
            }


            switch (alt761) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop761;
            }
        } while (true);

        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred285_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop762:
        do {
            int alt762=2;
            alt762 = dfa762.predict(input);
            switch (alt762) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_143);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop762;
            }
        } while (true);
        int alt763=2;
        int LA763_0 = input.LA(1);

        if ( (LA763_0==LessThanSign) ) {
            alt763=1;
        }
        switch (alt763) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt764=2;
        alt764 = dfa764.predict(input);
        switch (alt764) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt765=2;
        int LA765_0 = input.LA(1);

        if ( (LA765_0==Asterisk) ) {
            alt765=1;
        }
        else if ( ((LA765_0>=Intersection && LA765_0<=With)||(LA765_0>=For && LA765_0<=Var)||(LA765_0>=As && LA765_0<=Of)||LA765_0==LeftSquareBracket||LA765_0==RULE_DOUBLE||LA765_0==RULE_HEX_INT||LA765_0==RULE_OCTAL_INT||LA765_0==RULE_SCIENTIFIC_INT||LA765_0==RULE_IDENTIFIER||LA765_0==RULE_STRING||LA765_0==RULE_INT) ) {
            alt765=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 765, 0, input);

            throw nvae;
        }
        switch (alt765) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred286_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop766:
        do {
            int alt766=2;
            int LA766_0 = input.LA(1);

            if ( ((LA766_0>=Protected && LA766_0<=Abstract)||LA766_0==External||(LA766_0>=Private && LA766_0<=Project)||LA766_0==Public||LA766_0==Static||LA766_0==Const) ) {
                alt766=1;
            }


            switch (alt766) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop766;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred287_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop767:
        do {
            int alt767=2;
            int LA767_0 = input.LA(1);

            if ( ((LA767_0>=Protected && LA767_0<=Abstract)||LA767_0==External||(LA767_0>=Private && LA767_0<=Project)||LA767_0==Public||LA767_0==Static||LA767_0==Const) ) {
                alt767=1;
            }


            switch (alt767) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop767;
            }
        } while (true);

        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop768:
        do {
            int alt768=2;
            alt768 = dfa768.predict(input);
            switch (alt768) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_143);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop768;
            }
        } while (true);
        int alt769=2;
        int LA769_0 = input.LA(1);

        if ( (LA769_0==LessThanSign) ) {
            alt769=1;
        }
        switch (alt769) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt770=2;
        alt770 = dfa770.predict(input);
        switch (alt770) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt771=2;
        int LA771_0 = input.LA(1);

        if ( (LA771_0==Asterisk) ) {
            alt771=1;
        }
        else if ( ((LA771_0>=Intersection && LA771_0<=With)||(LA771_0>=For && LA771_0<=Var)||(LA771_0>=As && LA771_0<=Of)||LA771_0==LeftSquareBracket||LA771_0==RULE_DOUBLE||LA771_0==RULE_HEX_INT||LA771_0==RULE_OCTAL_INT||LA771_0==RULE_SCIENTIFIC_INT||LA771_0==RULE_IDENTIFIER||LA771_0==RULE_STRING||LA771_0==RULE_INT) ) {
            alt771=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 771, 0, input);

            throw nvae;
        }
        switch (alt771) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop772:
        do {
            int alt772=2;
            int LA772_0 = input.LA(1);

            if ( ((LA772_0>=Protected && LA772_0<=Abstract)||LA772_0==External||(LA772_0>=Private && LA772_0<=Project)||LA772_0==Public||LA772_0==Static||LA772_0==Const) ) {
                alt772=1;
            }


            switch (alt772) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop772;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred291_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop773:
        do {
            int alt773=2;
            int LA773_0 = input.LA(1);

            if ( ((LA773_0>=Protected && LA773_0<=Abstract)||LA773_0==External||(LA773_0>=Private && LA773_0<=Project)||LA773_0==Public||LA773_0==Static||LA773_0==Const) ) {
                alt773=1;
            }


            switch (alt773) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop773;
            }
        } while (true);

        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred293_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop774:
        do {
            int alt774=2;
            alt774 = dfa774.predict(input);
            switch (alt774) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_143);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop774;
            }
        } while (true);
        int alt775=2;
        int LA775_0 = input.LA(1);

        if ( (LA775_0==LessThanSign) ) {
            alt775=1;
        }
        switch (alt775) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt776=2;
        alt776 = dfa776.predict(input);
        switch (alt776) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt777=2;
        int LA777_0 = input.LA(1);

        if ( (LA777_0==Asterisk) ) {
            alt777=1;
        }
        else if ( ((LA777_0>=Intersection && LA777_0<=With)||(LA777_0>=For && LA777_0<=Var)||(LA777_0>=As && LA777_0<=Of)||LA777_0==LeftSquareBracket||LA777_0==RULE_DOUBLE||LA777_0==RULE_HEX_INT||LA777_0==RULE_OCTAL_INT||LA777_0==RULE_SCIENTIFIC_INT||LA777_0==RULE_IDENTIFIER||LA777_0==RULE_STRING||LA777_0==RULE_INT) ) {
            alt777=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 777, 0, input);

            throw nvae;
        }
        switch (alt777) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred297_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop778:
        do {
            int alt778=2;
            int LA778_0 = input.LA(1);

            if ( ((LA778_0>=Protected && LA778_0<=Abstract)||LA778_0==External||(LA778_0>=Private && LA778_0<=Project)||LA778_0==Public||LA778_0==Static||LA778_0==Const) ) {
                alt778=1;
            }


            switch (alt778) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop778;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred298_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred299_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop779:
        do {
            int alt779=2;
            int LA779_0 = input.LA(1);

            if ( ((LA779_0>=Protected && LA779_0<=Abstract)||LA779_0==External||(LA779_0>=Private && LA779_0<=Project)||LA779_0==Public||LA779_0==Static||LA779_0==Const) ) {
                alt779=1;
            }


            switch (alt779) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_146);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop779;
            }
        } while (true);

        match(input,Set,FOLLOW_178); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred301_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop780:
        do {
            int alt780=2;
            alt780 = dfa780.predict(input);
            switch (alt780) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_143);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop780;
            }
        } while (true);
        int alt781=2;
        int LA781_0 = input.LA(1);

        if ( (LA781_0==LessThanSign) ) {
            alt781=1;
        }
        switch (alt781) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt782=2;
        alt782 = dfa782.predict(input);
        switch (alt782) {
            case 1 :
                {
                pushFollow(FOLLOW_94);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt783=2;
        int LA783_0 = input.LA(1);

        if ( (LA783_0==Asterisk) ) {
            alt783=1;
        }
        else if ( ((LA783_0>=Intersection && LA783_0<=With)||(LA783_0>=For && LA783_0<=Var)||(LA783_0>=As && LA783_0<=Of)||LA783_0==LeftSquareBracket||LA783_0==RULE_DOUBLE||LA783_0==RULE_HEX_INT||LA783_0==RULE_OCTAL_INT||LA783_0==RULE_SCIENTIFIC_INT||LA783_0==RULE_IDENTIFIER||LA783_0==RULE_STRING||LA783_0==RULE_INT) ) {
            alt783=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 783, 0, input);

            throw nvae;
        }
        switch (alt783) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_93); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_93);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred316_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred323_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred326_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_83);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_83);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred329_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred331_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred332_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred333_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_156); if (state.failed) return ;
        pushFollow(FOLLOW_66);
        ruleTAnonymousFormalParameterList();

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_51); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred334_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleUndefModifierToken();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred336_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred337_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred338_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred339_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred340_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_27); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred341_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_27); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred342_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt797=2;
        int LA797_0 = input.LA(1);

        if ( (LA797_0==LessThanSign) ) {
            alt797=1;
        }
        switch (alt797) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_16); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_17);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop796:
                do {
                    int alt796=2;
                    int LA796_0 = input.LA(1);

                    if ( (LA796_0==Comma) ) {
                        alt796=1;
                    }


                    switch (alt796) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_16); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_17);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop796;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_27); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_53);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred346_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred334_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA207 dfa207 = new DFA207(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA225 dfa225 = new DFA225(this);
    protected DFA217 dfa217 = new DFA217(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA247 dfa247 = new DFA247(this);
    protected DFA250 dfa250 = new DFA250(this);
    protected DFA249 dfa249 = new DFA249(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA252 dfa252 = new DFA252(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA261 dfa261 = new DFA261(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA274 dfa274 = new DFA274(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA275 dfa275 = new DFA275(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA285 dfa285 = new DFA285(this);
    protected DFA288 dfa288 = new DFA288(this);
    protected DFA292 dfa292 = new DFA292(this);
    protected DFA296 dfa296 = new DFA296(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA300 dfa300 = new DFA300(this);
    protected DFA301 dfa301 = new DFA301(this);
    protected DFA303 dfa303 = new DFA303(this);
    protected DFA321 dfa321 = new DFA321(this);
    protected DFA327 dfa327 = new DFA327(this);
    protected DFA340 dfa340 = new DFA340(this);
    protected DFA341 dfa341 = new DFA341(this);
    protected DFA344 dfa344 = new DFA344(this);
    protected DFA345 dfa345 = new DFA345(this);
    protected DFA346 dfa346 = new DFA346(this);
    protected DFA347 dfa347 = new DFA347(this);
    protected DFA379 dfa379 = new DFA379(this);
    protected DFA378 dfa378 = new DFA378(this);
    protected DFA381 dfa381 = new DFA381(this);
    protected DFA380 dfa380 = new DFA380(this);
    protected DFA383 dfa383 = new DFA383(this);
    protected DFA382 dfa382 = new DFA382(this);
    protected DFA385 dfa385 = new DFA385(this);
    protected DFA384 dfa384 = new DFA384(this);
    protected DFA386 dfa386 = new DFA386(this);
    protected DFA387 dfa387 = new DFA387(this);
    protected DFA388 dfa388 = new DFA388(this);
    protected DFA389 dfa389 = new DFA389(this);
    protected DFA420 dfa420 = new DFA420(this);
    protected DFA462 dfa462 = new DFA462(this);
    protected DFA463 dfa463 = new DFA463(this);
    protected DFA475 dfa475 = new DFA475(this);
    protected DFA465 dfa465 = new DFA465(this);
    protected DFA468 dfa468 = new DFA468(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA472 dfa472 = new DFA472(this);
    protected DFA487 dfa487 = new DFA487(this);
    protected DFA477 dfa477 = new DFA477(this);
    protected DFA480 dfa480 = new DFA480(this);
    protected DFA482 dfa482 = new DFA482(this);
    protected DFA484 dfa484 = new DFA484(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA489 dfa489 = new DFA489(this);
    protected DFA492 dfa492 = new DFA492(this);
    protected DFA493 dfa493 = new DFA493(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA498 dfa498 = new DFA498(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA503 dfa503 = new DFA503(this);
    protected DFA511 dfa511 = new DFA511(this);
    protected DFA513 dfa513 = new DFA513(this);
    protected DFA515 dfa515 = new DFA515(this);
    protected DFA518 dfa518 = new DFA518(this);
    protected DFA525 dfa525 = new DFA525(this);
    protected DFA528 dfa528 = new DFA528(this);
    protected DFA538 dfa538 = new DFA538(this);
    protected DFA544 dfa544 = new DFA544(this);
    protected DFA548 dfa548 = new DFA548(this);
    protected DFA549 dfa549 = new DFA549(this);
    protected DFA566 dfa566 = new DFA566(this);
    protected DFA570 dfa570 = new DFA570(this);
    protected DFA573 dfa573 = new DFA573(this);
    protected DFA584 dfa584 = new DFA584(this);
    protected DFA589 dfa589 = new DFA589(this);
    protected DFA591 dfa591 = new DFA591(this);
    protected DFA595 dfa595 = new DFA595(this);
    protected DFA688 dfa688 = new DFA688(this);
    protected DFA690 dfa690 = new DFA690(this);
    protected DFA692 dfa692 = new DFA692(this);
    protected DFA694 dfa694 = new DFA694(this);
    protected DFA696 dfa696 = new DFA696(this);
    protected DFA698 dfa698 = new DFA698(this);
    protected DFA700 dfa700 = new DFA700(this);
    protected DFA702 dfa702 = new DFA702(this);
    protected DFA762 dfa762 = new DFA762(this);
    protected DFA764 dfa764 = new DFA764(this);
    protected DFA768 dfa768 = new DFA768(this);
    protected DFA770 dfa770 = new DFA770(this);
    protected DFA774 dfa774 = new DFA774(this);
    protected DFA776 dfa776 = new DFA776(this);
    protected DFA780 dfa780 = new DFA780(this);
    protected DFA782 dfa782 = new DFA782(this);
    static final String dfa_1s = "\124\uffff";
    static final String dfa_2s = "\1\4\13\0\110\uffff";
    static final String dfa_3s = "\1\u0095\13\0\110\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\5\1\6\1\7\101\uffff\1\1\1\2\1\3";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\110\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\2\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "88:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);

                         
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}

                        else if ( (LA3_0==Import) ) {s = 13;}

                        else if ( (LA3_0==Export) ) {s = 14;}

                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||LA3_0==HyphenMinusHyphenMinus||LA3_0==SolidusEqualsSign||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||(LA3_0>=Asterisk && LA3_0<=PlusSign)||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);

                         
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);

                         
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);

                         
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);

                         
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);

                         
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);

                         
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 83;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\17\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_9s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_11s = "\1\10\2\uffff\1\4\1\6\1\0\1\2\1\5\1\7\1\1\1\3\4\uffff}>";
    static final String[] dfa_12s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "165:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_5==Enum) ) {s = 14;}

                        else if ( (LA16_5==Private) ) {s = 3;}

                        else if ( (LA16_5==Project) ) {s = 4;}

                        else if ( (LA16_5==Protected) ) {s = 5;}

                        else if ( (LA16_5==Public) ) {s = 6;}

                        else if ( (LA16_5==External) ) {s = 7;}

                        else if ( (LA16_5==Abstract) ) {s = 8;}

                        else if ( (LA16_5==Static) ) {s = 9;}

                        else if ( (LA16_5==Const) ) {s = 10;}

                        else if ( (LA16_5==Interface||LA16_5==Class) ) {s = 13;}

                        else if ( (LA16_5==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_5==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_9==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_9==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_9==Private) ) {s = 3;}

                        else if ( (LA16_9==Project) ) {s = 4;}

                        else if ( (LA16_9==Protected) ) {s = 5;}

                        else if ( (LA16_9==Public) ) {s = 6;}

                        else if ( (LA16_9==External) ) {s = 7;}

                        else if ( (LA16_9==Abstract) ) {s = 8;}

                        else if ( (LA16_9==Static) ) {s = 9;}

                        else if ( (LA16_9==Const) ) {s = 10;}

                        else if ( (LA16_9==Interface||LA16_9==Class) ) {s = 13;}

                        else if ( (LA16_9==Enum) ) {s = 14;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_6==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_6==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_6==Private) ) {s = 3;}

                        else if ( (LA16_6==Project) ) {s = 4;}

                        else if ( (LA16_6==Protected) ) {s = 5;}

                        else if ( (LA16_6==Public) ) {s = 6;}

                        else if ( (LA16_6==External) ) {s = 7;}

                        else if ( (LA16_6==Abstract) ) {s = 8;}

                        else if ( (LA16_6==Static) ) {s = 9;}

                        else if ( (LA16_6==Const) ) {s = 10;}

                        else if ( (LA16_6==Interface||LA16_6==Class) ) {s = 13;}

                        else if ( (LA16_6==Enum) ) {s = 14;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_10==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_10==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_10==Private) ) {s = 3;}

                        else if ( (LA16_10==Project) ) {s = 4;}

                        else if ( (LA16_10==Protected) ) {s = 5;}

                        else if ( (LA16_10==Public) ) {s = 6;}

                        else if ( (LA16_10==External) ) {s = 7;}

                        else if ( (LA16_10==Abstract) ) {s = 8;}

                        else if ( (LA16_10==Static) ) {s = 9;}

                        else if ( (LA16_10==Const) ) {s = 10;}

                        else if ( (LA16_10==Interface||LA16_10==Class) ) {s = 13;}

                        else if ( (LA16_10==Enum) ) {s = 14;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_3==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_3==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_3==Private) ) {s = 3;}

                        else if ( (LA16_3==Project) ) {s = 4;}

                        else if ( (LA16_3==Protected) ) {s = 5;}

                        else if ( (LA16_3==Public) ) {s = 6;}

                        else if ( (LA16_3==External) ) {s = 7;}

                        else if ( (LA16_3==Abstract) ) {s = 8;}

                        else if ( (LA16_3==Static) ) {s = 9;}

                        else if ( (LA16_3==Const) ) {s = 10;}

                        else if ( (LA16_3==Interface||LA16_3==Class) ) {s = 13;}

                        else if ( (LA16_3==Enum) ) {s = 14;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_7==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_7==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_7==Private) ) {s = 3;}

                        else if ( (LA16_7==Project) ) {s = 4;}

                        else if ( (LA16_7==Protected) ) {s = 5;}

                        else if ( (LA16_7==Public) ) {s = 6;}

                        else if ( (LA16_7==External) ) {s = 7;}

                        else if ( (LA16_7==Abstract) ) {s = 8;}

                        else if ( (LA16_7==Static) ) {s = 9;}

                        else if ( (LA16_7==Const) ) {s = 10;}

                        else if ( (LA16_7==Interface||LA16_7==Class) ) {s = 13;}

                        else if ( (LA16_7==Enum) ) {s = 14;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_4==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_4==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_4==Private) ) {s = 3;}

                        else if ( (LA16_4==Project) ) {s = 4;}

                        else if ( (LA16_4==Protected) ) {s = 5;}

                        else if ( (LA16_4==Public) ) {s = 6;}

                        else if ( (LA16_4==External) ) {s = 7;}

                        else if ( (LA16_4==Abstract) ) {s = 8;}

                        else if ( (LA16_4==Static) ) {s = 9;}

                        else if ( (LA16_4==Const) ) {s = 10;}

                        else if ( (LA16_4==Interface||LA16_4==Class) ) {s = 13;}

                        else if ( (LA16_4==Enum) ) {s = 14;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_8==Enum) ) {s = 14;}

                        else if ( (LA16_8==Private) ) {s = 3;}

                        else if ( (LA16_8==Project) ) {s = 4;}

                        else if ( (LA16_8==Protected) ) {s = 5;}

                        else if ( (LA16_8==Public) ) {s = 6;}

                        else if ( (LA16_8==External) ) {s = 7;}

                        else if ( (LA16_8==Abstract) ) {s = 8;}

                        else if ( (LA16_8==Static) ) {s = 9;}

                        else if ( (LA16_8==Const) ) {s = 10;}

                        else if ( (LA16_8==Interface||LA16_8==Class) ) {s = 13;}

                        else if ( (LA16_8==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_8==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_0 = input.LA(1);

                         
                        int index16_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA16_0>=10 && LA16_0<=35 && (s=T2S.M_1[LA16_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA16_0==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_0==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_0==Interface||LA16_0==Class) ) {s = 13;}

                        else if ( (LA16_0==Enum) ) {s = 14;}

                         
                        input.seek(index16_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "182:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_19s = "\102\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_21s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\60\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\61\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\2\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "315:2: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_0 = input.LA(1);

                         
                        int index19_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA19_0==CommercialAt) ) {s = 1;}

                        else if ( (LA19_0==Private) ) {s = 2;}

                        else if ( (LA19_0==Project) ) {s = 3;}

                        else if ( (LA19_0==Protected) ) {s = 4;}

                        else if ( (LA19_0==Public) ) {s = 5;}

                        else if ( (LA19_0==External) ) {s = 6;}

                        else if ( (LA19_0==Abstract) ) {s = 7;}

                        else if ( (LA19_0==Static) ) {s = 8;}

                        else if ( (LA19_0==Const) && (synpred9_InternalN4JSParser())) {s = 9;}

                        else if ( (LA19_0==Class) ) {s = 10;}

                        else if ( (LA19_0==Interface) ) {s = 11;}

                        else if ( (LA19_0==Enum) && (synpred9_InternalN4JSParser())) {s = 12;}

                        else if ( (LA19_0==Async) ) {s = 13;}

                        else if ( (LA19_0==Function) ) {s = 14;}

                        else if ( (LA19_0==Var) && (synpred9_InternalN4JSParser())) {s = 15;}

                        else if ( (LA19_0==Let) ) {s = 16;}

                        else if ( ((LA19_0>=Intersection && LA19_0<=Implements)||LA19_0==Promisify||LA19_0==Delete||(LA19_0>=Target && LA19_0<=Typeof)||LA19_0==Await||(LA19_0>=False && LA19_0<=Super)||LA19_0==Union||(LA19_0>=Yield && LA19_0<=This)||(LA19_0>=From && LA19_0<=Void)||LA19_0==Get||(LA19_0>=New && LA19_0<=Set)||LA19_0==PlusSignPlusSign||LA19_0==HyphenMinusHyphenMinus||LA19_0==SolidusEqualsSign||LA19_0==As||LA19_0==Of||LA19_0==ExclamationMark||LA19_0==LeftParenthesis||(LA19_0>=Asterisk && LA19_0<=PlusSign)||LA19_0==HyphenMinus||LA19_0==Solidus||LA19_0==LessThanSign||LA19_0==LeftSquareBracket||LA19_0==LeftCurlyBracket||LA19_0==Tilde||LA19_0==RULE_DOUBLE||(LA19_0>=RULE_HEX_INT && LA19_0<=RULE_LEGACY_OCTAL_INT)||LA19_0==RULE_SCIENTIFIC_INT||LA19_0==RULE_IDENTIFIER||LA19_0==RULE_STRING||(LA19_0>=RULE_TEMPLATE_HEAD && LA19_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA19_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index19_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_16 = input.LA(1);

                         
                        int index19_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\67\uffff";
    static final String dfa_26s = "\17\uffff\11\16\37\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\17\1\4\37\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_30s = "\1\7\1\uffff\1\11\1\3\1\5\1\20\1\1\1\12\1\13\1\14\5\uffff\1\2\1\15\1\6\1\16\1\10\1\0\1\17\1\uffff\1\4\37\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\3\16\1\uffff\1\16\1\27\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\26\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\2\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\56\1\uffff\1\53\1\57\1\61\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\60\1\36\3\uffff\1\62\1\uffff\1\41\1\uffff\1\46\1\uffff\1\55\1\54\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\63\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "428:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_20 = input.LA(1);

                         
                        int index25_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_20==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_20==Private) ) {s = 2;}

                        else if ( (LA25_20==Project) ) {s = 3;}

                        else if ( (LA25_20==Protected) ) {s = 4;}

                        else if ( (LA25_20==Public) ) {s = 5;}

                        else if ( (LA25_20==External) ) {s = 6;}

                        else if ( (LA25_20==Abstract) ) {s = 7;}

                        else if ( (LA25_20==Static) ) {s = 8;}

                        else if ( (LA25_20==Const) ) {s = 9;}

                        else if ( (LA25_20==EOF||LA25_20==Let||LA25_20==Var||LA25_20==Comma||(LA25_20>=Colon && LA25_20<=Semicolon)||LA25_20==EqualsSign||LA25_20==RightCurlyBracket||LA25_20==RULE_ML_COMMENT||LA25_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_20==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_20==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_20==Function||LA25_20==Async) ) {s = 13;}

                         
                        input.seek(index25_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_6==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_6==Private) ) {s = 2;}

                        else if ( (LA25_6==Project) ) {s = 3;}

                        else if ( (LA25_6==Protected) ) {s = 4;}

                        else if ( (LA25_6==Public) ) {s = 5;}

                        else if ( (LA25_6==External) ) {s = 6;}

                        else if ( (LA25_6==Abstract) ) {s = 7;}

                        else if ( (LA25_6==Static) ) {s = 8;}

                        else if ( (LA25_6==Const) ) {s = 9;}

                        else if ( (LA25_6==Let||LA25_6==Var) ) {s = 14;}

                        else if ( (LA25_6==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_6==Function||LA25_6==Async) ) {s = 13;}

                        else if ( (LA25_6==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_15==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_15==Private) ) {s = 2;}

                        else if ( (LA25_15==Project) ) {s = 3;}

                        else if ( (LA25_15==Protected) ) {s = 4;}

                        else if ( (LA25_15==Public) ) {s = 5;}

                        else if ( (LA25_15==External) ) {s = 6;}

                        else if ( (LA25_15==Abstract) ) {s = 7;}

                        else if ( (LA25_15==Static) ) {s = 8;}

                        else if ( (LA25_15==Const) ) {s = 9;}

                        else if ( (LA25_15==Function||LA25_15==Async) ) {s = 13;}

                        else if ( (LA25_15==EOF||LA25_15==Let||LA25_15==Var||LA25_15==Comma||(LA25_15>=Colon && LA25_15<=Semicolon)||LA25_15==EqualsSign||LA25_15==RightCurlyBracket||LA25_15==RULE_ML_COMMENT||LA25_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_15==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_15==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_3==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_3==Private) ) {s = 2;}

                        else if ( (LA25_3==Project) ) {s = 3;}

                        else if ( (LA25_3==Protected) ) {s = 4;}

                        else if ( (LA25_3==Public) ) {s = 5;}

                        else if ( (LA25_3==External) ) {s = 6;}

                        else if ( (LA25_3==Abstract) ) {s = 7;}

                        else if ( (LA25_3==Static) ) {s = 8;}

                        else if ( (LA25_3==Const) ) {s = 9;}

                        else if ( (LA25_3==Let||LA25_3==Var) ) {s = 14;}

                        else if ( (LA25_3==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_3==Function||LA25_3==Async) ) {s = 13;}

                        else if ( (LA25_3==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_23 = input.LA(1);

                         
                        int index25_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_23==EOF||LA25_23==Comma||(LA25_23>=Colon && LA25_23<=Semicolon)||LA25_23==EqualsSign||LA25_23==RightCurlyBracket||LA25_23==RULE_ML_COMMENT||LA25_23==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_23==Tilde) && (synpred12_InternalN4JSParser())) {s = 24;}

                        else if ( (LA25_23==RULE_IDENTIFIER) && (synpred12_InternalN4JSParser())) {s = 25;}

                        else if ( (LA25_23==Yield) && (synpred12_InternalN4JSParser())) {s = 26;}

                        else if ( (LA25_23==Get) && (synpred12_InternalN4JSParser())) {s = 27;}

                        else if ( (LA25_23==Set) && (synpred12_InternalN4JSParser())) {s = 28;}

                        else if ( (LA25_23==Let) && (synpred12_InternalN4JSParser())) {s = 29;}

                        else if ( (LA25_23==Project) && (synpred12_InternalN4JSParser())) {s = 30;}

                        else if ( (LA25_23==External) && (synpred12_InternalN4JSParser())) {s = 31;}

                        else if ( (LA25_23==Abstract) && (synpred12_InternalN4JSParser())) {s = 32;}

                        else if ( (LA25_23==Static) && (synpred12_InternalN4JSParser())) {s = 33;}

                        else if ( (LA25_23==As) && (synpred12_InternalN4JSParser())) {s = 34;}

                        else if ( (LA25_23==From) && (synpred12_InternalN4JSParser())) {s = 35;}

                        else if ( (LA25_23==Constructor) && (synpred12_InternalN4JSParser())) {s = 36;}

                        else if ( (LA25_23==Of) && (synpred12_InternalN4JSParser())) {s = 37;}

                        else if ( (LA25_23==Target) && (synpred12_InternalN4JSParser())) {s = 38;}

                        else if ( (LA25_23==Type) && (synpred12_InternalN4JSParser())) {s = 39;}

                        else if ( (LA25_23==Union) && (synpred12_InternalN4JSParser())) {s = 40;}

                        else if ( (LA25_23==Intersection) && (synpred12_InternalN4JSParser())) {s = 41;}

                        else if ( (LA25_23==This) && (synpred12_InternalN4JSParser())) {s = 42;}

                        else if ( (LA25_23==Promisify) && (synpred12_InternalN4JSParser())) {s = 43;}

                        else if ( (LA25_23==Await) && (synpred12_InternalN4JSParser())) {s = 44;}

                        else if ( (LA25_23==Async) && (synpred12_InternalN4JSParser())) {s = 45;}

                        else if ( (LA25_23==Implements) && (synpred12_InternalN4JSParser())) {s = 46;}

                        else if ( (LA25_23==Interface) && (synpred12_InternalN4JSParser())) {s = 47;}

                        else if ( (LA25_23==Private) && (synpred12_InternalN4JSParser())) {s = 48;}

                        else if ( (LA25_23==Protected) && (synpred12_InternalN4JSParser())) {s = 49;}

                        else if ( (LA25_23==Public) && (synpred12_InternalN4JSParser())) {s = 50;}

                        else if ( (LA25_23==Out) && (synpred12_InternalN4JSParser())) {s = 51;}

                        else if ( (LA25_23==LessThanSign) && (synpred12_InternalN4JSParser())) {s = 52;}

                        else if ( (LA25_23==Extends) && (synpred12_InternalN4JSParser())) {s = 53;}

                        else if ( (LA25_23==LeftCurlyBracket) && (synpred12_InternalN4JSParser())) {s = 54;}

                         
                        input.seek(index25_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_4==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_4==Private) ) {s = 2;}

                        else if ( (LA25_4==Project) ) {s = 3;}

                        else if ( (LA25_4==Protected) ) {s = 4;}

                        else if ( (LA25_4==Public) ) {s = 5;}

                        else if ( (LA25_4==External) ) {s = 6;}

                        else if ( (LA25_4==Abstract) ) {s = 7;}

                        else if ( (LA25_4==Static) ) {s = 8;}

                        else if ( (LA25_4==Const) ) {s = 9;}

                        else if ( (LA25_4==Function||LA25_4==Async) ) {s = 13;}

                        else if ( (LA25_4==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_4==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_4==Let||LA25_4==Var) ) {s = 14;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_17 = input.LA(1);

                         
                        int index25_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_17==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_17==Private) ) {s = 2;}

                        else if ( (LA25_17==Project) ) {s = 3;}

                        else if ( (LA25_17==Protected) ) {s = 4;}

                        else if ( (LA25_17==Public) ) {s = 5;}

                        else if ( (LA25_17==External) ) {s = 6;}

                        else if ( (LA25_17==Abstract) ) {s = 7;}

                        else if ( (LA25_17==Static) ) {s = 8;}

                        else if ( (LA25_17==Const) ) {s = 9;}

                        else if ( (LA25_17==Function||LA25_17==Async) ) {s = 13;}

                        else if ( (LA25_17==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_17==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_17==EOF||LA25_17==Let||LA25_17==Var||LA25_17==Comma||(LA25_17>=Colon && LA25_17<=Semicolon)||LA25_17==EqualsSign||LA25_17==RightCurlyBracket||LA25_17==RULE_ML_COMMENT||LA25_17==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index25_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA25_0 = input.LA(1);

                         
                        int index25_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_0==CommercialAt) && (synpred10_InternalN4JSParser())) {s = 1;}

                        else if ( (LA25_0==Private) ) {s = 2;}

                        else if ( (LA25_0==Project) ) {s = 3;}

                        else if ( (LA25_0==Protected) ) {s = 4;}

                        else if ( (LA25_0==Public) ) {s = 5;}

                        else if ( (LA25_0==External) ) {s = 6;}

                        else if ( (LA25_0==Abstract) ) {s = 7;}

                        else if ( (LA25_0==Static) ) {s = 8;}

                        else if ( (LA25_0==Const) ) {s = 9;}

                        else if ( (LA25_0==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_0==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_0==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_0==Function||LA25_0==Async) ) {s = 13;}

                        else if ( (LA25_0==Let||LA25_0==Var) ) {s = 14;}

                         
                        input.seek(index25_0);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA25_19 = input.LA(1);

                         
                        int index25_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_19==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_19==Private) ) {s = 2;}

                        else if ( (LA25_19==Project) ) {s = 3;}

                        else if ( (LA25_19==Protected) ) {s = 4;}

                        else if ( (LA25_19==Public) ) {s = 5;}

                        else if ( (LA25_19==External) ) {s = 6;}

                        else if ( (LA25_19==Abstract) ) {s = 7;}

                        else if ( (LA25_19==Static) ) {s = 8;}

                        else if ( (LA25_19==Const) ) {s = 9;}

                        else if ( (LA25_19==EOF||LA25_19==Let||LA25_19==Var||LA25_19==Comma||(LA25_19>=Colon && LA25_19<=Semicolon)||LA25_19==EqualsSign||LA25_19==RightCurlyBracket||LA25_19==RULE_ML_COMMENT||LA25_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_19==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_19==Function||LA25_19==Async) ) {s = 13;}

                        else if ( (LA25_19==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_2==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_2==Private) ) {s = 2;}

                        else if ( (LA25_2==Project) ) {s = 3;}

                        else if ( (LA25_2==Protected) ) {s = 4;}

                        else if ( (LA25_2==Public) ) {s = 5;}

                        else if ( (LA25_2==External) ) {s = 6;}

                        else if ( (LA25_2==Abstract) ) {s = 7;}

                        else if ( (LA25_2==Static) ) {s = 8;}

                        else if ( (LA25_2==Const) ) {s = 9;}

                        else if ( (LA25_2==Function||LA25_2==Async) ) {s = 13;}

                        else if ( (LA25_2==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_2==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_2==Let||LA25_2==Var) ) {s = 14;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_7==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_7==Private) ) {s = 2;}

                        else if ( (LA25_7==Project) ) {s = 3;}

                        else if ( (LA25_7==Protected) ) {s = 4;}

                        else if ( (LA25_7==Public) ) {s = 5;}

                        else if ( (LA25_7==External) ) {s = 6;}

                        else if ( (LA25_7==Abstract) ) {s = 7;}

                        else if ( (LA25_7==Static) ) {s = 8;}

                        else if ( (LA25_7==Const) ) {s = 9;}

                        else if ( (LA25_7==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_7==Let||LA25_7==Var) ) {s = 14;}

                        else if ( (LA25_7==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_7==Function||LA25_7==Async) ) {s = 13;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_8==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_8==Private) ) {s = 2;}

                        else if ( (LA25_8==Project) ) {s = 3;}

                        else if ( (LA25_8==Protected) ) {s = 4;}

                        else if ( (LA25_8==Public) ) {s = 5;}

                        else if ( (LA25_8==External) ) {s = 6;}

                        else if ( (LA25_8==Abstract) ) {s = 7;}

                        else if ( (LA25_8==Static) ) {s = 8;}

                        else if ( (LA25_8==Const) ) {s = 9;}

                        else if ( (LA25_8==Function||LA25_8==Async) ) {s = 13;}

                        else if ( (LA25_8==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_8==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_8==Let||LA25_8==Var) ) {s = 14;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_9==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_9==Private) ) {s = 15;}

                        else if ( (LA25_9==Project) ) {s = 16;}

                        else if ( (LA25_9==Protected) ) {s = 17;}

                        else if ( (LA25_9==Public) ) {s = 18;}

                        else if ( (LA25_9==External) ) {s = 19;}

                        else if ( (LA25_9==Abstract) ) {s = 20;}

                        else if ( (LA25_9==Static) ) {s = 21;}

                        else if ( (LA25_9==Const) ) {s = 9;}

                        else if ( ((LA25_9>=Intersection && LA25_9<=Implements)||LA25_9==Promisify||LA25_9==Target||LA25_9==Await||LA25_9==Union||(LA25_9>=Yield && LA25_9<=This)||LA25_9==From||LA25_9==Type||(LA25_9>=Get && LA25_9<=Let)||(LA25_9>=Out && LA25_9<=Set)||LA25_9==Var||LA25_9==As||LA25_9==Of||(LA25_9>=CommercialAt && LA25_9<=LeftSquareBracket)||LA25_9==LeftCurlyBracket||LA25_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA25_9==Async) ) {s = 22;}

                        else if ( (LA25_9==Interface) ) {s = 23;}

                        else if ( (LA25_9==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_9==Function) ) {s = 13;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA25_16 = input.LA(1);

                         
                        int index25_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_16==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_16==Private) ) {s = 2;}

                        else if ( (LA25_16==Project) ) {s = 3;}

                        else if ( (LA25_16==Protected) ) {s = 4;}

                        else if ( (LA25_16==Public) ) {s = 5;}

                        else if ( (LA25_16==External) ) {s = 6;}

                        else if ( (LA25_16==Abstract) ) {s = 7;}

                        else if ( (LA25_16==Static) ) {s = 8;}

                        else if ( (LA25_16==Const) ) {s = 9;}

                        else if ( (LA25_16==EOF||LA25_16==Let||LA25_16==Var||LA25_16==Comma||(LA25_16>=Colon && LA25_16<=Semicolon)||LA25_16==EqualsSign||LA25_16==RightCurlyBracket||LA25_16==RULE_ML_COMMENT||LA25_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_16==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_16==Function||LA25_16==Async) ) {s = 13;}

                        else if ( (LA25_16==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA25_18 = input.LA(1);

                         
                        int index25_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_18==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_18==Private) ) {s = 2;}

                        else if ( (LA25_18==Project) ) {s = 3;}

                        else if ( (LA25_18==Protected) ) {s = 4;}

                        else if ( (LA25_18==Public) ) {s = 5;}

                        else if ( (LA25_18==External) ) {s = 6;}

                        else if ( (LA25_18==Abstract) ) {s = 7;}

                        else if ( (LA25_18==Static) ) {s = 8;}

                        else if ( (LA25_18==Const) ) {s = 9;}

                        else if ( (LA25_18==Function||LA25_18==Async) ) {s = 13;}

                        else if ( (LA25_18==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_18==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_18==EOF||LA25_18==Let||LA25_18==Var||LA25_18==Comma||(LA25_18>=Colon && LA25_18<=Semicolon)||LA25_18==EqualsSign||LA25_18==RightCurlyBracket||LA25_18==RULE_ML_COMMENT||LA25_18==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index25_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA25_21 = input.LA(1);

                         
                        int index25_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_21==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_21==Private) ) {s = 2;}

                        else if ( (LA25_21==Project) ) {s = 3;}

                        else if ( (LA25_21==Protected) ) {s = 4;}

                        else if ( (LA25_21==Public) ) {s = 5;}

                        else if ( (LA25_21==External) ) {s = 6;}

                        else if ( (LA25_21==Abstract) ) {s = 7;}

                        else if ( (LA25_21==Static) ) {s = 8;}

                        else if ( (LA25_21==Const) ) {s = 9;}

                        else if ( (LA25_21==Function||LA25_21==Async) ) {s = 13;}

                        else if ( (LA25_21==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_21==EOF||LA25_21==Let||LA25_21==Var||LA25_21==Comma||(LA25_21>=Colon && LA25_21<=Semicolon)||LA25_21==EqualsSign||LA25_21==RightCurlyBracket||LA25_21==RULE_ML_COMMENT||LA25_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_21==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA25_5 = input.LA(1);

                         
                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_5==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_5==Private) ) {s = 2;}

                        else if ( (LA25_5==Project) ) {s = 3;}

                        else if ( (LA25_5==Protected) ) {s = 4;}

                        else if ( (LA25_5==Public) ) {s = 5;}

                        else if ( (LA25_5==External) ) {s = 6;}

                        else if ( (LA25_5==Abstract) ) {s = 7;}

                        else if ( (LA25_5==Static) ) {s = 8;}

                        else if ( (LA25_5==Const) ) {s = 9;}

                        else if ( (LA25_5==Function||LA25_5==Async) ) {s = 13;}

                        else if ( (LA25_5==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_5==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_5==Let||LA25_5==Var) ) {s = 14;}

                         
                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\1\17\7\11\1\4";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\15\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "503:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 510:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "529:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "696:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\135\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\7\4\uffff\1\134\125\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_56s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_57s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\125\1";
    static final String dfa_58s = "\1\4\1\3\1\2\2\uffff\1\1\1\uffff\1\0\125\uffff}>";
    static final String[] dfa_59s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\120\1\127\1\15\1\30\1\132\2\uffff\1\11\1\12\1\103\1\25\1\24\1\14\1\122\1\17\1\124\1\44\1\105\1\27\1\52\1\121\1\uffff\1\21\1\20\1\73\1\61\1\125\1\46\1\116\1\35\1\50\1\133\1\131\1\23\1\41\1\75\1\60\1\72\1\45\1\104\1\123\4\uffff\1\117\1\36\1\32\1\57\1\54\1\37\1\126\1\31\5\uffff\1\106\1\uffff\1\107\1\uffff\1\77\7\uffff\1\40\1\115\1\114\1\uffff\1\43\2\uffff\1\113\2\uffff\1\55\1\uffff\1\56\1\110\1\uffff\1\111\1\uffff\1\76\1\uffff\1\33\1\62\3\uffff\1\10\1\100\2\uffff\1\26\1\uffff\1\130\1\112\3\uffff\1\63\1\uffff\1\70\1\65\1\66\1\67\1\uffff\1\71\1\uffff\1\34\2\uffff\1\74\11\uffff\1\102\1\101\10\uffff\1\64",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "813:4: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_7 = input.LA(1);

                         
                        int index51_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_7==EOF) && (synpred17_InternalN4JSParser())) {s = 92;}

                         
                        input.seek(index51_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_5 = input.LA(1);

                         
                        int index51_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalN4JSParser()) ) {s = 91;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index51_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_2 = input.LA(1);

                         
                        int index51_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_2==EOF) ) {s = 7;}

                        
                        else if ((LA51_2>=-1 && LA51_2<=149 && (s=T2S.M_2[LA51_2-(-1)])>=0) && (synpred17_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index51_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_1 = input.LA(1);

                         
                        int index51_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index51_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_0 = input.LA(1);

                         
                        int index51_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_0==Semicolon) ) {s = 1;}

                        else if ( (LA51_0==EOF) ) {s = 2;}

                        else if ( (LA51_0==RULE_EOL) && (synpred17_InternalN4JSParser())) {s = 3;}

                        else if ( (LA51_0==RULE_ML_COMMENT) && (synpred17_InternalN4JSParser())) {s = 4;}

                        else if ( (LA51_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA51_0>=Intersection && LA51_0<=Implements)||(LA51_0>=Promisify && LA51_0<=Default)||(LA51_0>=Private && LA51_0<=Break)||(LA51_0>=Class && LA51_0<=With)||(LA51_0>=For && LA51_0<=Var)||LA51_0==PlusSignPlusSign||LA51_0==HyphenMinusHyphenMinus||LA51_0==SolidusEqualsSign||(LA51_0>=As && LA51_0<=If)||LA51_0==Of||LA51_0==ExclamationMark||LA51_0==LeftParenthesis||(LA51_0>=Asterisk && LA51_0<=PlusSign)||LA51_0==HyphenMinus||LA51_0==Solidus||LA51_0==LessThanSign||(LA51_0>=CommercialAt && LA51_0<=LeftSquareBracket)||LA51_0==LeftCurlyBracket||LA51_0==Tilde||LA51_0==RULE_DOUBLE||(LA51_0>=RULE_HEX_INT && LA51_0<=RULE_LEGACY_OCTAL_INT)||LA51_0==RULE_SCIENTIFIC_INT||LA51_0==RULE_IDENTIFIER||LA51_0==RULE_STRING||(LA51_0>=RULE_TEMPLATE_HEAD && LA51_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA51_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index51_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\131\uffff";
    static final String dfa_61s = "\1\2\130\uffff";
    static final String dfa_62s = "\1\4\1\0\127\uffff";
    static final String dfa_63s = "\1\u0099\1\0\127\uffff";
    static final String dfa_64s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1048:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_InternalN4JSParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1065:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\100\uffff";
    static final String dfa_68s = "\1\4\1\0\76\uffff";
    static final String dfa_69s = "\1\u0095\1\0\76\uffff";
    static final String dfa_70s = "\2\uffff\1\2\74\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1410:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm2_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1583:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm3_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_1 = input.LA(1);

                         
                        int index95_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1756:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm2_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1929:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm3_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\44\uffff";
    static final String dfa_74s = "\1\4\1\0\42\uffff";
    static final String dfa_75s = "\1\176\1\0\42\uffff";
    static final String dfa_76s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_77s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_78s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "2290:2: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= ruleBindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= ruleBindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_0 = input.LA(1);

                         
                        int index135_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA135_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA135_0==LeftSquareBracket) && (synpred65_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA135_0>=Intersection && LA135_0<=Implements)||(LA135_0>=Promisify && LA135_0<=Abstract)||LA135_0==External||(LA135_0>=Private && LA135_0<=Project)||LA135_0==Public||LA135_0==Static||LA135_0==Target||(LA135_0>=Async && LA135_0<=Await)||LA135_0==Union||(LA135_0>=Yield && LA135_0<=This)||LA135_0==From||LA135_0==This_1||(LA135_0>=Type && LA135_0<=Void)||LA135_0==FullStopFullStopFullStop||(LA135_0>=Get && LA135_0<=Let)||(LA135_0>=Out && LA135_0<=Set)||LA135_0==As||LA135_0==Of||(LA135_0>=QuestionMark && LA135_0<=CommercialAt)||LA135_0==Tilde||LA135_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index135_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\2\uffff\11\13\1\uffff";
    static final String dfa_80s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_81s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_82s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_83s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "2303:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_84s = "\43\uffff";
    static final String dfa_85s = "\1\4\1\0\41\uffff";
    static final String dfa_86s = "\1\176\1\0\41\uffff";
    static final String dfa_87s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_88s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_89s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2332:2: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= norm1_BindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= norm1_BindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_0 = input.LA(1);

                         
                        int index141_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA141_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA141_0==LeftSquareBracket) && (synpred66_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA141_0>=Intersection && LA141_0<=Implements)||(LA141_0>=Promisify && LA141_0<=Abstract)||LA141_0==External||(LA141_0>=Private && LA141_0<=Project)||LA141_0==Public||LA141_0==Static||LA141_0==Target||(LA141_0>=Async && LA141_0<=Await)||LA141_0==Union||LA141_0==This||LA141_0==From||LA141_0==This_1||(LA141_0>=Type && LA141_0<=Void)||LA141_0==FullStopFullStopFullStop||(LA141_0>=Get && LA141_0<=Let)||(LA141_0>=Out && LA141_0<=Set)||LA141_0==As||LA141_0==Of||(LA141_0>=QuestionMark && LA141_0<=CommercialAt)||LA141_0==Tilde||LA141_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index141_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_90s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "2345:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_91s = "\121\uffff";
    static final String dfa_92s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_93s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_94s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_95s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\60\uffff}>";
    static final String[] dfa_96s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\110\1\10\1\112\1\27\1\41\1\12\1\35\1\107\1\uffff\1\41\1\11\2\41\1\113\1\31\1\103\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\111\4\uffff\1\103\1\21\1\15\1\41\1\40\1\22\1\114\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\103\1\102\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\1\uffff\2\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "2457:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_0 = input.LA(1);

                         
                        int index145_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA145_0>=10 && LA145_0<=110 && (s=T2S.M_3[LA145_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA145_0==Var) && (synpred71_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA145_0>=4 && LA145_0<=126 && (s=T2S.M_4[LA145_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA145_0==Delete||LA145_0==Typeof||LA145_0==Class||(LA145_0>=False && LA145_0<=Super)||(LA145_0>=Null && LA145_0<=True)||LA145_0==Void||LA145_0==New||LA145_0==PlusSignPlusSign||LA145_0==HyphenMinusHyphenMinus||LA145_0==SolidusEqualsSign||LA145_0==ExclamationMark||LA145_0==LeftParenthesis||(LA145_0>=Asterisk && LA145_0<=PlusSign)||LA145_0==HyphenMinus||LA145_0==Solidus||LA145_0==LessThanSign||(LA145_0>=CommercialAt && LA145_0<=LeftSquareBracket)||LA145_0==Tilde||LA145_0==RULE_DOUBLE||(LA145_0>=RULE_HEX_INT && LA145_0<=RULE_LEGACY_OCTAL_INT)||LA145_0==RULE_SCIENTIFIC_INT||LA145_0==RULE_STRING||(LA145_0>=RULE_TEMPLATE_HEAD && LA145_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA145_0==RULE_INT) ) {s = 33;}

                        else if ( (LA145_0==If) ) {s = 66;}

                        else if ( (LA145_0==While||LA145_0==For||LA145_0==Do) ) {s = 67;}

                        else if ( (LA145_0==Continue) ) {s = 70;}

                        else if ( (LA145_0==Break) ) {s = 71;}

                        else if ( (LA145_0==Return) ) {s = 72;}

                        else if ( (LA145_0==With) ) {s = 73;}

                        else if ( (LA145_0==Switch) ) {s = 74;}

                        else if ( (LA145_0==Throw) ) {s = 75;}

                        else if ( (LA145_0==Try) ) {s = 76;}

                        else if ( (LA145_0==Debugger) ) {s = 77;}

                         
                        input.seek(index145_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA145_2 = input.LA(1);

                         
                        int index145_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA145_3 = input.LA(1);

                         
                        int index145_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA145_4 = input.LA(1);

                         
                        int index145_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA145_5 = input.LA(1);

                         
                        int index145_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA145_6 = input.LA(1);

                         
                        int index145_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA145_7 = input.LA(1);

                         
                        int index145_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA145_8 = input.LA(1);

                         
                        int index145_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA145_9 = input.LA(1);

                         
                        int index145_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index145_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA145_10 = input.LA(1);

                         
                        int index145_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA145_11 = input.LA(1);

                         
                        int index145_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA145_13 = input.LA(1);

                         
                        int index145_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA145_15 = input.LA(1);

                         
                        int index145_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA145_16 = input.LA(1);

                         
                        int index145_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA145_17 = input.LA(1);

                         
                        int index145_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA145_18 = input.LA(1);

                         
                        int index145_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA145_19 = input.LA(1);

                         
                        int index145_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA145_20 = input.LA(1);

                         
                        int index145_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA145_21 = input.LA(1);

                         
                        int index145_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA145_22 = input.LA(1);

                         
                        int index145_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA145_23 = input.LA(1);

                         
                        int index145_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA145_24 = input.LA(1);

                         
                        int index145_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA145_25 = input.LA(1);

                         
                        int index145_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA145_26 = input.LA(1);

                         
                        int index145_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA145_27 = input.LA(1);

                         
                        int index145_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA145_28 = input.LA(1);

                         
                        int index145_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA145_29 = input.LA(1);

                         
                        int index145_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA145_30 = input.LA(1);

                         
                        int index145_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA145_31 = input.LA(1);

                         
                        int index145_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA145_32 = input.LA(1);

                         
                        int index145_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index145_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_97s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_98s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_99s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_100s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\61\uffff}>";
    static final String[] dfa_101s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\110\1\10\1\112\1\26\1\40\1\12\1\34\1\107\1\uffff\1\40\1\11\2\40\1\113\1\30\1\103\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\111\4\uffff\1\103\1\20\1\15\1\40\1\37\1\21\1\114\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\103\1\102\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\1\uffff\2\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "2515:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA146_0>=10 && LA146_0<=110 && (s=T2S.M_3[LA146_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA146_0==Var) && (synpred75_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA146_0>=4 && LA146_0<=126 && (s=T2S.M_6[LA146_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA146_0==Delete||LA146_0==Typeof||LA146_0==Class||(LA146_0>=False && LA146_0<=Super)||LA146_0==Yield||(LA146_0>=Null && LA146_0<=True)||LA146_0==Void||LA146_0==New||LA146_0==PlusSignPlusSign||LA146_0==HyphenMinusHyphenMinus||LA146_0==SolidusEqualsSign||LA146_0==ExclamationMark||LA146_0==LeftParenthesis||(LA146_0>=Asterisk && LA146_0<=PlusSign)||LA146_0==HyphenMinus||LA146_0==Solidus||LA146_0==LessThanSign||(LA146_0>=CommercialAt && LA146_0<=LeftSquareBracket)||LA146_0==Tilde||LA146_0==RULE_DOUBLE||(LA146_0>=RULE_HEX_INT && LA146_0<=RULE_LEGACY_OCTAL_INT)||LA146_0==RULE_SCIENTIFIC_INT||LA146_0==RULE_STRING||(LA146_0>=RULE_TEMPLATE_HEAD && LA146_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA146_0==RULE_INT) ) {s = 32;}

                        else if ( (LA146_0==If) ) {s = 66;}

                        else if ( (LA146_0==While||LA146_0==For||LA146_0==Do) ) {s = 67;}

                        else if ( (LA146_0==Continue) ) {s = 70;}

                        else if ( (LA146_0==Break) ) {s = 71;}

                        else if ( (LA146_0==Return) ) {s = 72;}

                        else if ( (LA146_0==With) ) {s = 73;}

                        else if ( (LA146_0==Switch) ) {s = 74;}

                        else if ( (LA146_0==Throw) ) {s = 75;}

                        else if ( (LA146_0==Try) ) {s = 76;}

                        else if ( (LA146_0==Debugger) ) {s = 77;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_7 = input.LA(1);

                         
                        int index146_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_8 = input.LA(1);

                         
                        int index146_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_9 = input.LA(1);

                         
                        int index146_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred75_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index146_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_11 = input.LA(1);

                         
                        int index146_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_13 = input.LA(1);

                         
                        int index146_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_15 = input.LA(1);

                         
                        int index146_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_16 = input.LA(1);

                         
                        int index146_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_19 = input.LA(1);

                         
                        int index146_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_20 = input.LA(1);

                         
                        int index146_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA146_21 = input.LA(1);

                         
                        int index146_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA146_23 = input.LA(1);

                         
                        int index146_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA146_24 = input.LA(1);

                         
                        int index146_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA146_25 = input.LA(1);

                         
                        int index146_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA146_26 = input.LA(1);

                         
                        int index146_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA146_27 = input.LA(1);

                         
                        int index146_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA146_28 = input.LA(1);

                         
                        int index146_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA146_29 = input.LA(1);

                         
                        int index146_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA146_30 = input.LA(1);

                         
                        int index146_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA146_31 = input.LA(1);

                         
                        int index146_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index146_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\117\uffff";
    static final String dfa_103s = "\1\4\1\0\115\uffff";
    static final String dfa_104s = "\1\u0095\1\0\115\uffff";
    static final String dfa_105s = "\2\uffff\1\2\113\uffff\1\1";
    static final String dfa_106s = "\1\uffff\1\0\115\uffff}>";
    static final String[] dfa_107s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "2579:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_1 = input.LA(1);

                         
                        int index147_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index147_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "2599:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 2689:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_108s = "\35\uffff";
    static final String dfa_109s = "\1\4\34\uffff";
    static final String dfa_110s = "\1\176\34\uffff";
    static final String dfa_111s = "\1\uffff\33\2\1\1";
    static final String dfa_112s = "\1\0\34\uffff}>";
    static final String[] dfa_113s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[][] dfa_113 = unpackEncodedStringArray(dfa_113s);

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 3131:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_0 = input.LA(1);

                         
                        int index163_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA163_0>=4 && LA163_0<=126 && (s=T2S.M_7[LA163_0-(4)])>=0) && (synpred95_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA163_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index163_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 3160:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_0 = input.LA(1);

                         
                        int index165_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA165_0>=4 && LA165_0<=126 && (s=T2S.M_7[LA165_0-(4)])>=0) && (synpred96_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA165_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index165_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_114s = "\34\uffff";
    static final String dfa_115s = "\1\4\33\uffff";
    static final String dfa_116s = "\1\176\33\uffff";
    static final String dfa_117s = "\1\uffff\32\2\1\1";
    static final String dfa_118s = "\1\0\33\uffff}>";
    static final String[] dfa_119s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[][] dfa_119 = unpackEncodedStringArray(dfa_119s);

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 3189:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_0 = input.LA(1);

                         
                        int index167_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA167_0>=4 && LA167_0<=126 && (s=T2S.M_9[LA167_0-(4)])>=0) && (synpred97_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA167_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index167_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 3218:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_0 = input.LA(1);

                         
                        int index169_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA169_0>=4 && LA169_0<=126 && (s=T2S.M_9[LA169_0-(4)])>=0) && (synpred98_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA169_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index169_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 3247:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_0 = input.LA(1);

                         
                        int index171_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA171_0>=4 && LA171_0<=126 && (s=T2S.M_7[LA171_0-(4)])>=0) && (synpred99_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA171_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index171_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 3277:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA174_0 = input.LA(1);

                         
                        int index174_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA174_0>=4 && LA174_0<=126 && (s=T2S.M_7[LA174_0-(4)])>=0) && (synpred100_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA174_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index174_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 3307:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_0 = input.LA(1);

                         
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA177_0>=4 && LA177_0<=126 && (s=T2S.M_9[LA177_0-(4)])>=0) && (synpred101_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA177_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 3337:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA180_0 = input.LA(1);

                         
                        int index180_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA180_0>=4 && LA180_0<=126 && (s=T2S.M_9[LA180_0-(4)])>=0) && (synpred102_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA180_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index180_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_120s = "\1\4\1\0\1\3\2\uffff\1\1\1\uffff\1\2\125\uffff}>";
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_120;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "3680:157: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_1 = input.LA(1);

                         
                        int index189_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index189_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA189_5 = input.LA(1);

                         
                        int index189_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 91;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index189_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA189_7 = input.LA(1);

                         
                        int index189_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA189_7==EOF) && (synpred109_InternalN4JSParser())) {s = 92;}

                         
                        input.seek(index189_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA189_2 = input.LA(1);

                         
                        int index189_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA189_2==EOF) ) {s = 7;}

                        
                        else if ((LA189_2>=-1 && LA189_2<=149 && (s=T2S.M_2[LA189_2-(-1)])>=0) && (synpred109_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index189_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA189_0 = input.LA(1);

                         
                        int index189_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA189_0==Semicolon) ) {s = 1;}

                        else if ( (LA189_0==EOF) ) {s = 2;}

                        else if ( (LA189_0==RULE_EOL) && (synpred109_InternalN4JSParser())) {s = 3;}

                        else if ( (LA189_0==RULE_ML_COMMENT) && (synpred109_InternalN4JSParser())) {s = 4;}

                        else if ( (LA189_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA189_0>=Intersection && LA189_0<=Implements)||(LA189_0>=Promisify && LA189_0<=Default)||(LA189_0>=Private && LA189_0<=Break)||(LA189_0>=Class && LA189_0<=With)||(LA189_0>=For && LA189_0<=Var)||LA189_0==PlusSignPlusSign||LA189_0==HyphenMinusHyphenMinus||LA189_0==SolidusEqualsSign||(LA189_0>=As && LA189_0<=If)||LA189_0==Of||LA189_0==ExclamationMark||LA189_0==LeftParenthesis||(LA189_0>=Asterisk && LA189_0<=PlusSign)||LA189_0==HyphenMinus||LA189_0==Solidus||LA189_0==LessThanSign||(LA189_0>=CommercialAt && LA189_0<=LeftSquareBracket)||LA189_0==LeftCurlyBracket||LA189_0==Tilde||LA189_0==RULE_DOUBLE||(LA189_0>=RULE_HEX_INT && LA189_0<=RULE_LEGACY_OCTAL_INT)||LA189_0==RULE_SCIENTIFIC_INT||LA189_0==RULE_IDENTIFIER||LA189_0==RULE_STRING||(LA189_0>=RULE_TEMPLATE_HEAD && LA189_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA189_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index189_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\103\uffff";
    static final String dfa_122s = "\1\4\1\0\101\uffff";
    static final String dfa_123s = "\1\u0095\1\0\101\uffff";
    static final String dfa_124s = "\2\uffff\1\2\77\uffff\1\1";
    static final String dfa_125s = "\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_126s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_121 = DFA.unpackEncodedString(dfa_121s);
    static final char[] dfa_122 = DFA.unpackEncodedStringToUnsignedChars(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[][] dfa_126 = unpackEncodedStringArray(dfa_126s);

    class DFA208 extends DFA {

        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = dfa_121;
            this.eof = dfa_121;
            this.min = dfa_122;
            this.max = dfa_123;
            this.accept = dfa_124;
            this.special = dfa_125;
            this.transition = dfa_126;
        }
        public String getDescription() {
            return "3778:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA208_1 = input.LA(1);

                         
                        int index208_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSParser()) ) {s = 66;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index208_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 208, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_127s = "\1\4\2\uffff\1\0\76\uffff";
    static final String dfa_128s = "\1\u0095\2\uffff\1\0\76\uffff";
    static final String dfa_129s = "\1\uffff\2\1\1\uffff\1\2\74\uffff\1\3";
    static final String dfa_130s = "\1\0\2\uffff\1\1\76\uffff}>";
    static final String[] dfa_131s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\101\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[][] dfa_131 = unpackEncodedStringArray(dfa_131s);

    class DFA207 extends DFA {

        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "3809:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA207_0 = input.LA(1);

                         
                        int index207_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_0==Var) && (synpred112_InternalN4JSParser())) {s = 1;}

                        else if ( (LA207_0==Const) && (synpred112_InternalN4JSParser())) {s = 2;}

                        else if ( (LA207_0==Let) ) {s = 3;}

                        else if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||(LA207_0>=External && LA207_0<=Function)||(LA207_0>=Private && LA207_0<=Delete)||LA207_0==Public||LA207_0==Static||(LA207_0>=Target && LA207_0<=Await)||LA207_0==Class||(LA207_0>=False && LA207_0<=Super)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||(LA207_0>=From && LA207_0<=Void)||LA207_0==Get||(LA207_0>=New && LA207_0<=Set)||LA207_0==PlusSignPlusSign||LA207_0==HyphenMinusHyphenMinus||LA207_0==SolidusEqualsSign||LA207_0==As||LA207_0==Of||LA207_0==ExclamationMark||LA207_0==LeftParenthesis||(LA207_0>=Asterisk && LA207_0<=PlusSign)||LA207_0==HyphenMinus||LA207_0==Solidus||LA207_0==LessThanSign||(LA207_0>=CommercialAt && LA207_0<=LeftSquareBracket)||LA207_0==LeftCurlyBracket||LA207_0==Tilde||LA207_0==RULE_DOUBLE||(LA207_0>=RULE_HEX_INT && LA207_0<=RULE_LEGACY_OCTAL_INT)||LA207_0==RULE_SCIENTIFIC_INT||LA207_0==RULE_IDENTIFIER||LA207_0==RULE_STRING||(LA207_0>=RULE_TEMPLATE_HEAD && LA207_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA207_0==RULE_INT) ) {s = 4;}

                        else if ( (LA207_0==Semicolon) ) {s = 65;}

                         
                        input.seek(index207_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA207_3 = input.LA(1);

                         
                        int index207_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index207_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 207, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_132s = "\40\uffff";
    static final String dfa_133s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_134s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_135s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_136s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_137s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[][] dfa_137 = unpackEncodedStringArray(dfa_137s);

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = dfa_132;
            this.eof = dfa_132;
            this.min = dfa_133;
            this.max = dfa_134;
            this.accept = dfa_135;
            this.special = dfa_136;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "3816:2: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA199_30 = input.LA(1);

                         
                        int index199_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index199_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA199_29 = input.LA(1);

                         
                        int index199_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index199_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 199, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_138s = "\1\4\77\uffff";
    static final String dfa_139s = "\1\u0095\77\uffff";
    static final String dfa_140s = "\1\uffff\76\1\1\2";
    static final String dfa_141s = "\1\0\77\uffff}>";
    static final String[] dfa_142s = {
            "\1\26\1\21\1\31\1\uffff\1\30\1\32\1\34\1\15\2\uffff\1\14\1\62\3\uffff\1\33\1\13\1\66\2\uffff\1\35\1\uffff\1\16\1\uffff\1\23\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\1\55\1\40\1\52\1\24\1\67\6\uffff\1\10\1\12\1\37\1\36\1\11\7\uffff\1\71\1\uffff\1\72\1\uffff\1\57\7\uffff\1\17\3\uffff\1\22\2\uffff\1\76\2\uffff\1\3\1\77\1\5\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\42\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "3962:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_0 = input.LA(1);

                         
                        int index192_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA192_0>=4 && LA192_0<=149 && (s=T2S.M_16[LA192_0-(4)])>=0) && (synpred114_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA192_0==RightParenthesis) ) {s = 63;}

                         
                        input.seek(index192_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = dfa_121;
            this.eof = dfa_121;
            this.min = dfa_122;
            this.max = dfa_123;
            this.accept = dfa_124;
            this.special = dfa_125;
            this.transition = dfa_126;
        }
        public String getDescription() {
            return "4126:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA226_1 = input.LA(1);

                         
                        int index226_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSParser()) ) {s = 66;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index226_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 226, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA225 extends DFA {

        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "4157:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA225_0 = input.LA(1);

                         
                        int index225_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_0==Var) && (synpred116_InternalN4JSParser())) {s = 1;}

                        else if ( (LA225_0==Const) && (synpred116_InternalN4JSParser())) {s = 2;}

                        else if ( (LA225_0==Let) ) {s = 3;}

                        else if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||(LA225_0>=External && LA225_0<=Function)||(LA225_0>=Private && LA225_0<=Delete)||LA225_0==Public||LA225_0==Static||(LA225_0>=Target && LA225_0<=Await)||LA225_0==Class||(LA225_0>=False && LA225_0<=Super)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||(LA225_0>=From && LA225_0<=Void)||LA225_0==Get||(LA225_0>=New && LA225_0<=Set)||LA225_0==PlusSignPlusSign||LA225_0==HyphenMinusHyphenMinus||LA225_0==SolidusEqualsSign||LA225_0==As||LA225_0==Of||LA225_0==ExclamationMark||LA225_0==LeftParenthesis||(LA225_0>=Asterisk && LA225_0<=PlusSign)||LA225_0==HyphenMinus||LA225_0==Solidus||LA225_0==LessThanSign||(LA225_0>=CommercialAt && LA225_0<=LeftSquareBracket)||LA225_0==LeftCurlyBracket||LA225_0==Tilde||LA225_0==RULE_DOUBLE||(LA225_0>=RULE_HEX_INT && LA225_0<=RULE_LEGACY_OCTAL_INT)||LA225_0==RULE_SCIENTIFIC_INT||LA225_0==RULE_IDENTIFIER||LA225_0==RULE_STRING||(LA225_0>=RULE_TEMPLATE_HEAD && LA225_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA225_0==RULE_INT) ) {s = 4;}

                        else if ( (LA225_0==Semicolon) ) {s = 65;}

                         
                        input.seek(index225_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA225_3 = input.LA(1);

                         
                        int index225_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index225_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 225, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\37\uffff";
    static final String dfa_144s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_145s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_146s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_147s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_148s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final char[] dfa_144 = DFA.unpackEncodedStringToUnsignedChars(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final short[] dfa_146 = DFA.unpackEncodedString(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[][] dfa_148 = unpackEncodedStringArray(dfa_148s);

    class DFA217 extends DFA {

        public DFA217(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 217;
            this.eot = dfa_143;
            this.eof = dfa_143;
            this.min = dfa_144;
            this.max = dfa_145;
            this.accept = dfa_146;
            this.special = dfa_147;
            this.transition = dfa_148;
        }
        public String getDescription() {
            return "4164:2: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA217_29 = input.LA(1);

                         
                        int index217_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index217_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA217_28 = input.LA(1);

                         
                        int index217_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index217_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 217, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_149s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\1\55\1\40\1\52\1\23\1\67\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\71\1\uffff\1\72\1\uffff\1\57\7\uffff\1\16\3\uffff\1\21\2\uffff\1\76\2\uffff\1\3\1\77\1\5\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\42\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "4310:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA210_0 = input.LA(1);

                         
                        int index210_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA210_0>=4 && LA210_0<=149 && (s=T2S.M_17[LA210_0-(4)])>=0) && (synpred118_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA210_0==RightParenthesis) ) {s = 63;}

                         
                        input.seek(index210_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 210, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_150s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_151s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_152s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_153s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_154s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\22\uffff\1\36\1\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_150 = DFA.unpackEncodedStringToUnsignedChars(dfa_150s);
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final short[] dfa_152 = DFA.unpackEncodedString(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[][] dfa_154 = unpackEncodedStringArray(dfa_154s);

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_150;
            this.max = dfa_151;
            this.accept = dfa_152;
            this.special = dfa_153;
            this.transition = dfa_154;
        }
        public String getDescription() {
            return "5132:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA248_0 = input.LA(1);

                         
                        int index248_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA248_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA248_0==LeftSquareBracket) && (synpred125_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA248_0>=4 && LA248_0<=126 && (s=T2S.M_18[LA248_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA248_0==This_1||LA248_0==Void||LA248_0==QuestionMark||LA248_0==Tilde) ) {s = 30;}

                         
                        input.seek(index248_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA248_1 = input.LA(1);

                         
                        int index248_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA248_3 = input.LA(1);

                         
                        int index248_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA248_4 = input.LA(1);

                         
                        int index248_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA248_5 = input.LA(1);

                         
                        int index248_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA248_6 = input.LA(1);

                         
                        int index248_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA248_7 = input.LA(1);

                         
                        int index248_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA248_8 = input.LA(1);

                         
                        int index248_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA248_9 = input.LA(1);

                         
                        int index248_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA248_10 = input.LA(1);

                         
                        int index248_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA248_11 = input.LA(1);

                         
                        int index248_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA248_12 = input.LA(1);

                         
                        int index248_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA248_13 = input.LA(1);

                         
                        int index248_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA248_14 = input.LA(1);

                         
                        int index248_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA248_15 = input.LA(1);

                         
                        int index248_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA248_16 = input.LA(1);

                         
                        int index248_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA248_17 = input.LA(1);

                         
                        int index248_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA248_18 = input.LA(1);

                         
                        int index248_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA248_19 = input.LA(1);

                         
                        int index248_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA248_20 = input.LA(1);

                         
                        int index248_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA248_21 = input.LA(1);

                         
                        int index248_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA248_22 = input.LA(1);

                         
                        int index248_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA248_23 = input.LA(1);

                         
                        int index248_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA248_24 = input.LA(1);

                         
                        int index248_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA248_25 = input.LA(1);

                         
                        int index248_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA248_26 = input.LA(1);

                         
                        int index248_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA248_27 = input.LA(1);

                         
                        int index248_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA248_28 = input.LA(1);

                         
                        int index248_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA248_29 = input.LA(1);

                         
                        int index248_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index248_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 248, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_155s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);

    class DFA247 extends DFA {

        public DFA247(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 247;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "5153:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_156s = "\42\uffff";
    static final String dfa_157s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_158s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_159s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_160s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_161s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\22\uffff\1\35\1\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_156 = DFA.unpackEncodedString(dfa_156s);
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final short[] dfa_159 = DFA.unpackEncodedString(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[][] dfa_161 = unpackEncodedStringArray(dfa_161s);

    class DFA250 extends DFA {

        public DFA250(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = dfa_156;
            this.eof = dfa_156;
            this.min = dfa_157;
            this.max = dfa_158;
            this.accept = dfa_159;
            this.special = dfa_160;
            this.transition = dfa_161;
        }
        public String getDescription() {
            return "5170:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA250_0 = input.LA(1);

                         
                        int index250_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA250_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA250_0==LeftSquareBracket) && (synpred128_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA250_0>=4 && LA250_0<=126 && (s=T2S.M_19[LA250_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA250_0==This_1||LA250_0==Void||LA250_0==QuestionMark||LA250_0==Tilde) ) {s = 29;}

                         
                        input.seek(index250_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA250_1 = input.LA(1);

                         
                        int index250_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA250_3 = input.LA(1);

                         
                        int index250_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA250_4 = input.LA(1);

                         
                        int index250_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA250_5 = input.LA(1);

                         
                        int index250_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA250_6 = input.LA(1);

                         
                        int index250_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA250_7 = input.LA(1);

                         
                        int index250_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA250_8 = input.LA(1);

                         
                        int index250_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA250_9 = input.LA(1);

                         
                        int index250_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA250_10 = input.LA(1);

                         
                        int index250_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA250_11 = input.LA(1);

                         
                        int index250_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA250_12 = input.LA(1);

                         
                        int index250_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA250_13 = input.LA(1);

                         
                        int index250_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA250_14 = input.LA(1);

                         
                        int index250_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA250_15 = input.LA(1);

                         
                        int index250_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA250_16 = input.LA(1);

                         
                        int index250_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA250_17 = input.LA(1);

                         
                        int index250_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA250_18 = input.LA(1);

                         
                        int index250_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA250_19 = input.LA(1);

                         
                        int index250_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA250_20 = input.LA(1);

                         
                        int index250_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA250_21 = input.LA(1);

                         
                        int index250_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA250_22 = input.LA(1);

                         
                        int index250_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA250_23 = input.LA(1);

                         
                        int index250_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA250_24 = input.LA(1);

                         
                        int index250_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA250_25 = input.LA(1);

                         
                        int index250_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA250_26 = input.LA(1);

                         
                        int index250_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA250_27 = input.LA(1);

                         
                        int index250_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA250_28 = input.LA(1);

                         
                        int index250_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index250_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 250, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_162s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA249 extends DFA {

        public DFA249(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 249;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "5191:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_163s = "\20\uffff";
    static final String dfa_164s = "\4\uffff\1\3\13\uffff";
    static final String dfa_165s = "\1\4\3\uffff\1\7\13\uffff";
    static final String dfa_166s = "\1\u0095\3\uffff\1\u0099\13\uffff";
    static final String dfa_167s = "\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\14\1\15\2\13";
    static final String dfa_168s = "\4\uffff\1\0\13\uffff}>";
    static final String[] dfa_169s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[][] dfa_169 = unpackEncodedStringArray(dfa_169s);

    class DFA251 extends DFA {

        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_163;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_169;
        }
        public String getDescription() {
            return "5276:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | ParameterizedCallExpressionParserRuleCall_3= ruleParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= ruleArrayLiteral | ObjectLiteralParserRuleCall_6= ruleObjectLiteral | ParenExpressionParserRuleCall_7= ruleParenExpression | AnnotatedExpressionParserRuleCall_8= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= ruleN4ClassExpression | TemplateLiteralParserRuleCall_12= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA251_4 = input.LA(1);

                         
                        int index251_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA251_4==EOF||LA251_4==Instanceof||LA251_4==ExclamationMarkEqualsSignEqualsSign||(LA251_4>=LessThanSignLessThanSignEqualsSign && LA251_4<=EqualsSignEqualsSignEqualsSign)||(LA251_4>=ExclamationMarkEqualsSign && LA251_4<=EqualsSignEqualsSign)||LA251_4==GreaterThanSignEqualsSign||(LA251_4>=CircumflexAccentEqualsSign && LA251_4<=As)||(LA251_4>=In && LA251_4<=VerticalLineVerticalLine)||(LA251_4>=PercentSign && LA251_4<=QuestionMark)||(LA251_4>=LeftSquareBracket && LA251_4<=RightCurlyBracket)||(LA251_4>=RULE_TEMPLATE_HEAD && LA251_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA251_4==RULE_ML_COMMENT||LA251_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA251_4==RULE_NO_LINE_TERMINATOR) && (synpred133_InternalN4JSParser())) {s = 14;}

                        else if ( (LA251_4==Function) && (synpred133_InternalN4JSParser())) {s = 15;}

                         
                        input.seek(index251_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 251, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_170s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA252 extends DFA {

        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = dfa_163;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "5320:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | ParameterizedCallExpressionParserRuleCall_3= norm1_ParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_6= norm1_ObjectLiteral | ParenExpressionParserRuleCall_7= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_8= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_12= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA252_4 = input.LA(1);

                         
                        int index252_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA252_4==EOF||LA252_4==Instanceof||LA252_4==ExclamationMarkEqualsSignEqualsSign||(LA252_4>=LessThanSignLessThanSignEqualsSign && LA252_4<=EqualsSignEqualsSignEqualsSign)||(LA252_4>=ExclamationMarkEqualsSign && LA252_4<=EqualsSignEqualsSign)||LA252_4==GreaterThanSignEqualsSign||(LA252_4>=CircumflexAccentEqualsSign && LA252_4<=As)||(LA252_4>=In && LA252_4<=VerticalLineVerticalLine)||(LA252_4>=PercentSign && LA252_4<=QuestionMark)||(LA252_4>=LeftSquareBracket && LA252_4<=RightCurlyBracket)||(LA252_4>=RULE_TEMPLATE_HEAD && LA252_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA252_4==RULE_ML_COMMENT||LA252_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA252_4==RULE_NO_LINE_TERMINATOR) && (synpred134_InternalN4JSParser())) {s = 14;}

                        else if ( (LA252_4==Function) && (synpred134_InternalN4JSParser())) {s = 15;}

                         
                        input.seek(index252_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 252, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_171s = "\5\uffff";
    static final String dfa_172s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_173s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_174s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_175s = "\5\uffff}>";
    static final String[] dfa_176s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\2\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\2\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA255 extends DFA {

        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 5499:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA261 extends DFA {

        public DFA261(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 261;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 5540:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_177s = "\115\uffff";
    static final String dfa_178s = "\1\4\1\uffff\105\0\6\uffff";
    static final String dfa_179s = "\1\u0095\1\uffff\105\0\6\uffff";
    static final String dfa_180s = "\1\uffff\1\1\105\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_181s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_182s = {
            "\1\16\1\13\1\76\1\43\1\5\1\77\1\101\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\100\1\66\1\30\1\33\1\41\1\102\1\45\1\71\1\47\1\6\1\52\1\75\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\3\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\12\1\2\1\55\4\uffff\1\36\1\63\1\65\1\44\1\103\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\5\uffff\1\111\1\uffff\1\110\7\uffff\1\107\2\uffff\1\17\1\1\1\106\2\uffff\1\14\2\uffff\1\10\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\7\2\uffff\1\104\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "5701:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA273_0 = input.LA(1);

                         
                        int index273_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA273_0>=4 && LA273_0<=129 && (s=T2S.M_20[LA273_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA273_0==RULE_DOUBLE||LA273_0==RULE_HEX_INT||LA273_0==RULE_OCTAL_INT||LA273_0==RULE_SCIENTIFIC_INT||LA273_0==RULE_INT) ) {s = 69;}

                        else if ( (LA273_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA273_0==LessThanSign) && (synpred138_InternalN4JSParser())) {s = 71;}

                        else if ( (LA273_0==Asterisk) && (synpred138_InternalN4JSParser())) {s = 72;}

                        else if ( (LA273_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index273_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA273_2 = input.LA(1);

                         
                        int index273_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA273_3 = input.LA(1);

                         
                        int index273_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA273_4 = input.LA(1);

                         
                        int index273_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA273_5 = input.LA(1);

                         
                        int index273_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA273_6 = input.LA(1);

                         
                        int index273_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA273_7 = input.LA(1);

                         
                        int index273_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA273_8 = input.LA(1);

                         
                        int index273_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA273_9 = input.LA(1);

                         
                        int index273_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA273_10 = input.LA(1);

                         
                        int index273_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA273_11 = input.LA(1);

                         
                        int index273_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA273_12 = input.LA(1);

                         
                        int index273_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA273_13 = input.LA(1);

                         
                        int index273_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA273_14 = input.LA(1);

                         
                        int index273_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA273_15 = input.LA(1);

                         
                        int index273_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA273_16 = input.LA(1);

                         
                        int index273_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA273_17 = input.LA(1);

                         
                        int index273_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA273_18 = input.LA(1);

                         
                        int index273_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA273_19 = input.LA(1);

                         
                        int index273_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA273_20 = input.LA(1);

                         
                        int index273_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA273_21 = input.LA(1);

                         
                        int index273_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA273_22 = input.LA(1);

                         
                        int index273_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA273_23 = input.LA(1);

                         
                        int index273_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA273_24 = input.LA(1);

                         
                        int index273_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA273_25 = input.LA(1);

                         
                        int index273_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA273_26 = input.LA(1);

                         
                        int index273_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA273_27 = input.LA(1);

                         
                        int index273_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA273_28 = input.LA(1);

                         
                        int index273_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA273_29 = input.LA(1);

                         
                        int index273_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA273_30 = input.LA(1);

                         
                        int index273_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA273_31 = input.LA(1);

                         
                        int index273_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA273_32 = input.LA(1);

                         
                        int index273_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA273_33 = input.LA(1);

                         
                        int index273_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA273_34 = input.LA(1);

                         
                        int index273_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA273_35 = input.LA(1);

                         
                        int index273_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA273_36 = input.LA(1);

                         
                        int index273_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA273_37 = input.LA(1);

                         
                        int index273_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA273_38 = input.LA(1);

                         
                        int index273_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA273_39 = input.LA(1);

                         
                        int index273_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA273_40 = input.LA(1);

                         
                        int index273_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA273_41 = input.LA(1);

                         
                        int index273_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA273_42 = input.LA(1);

                         
                        int index273_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA273_43 = input.LA(1);

                         
                        int index273_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA273_44 = input.LA(1);

                         
                        int index273_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA273_45 = input.LA(1);

                         
                        int index273_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA273_46 = input.LA(1);

                         
                        int index273_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA273_47 = input.LA(1);

                         
                        int index273_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA273_48 = input.LA(1);

                         
                        int index273_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA273_49 = input.LA(1);

                         
                        int index273_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA273_50 = input.LA(1);

                         
                        int index273_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA273_51 = input.LA(1);

                         
                        int index273_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA273_52 = input.LA(1);

                         
                        int index273_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA273_53 = input.LA(1);

                         
                        int index273_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA273_54 = input.LA(1);

                         
                        int index273_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA273_55 = input.LA(1);

                         
                        int index273_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA273_56 = input.LA(1);

                         
                        int index273_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA273_57 = input.LA(1);

                         
                        int index273_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA273_58 = input.LA(1);

                         
                        int index273_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA273_59 = input.LA(1);

                         
                        int index273_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA273_60 = input.LA(1);

                         
                        int index273_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA273_61 = input.LA(1);

                         
                        int index273_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA273_62 = input.LA(1);

                         
                        int index273_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA273_63 = input.LA(1);

                         
                        int index273_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA273_64 = input.LA(1);

                         
                        int index273_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA273_65 = input.LA(1);

                         
                        int index273_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA273_66 = input.LA(1);

                         
                        int index273_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA273_67 = input.LA(1);

                         
                        int index273_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA273_68 = input.LA(1);

                         
                        int index273_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA273_69 = input.LA(1);

                         
                        int index273_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index273_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA273_70 = input.LA(1);

                         
                        int index273_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 273, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA274 extends DFA {

        public DFA274(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "5887:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA274_0 = input.LA(1);

                         
                        int index274_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA274_0>=4 && LA274_0<=129 && (s=T2S.M_20[LA274_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA274_0==RULE_DOUBLE||LA274_0==RULE_HEX_INT||LA274_0==RULE_OCTAL_INT||LA274_0==RULE_SCIENTIFIC_INT||LA274_0==RULE_INT) ) {s = 69;}

                        else if ( (LA274_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA274_0==LessThanSign) && (synpred142_InternalN4JSParser())) {s = 71;}

                        else if ( (LA274_0==Asterisk) && (synpred142_InternalN4JSParser())) {s = 72;}

                        else if ( (LA274_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index274_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA274_2 = input.LA(1);

                         
                        int index274_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA274_3 = input.LA(1);

                         
                        int index274_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA274_4 = input.LA(1);

                         
                        int index274_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA274_5 = input.LA(1);

                         
                        int index274_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA274_6 = input.LA(1);

                         
                        int index274_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA274_7 = input.LA(1);

                         
                        int index274_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA274_8 = input.LA(1);

                         
                        int index274_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA274_9 = input.LA(1);

                         
                        int index274_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA274_10 = input.LA(1);

                         
                        int index274_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA274_11 = input.LA(1);

                         
                        int index274_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA274_12 = input.LA(1);

                         
                        int index274_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA274_13 = input.LA(1);

                         
                        int index274_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA274_14 = input.LA(1);

                         
                        int index274_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA274_15 = input.LA(1);

                         
                        int index274_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA274_16 = input.LA(1);

                         
                        int index274_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA274_17 = input.LA(1);

                         
                        int index274_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA274_18 = input.LA(1);

                         
                        int index274_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA274_19 = input.LA(1);

                         
                        int index274_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA274_20 = input.LA(1);

                         
                        int index274_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA274_21 = input.LA(1);

                         
                        int index274_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA274_22 = input.LA(1);

                         
                        int index274_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA274_23 = input.LA(1);

                         
                        int index274_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA274_24 = input.LA(1);

                         
                        int index274_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA274_25 = input.LA(1);

                         
                        int index274_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA274_26 = input.LA(1);

                         
                        int index274_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA274_27 = input.LA(1);

                         
                        int index274_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA274_28 = input.LA(1);

                         
                        int index274_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA274_29 = input.LA(1);

                         
                        int index274_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA274_30 = input.LA(1);

                         
                        int index274_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA274_31 = input.LA(1);

                         
                        int index274_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA274_32 = input.LA(1);

                         
                        int index274_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA274_33 = input.LA(1);

                         
                        int index274_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA274_34 = input.LA(1);

                         
                        int index274_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA274_35 = input.LA(1);

                         
                        int index274_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA274_36 = input.LA(1);

                         
                        int index274_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA274_37 = input.LA(1);

                         
                        int index274_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA274_38 = input.LA(1);

                         
                        int index274_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA274_39 = input.LA(1);

                         
                        int index274_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA274_40 = input.LA(1);

                         
                        int index274_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA274_41 = input.LA(1);

                         
                        int index274_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA274_42 = input.LA(1);

                         
                        int index274_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA274_43 = input.LA(1);

                         
                        int index274_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA274_44 = input.LA(1);

                         
                        int index274_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA274_45 = input.LA(1);

                         
                        int index274_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA274_46 = input.LA(1);

                         
                        int index274_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA274_47 = input.LA(1);

                         
                        int index274_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA274_48 = input.LA(1);

                         
                        int index274_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA274_49 = input.LA(1);

                         
                        int index274_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA274_50 = input.LA(1);

                         
                        int index274_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA274_51 = input.LA(1);

                         
                        int index274_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred140_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA274_52 = input.LA(1);

                         
                        int index274_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA274_53 = input.LA(1);

                         
                        int index274_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA274_54 = input.LA(1);

                         
                        int index274_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA274_55 = input.LA(1);

                         
                        int index274_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA274_56 = input.LA(1);

                         
                        int index274_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA274_57 = input.LA(1);

                         
                        int index274_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA274_58 = input.LA(1);

                         
                        int index274_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA274_59 = input.LA(1);

                         
                        int index274_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA274_60 = input.LA(1);

                         
                        int index274_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA274_61 = input.LA(1);

                         
                        int index274_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA274_62 = input.LA(1);

                         
                        int index274_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA274_63 = input.LA(1);

                         
                        int index274_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA274_64 = input.LA(1);

                         
                        int index274_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA274_65 = input.LA(1);

                         
                        int index274_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA274_66 = input.LA(1);

                         
                        int index274_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA274_67 = input.LA(1);

                         
                        int index274_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA274_68 = input.LA(1);

                         
                        int index274_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA274_69 = input.LA(1);

                         
                        int index274_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index274_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA274_70 = input.LA(1);

                         
                        int index274_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index274_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 274, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_183s = "\114\uffff";
    static final String dfa_184s = "\1\4\105\0\6\uffff";
    static final String dfa_185s = "\1\u0095\105\0\6\uffff";
    static final String dfa_186s = "\106\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_187s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_188s = {
            "\1\15\1\12\1\75\1\42\1\4\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\5\1\51\1\74\1\3\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\14\1\53\1\55\1\2\1\20\1\31\1\61\1\72\1\56\1\10\1\57\1\11\1\1\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\16\1\uffff\1\105\2\uffff\1\13\2\uffff\1\7\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\6\2\uffff\1\103\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA282 extends DFA {

        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "6080:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA282_0 = input.LA(1);

                         
                        int index282_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA282_0>=4 && LA282_0<=129 && (s=T2S.M_22[LA282_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA282_0==RULE_DOUBLE||LA282_0==RULE_HEX_INT||LA282_0==RULE_OCTAL_INT||LA282_0==RULE_SCIENTIFIC_INT||LA282_0==RULE_INT) ) {s = 68;}

                        else if ( (LA282_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA282_0==LessThanSign) && (synpred149_InternalN4JSParser())) {s = 70;}

                        else if ( (LA282_0==Asterisk) && (synpred149_InternalN4JSParser())) {s = 71;}

                        else if ( (LA282_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index282_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA282_1 = input.LA(1);

                         
                        int index282_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA282_2 = input.LA(1);

                         
                        int index282_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA282_3 = input.LA(1);

                         
                        int index282_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA282_4 = input.LA(1);

                         
                        int index282_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA282_5 = input.LA(1);

                         
                        int index282_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA282_6 = input.LA(1);

                         
                        int index282_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA282_7 = input.LA(1);

                         
                        int index282_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA282_8 = input.LA(1);

                         
                        int index282_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA282_9 = input.LA(1);

                         
                        int index282_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA282_10 = input.LA(1);

                         
                        int index282_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA282_11 = input.LA(1);

                         
                        int index282_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA282_12 = input.LA(1);

                         
                        int index282_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA282_13 = input.LA(1);

                         
                        int index282_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA282_14 = input.LA(1);

                         
                        int index282_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA282_15 = input.LA(1);

                         
                        int index282_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA282_16 = input.LA(1);

                         
                        int index282_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA282_17 = input.LA(1);

                         
                        int index282_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA282_18 = input.LA(1);

                         
                        int index282_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA282_19 = input.LA(1);

                         
                        int index282_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA282_20 = input.LA(1);

                         
                        int index282_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA282_21 = input.LA(1);

                         
                        int index282_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA282_22 = input.LA(1);

                         
                        int index282_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA282_23 = input.LA(1);

                         
                        int index282_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA282_24 = input.LA(1);

                         
                        int index282_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA282_25 = input.LA(1);

                         
                        int index282_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA282_26 = input.LA(1);

                         
                        int index282_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA282_27 = input.LA(1);

                         
                        int index282_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA282_28 = input.LA(1);

                         
                        int index282_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA282_29 = input.LA(1);

                         
                        int index282_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA282_30 = input.LA(1);

                         
                        int index282_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA282_31 = input.LA(1);

                         
                        int index282_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA282_32 = input.LA(1);

                         
                        int index282_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA282_33 = input.LA(1);

                         
                        int index282_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA282_34 = input.LA(1);

                         
                        int index282_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA282_35 = input.LA(1);

                         
                        int index282_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA282_36 = input.LA(1);

                         
                        int index282_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA282_37 = input.LA(1);

                         
                        int index282_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA282_38 = input.LA(1);

                         
                        int index282_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA282_39 = input.LA(1);

                         
                        int index282_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA282_40 = input.LA(1);

                         
                        int index282_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA282_41 = input.LA(1);

                         
                        int index282_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA282_42 = input.LA(1);

                         
                        int index282_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA282_43 = input.LA(1);

                         
                        int index282_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA282_44 = input.LA(1);

                         
                        int index282_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA282_45 = input.LA(1);

                         
                        int index282_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA282_46 = input.LA(1);

                         
                        int index282_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA282_47 = input.LA(1);

                         
                        int index282_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA282_48 = input.LA(1);

                         
                        int index282_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA282_49 = input.LA(1);

                         
                        int index282_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA282_50 = input.LA(1);

                         
                        int index282_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred144_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA282_51 = input.LA(1);

                         
                        int index282_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA282_52 = input.LA(1);

                         
                        int index282_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA282_53 = input.LA(1);

                         
                        int index282_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA282_54 = input.LA(1);

                         
                        int index282_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA282_55 = input.LA(1);

                         
                        int index282_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA282_56 = input.LA(1);

                         
                        int index282_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA282_57 = input.LA(1);

                         
                        int index282_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA282_58 = input.LA(1);

                         
                        int index282_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA282_59 = input.LA(1);

                         
                        int index282_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA282_60 = input.LA(1);

                         
                        int index282_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA282_61 = input.LA(1);

                         
                        int index282_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA282_62 = input.LA(1);

                         
                        int index282_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA282_63 = input.LA(1);

                         
                        int index282_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA282_64 = input.LA(1);

                         
                        int index282_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA282_65 = input.LA(1);

                         
                        int index282_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA282_66 = input.LA(1);

                         
                        int index282_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA282_67 = input.LA(1);

                         
                        int index282_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA282_68 = input.LA(1);

                         
                        int index282_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index282_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA282_69 = input.LA(1);

                         
                        int index282_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred149_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index282_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 282, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\16\uffff";
    static final String dfa_190s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_191s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_192s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_193s = "\16\uffff}>";
    static final String[] dfa_194s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[][] dfa_194 = unpackEncodedStringArray(dfa_194s);

    class DFA275 extends DFA {

        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6089:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_195s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_196s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\12\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final short[][] dfa_196 = unpackEncodedStringArray(dfa_196s);

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6345:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_197s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_198s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_199s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);

    class DFA280 extends DFA {

        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6370:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "6396:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA290_0 = input.LA(1);

                         
                        int index290_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA290_0>=4 && LA290_0<=129 && (s=T2S.M_22[LA290_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA290_0==RULE_DOUBLE||LA290_0==RULE_HEX_INT||LA290_0==RULE_OCTAL_INT||LA290_0==RULE_SCIENTIFIC_INT||LA290_0==RULE_INT) ) {s = 68;}

                        else if ( (LA290_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA290_0==LessThanSign) && (synpred158_InternalN4JSParser())) {s = 70;}

                        else if ( (LA290_0==Asterisk) && (synpred158_InternalN4JSParser())) {s = 71;}

                        else if ( (LA290_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index290_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA290_1 = input.LA(1);

                         
                        int index290_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA290_2 = input.LA(1);

                         
                        int index290_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA290_3 = input.LA(1);

                         
                        int index290_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA290_4 = input.LA(1);

                         
                        int index290_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA290_5 = input.LA(1);

                         
                        int index290_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA290_6 = input.LA(1);

                         
                        int index290_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA290_7 = input.LA(1);

                         
                        int index290_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA290_8 = input.LA(1);

                         
                        int index290_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA290_9 = input.LA(1);

                         
                        int index290_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA290_10 = input.LA(1);

                         
                        int index290_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA290_11 = input.LA(1);

                         
                        int index290_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA290_12 = input.LA(1);

                         
                        int index290_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA290_13 = input.LA(1);

                         
                        int index290_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA290_14 = input.LA(1);

                         
                        int index290_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA290_15 = input.LA(1);

                         
                        int index290_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA290_16 = input.LA(1);

                         
                        int index290_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA290_17 = input.LA(1);

                         
                        int index290_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA290_18 = input.LA(1);

                         
                        int index290_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA290_19 = input.LA(1);

                         
                        int index290_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA290_20 = input.LA(1);

                         
                        int index290_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA290_21 = input.LA(1);

                         
                        int index290_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA290_22 = input.LA(1);

                         
                        int index290_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA290_23 = input.LA(1);

                         
                        int index290_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA290_24 = input.LA(1);

                         
                        int index290_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA290_25 = input.LA(1);

                         
                        int index290_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA290_26 = input.LA(1);

                         
                        int index290_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA290_27 = input.LA(1);

                         
                        int index290_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA290_28 = input.LA(1);

                         
                        int index290_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA290_29 = input.LA(1);

                         
                        int index290_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA290_30 = input.LA(1);

                         
                        int index290_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA290_31 = input.LA(1);

                         
                        int index290_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA290_32 = input.LA(1);

                         
                        int index290_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA290_33 = input.LA(1);

                         
                        int index290_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA290_34 = input.LA(1);

                         
                        int index290_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA290_35 = input.LA(1);

                         
                        int index290_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA290_36 = input.LA(1);

                         
                        int index290_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA290_37 = input.LA(1);

                         
                        int index290_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA290_38 = input.LA(1);

                         
                        int index290_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA290_39 = input.LA(1);

                         
                        int index290_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA290_40 = input.LA(1);

                         
                        int index290_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA290_41 = input.LA(1);

                         
                        int index290_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA290_42 = input.LA(1);

                         
                        int index290_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA290_43 = input.LA(1);

                         
                        int index290_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA290_44 = input.LA(1);

                         
                        int index290_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA290_45 = input.LA(1);

                         
                        int index290_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA290_46 = input.LA(1);

                         
                        int index290_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA290_47 = input.LA(1);

                         
                        int index290_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA290_48 = input.LA(1);

                         
                        int index290_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA290_49 = input.LA(1);

                         
                        int index290_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA290_50 = input.LA(1);

                         
                        int index290_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred153_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA290_51 = input.LA(1);

                         
                        int index290_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred155_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA290_52 = input.LA(1);

                         
                        int index290_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA290_53 = input.LA(1);

                         
                        int index290_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA290_54 = input.LA(1);

                         
                        int index290_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA290_55 = input.LA(1);

                         
                        int index290_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA290_56 = input.LA(1);

                         
                        int index290_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA290_57 = input.LA(1);

                         
                        int index290_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA290_58 = input.LA(1);

                         
                        int index290_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA290_59 = input.LA(1);

                         
                        int index290_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA290_60 = input.LA(1);

                         
                        int index290_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA290_61 = input.LA(1);

                         
                        int index290_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA290_62 = input.LA(1);

                         
                        int index290_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA290_63 = input.LA(1);

                         
                        int index290_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA290_64 = input.LA(1);

                         
                        int index290_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA290_65 = input.LA(1);

                         
                        int index290_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA290_66 = input.LA(1);

                         
                        int index290_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA290_67 = input.LA(1);

                         
                        int index290_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA290_68 = input.LA(1);

                         
                        int index290_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index290_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA290_69 = input.LA(1);

                         
                        int index290_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred158_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index290_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 290, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA283 extends DFA {

        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6405:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6661:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_200s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);

    class DFA288 extends DFA {

        public DFA288(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "6686:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA292 extends DFA {

        public DFA292(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 292;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6739:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA296 extends DFA {

        public DFA296(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6797:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6848:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA300 extends DFA {

        public DFA300(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 300;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6882:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA301 extends DFA {

        public DFA301(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 301;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6913:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA303 extends DFA {

        public DFA303(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 303;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "6938:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_201s = "\70\uffff";
    static final String dfa_202s = "\2\4\66\uffff";
    static final String dfa_203s = "\2\u0095\66\uffff";
    static final String dfa_204s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_205s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_206s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\64\3\uffff\1\36\1\14\3\uffff\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[][] dfa_206 = unpackEncodedStringArray(dfa_206s);

    class DFA321 extends DFA {

        public DFA321(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 321;
            this.eot = dfa_201;
            this.eof = dfa_201;
            this.min = dfa_202;
            this.max = dfa_203;
            this.accept = dfa_204;
            this.special = dfa_205;
            this.transition = dfa_206;
        }
        public String getDescription() {
            return "7706:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA321_1 = input.LA(1);

                         
                        int index321_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA321_1==FullStop) && (synpred181_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA321_1>=4 && LA321_1<=149 && (s=T2S.M_24[LA321_1-(4)])>=0) && (synpred182_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index321_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 321, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_207s = "\2\4\65\uffff";
    static final String dfa_208s = "\2\u0095\65\uffff";
    static final String dfa_209s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_210s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_211s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);

    class DFA327 extends DFA {

        public DFA327(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 327;
            this.eot = dfa_25;
            this.eof = dfa_25;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "7764:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA327_1 = input.LA(1);

                         
                        int index327_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA327_1==FullStop) && (synpred185_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA327_1>=4 && LA327_1<=149 && (s=T2S.M_25[LA327_1-(4)])>=0) && (synpred186_InternalN4JSParser())) { /* 52 cases */ }
                        input.seek(index327_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 327, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_212s = "\1\1\102\uffff";
    static final String dfa_213s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_214s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_215s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_216s = "\1\0\3\uffff\1\1\76\uffff}>";
    static final String[] dfa_217s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final char[] dfa_213 = DFA.unpackEncodedStringToUnsignedChars(dfa_213s);
    static final char[] dfa_214 = DFA.unpackEncodedStringToUnsignedChars(dfa_214s);
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final short[][] dfa_217 = unpackEncodedStringArray(dfa_217s);

    class DFA340 extends DFA {

        public DFA340(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 340;
            this.eot = dfa_121;
            this.eof = dfa_212;
            this.min = dfa_213;
            this.max = dfa_214;
            this.accept = dfa_215;
            this.special = dfa_216;
            this.transition = dfa_217;
        }
        public String getDescription() {
            return "()* loopback of 8169:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA340_0 = input.LA(1);

                         
                        int index340_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA340_0==EOF||LA340_0==Instanceof||LA340_0==ExclamationMarkEqualsSignEqualsSign||(LA340_0>=LessThanSignLessThanSignEqualsSign && LA340_0<=EqualsSignEqualsSignEqualsSign)||(LA340_0>=ExclamationMarkEqualsSign && LA340_0<=AsteriskEqualsSign)||LA340_0==PlusSignEqualsSign||(LA340_0>=HyphenMinusEqualsSign && LA340_0<=SolidusEqualsSign)||(LA340_0>=LessThanSignEqualsSign && LA340_0<=EqualsSignEqualsSign)||LA340_0==GreaterThanSignEqualsSign||LA340_0==CircumflexAccentEqualsSign||(LA340_0>=In && LA340_0<=VerticalLineVerticalLine)||LA340_0==Ampersand||LA340_0==RightParenthesis||LA340_0==Comma||(LA340_0>=Colon && LA340_0<=EqualsSign)||LA340_0==QuestionMark||(LA340_0>=RightSquareBracket && LA340_0<=CircumflexAccent)||(LA340_0>=VerticalLine && LA340_0<=RightCurlyBracket)||LA340_0==RULE_ML_COMMENT||LA340_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA340_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA340_0==LessThanSignLessThanSign) && (synpred197_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index340_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA340_4 = input.LA(1);

                         
                        int index340_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA340_4>=4 && LA340_4<=149 && (s=T2S.M_26[LA340_4-(4)])>=0) && (synpred197_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA340_4==GreaterThanSignEqualsSign) ) {s = 1;}

                         
                        input.seek(index340_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 340, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_218s = "\1\1\101\uffff";
    static final String dfa_219s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_220s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_221s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_222s = "\1\0\3\uffff\1\1\75\uffff}>";
    static final String[] dfa_223s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final char[] dfa_219 = DFA.unpackEncodedStringToUnsignedChars(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[][] dfa_223 = unpackEncodedStringArray(dfa_223s);

    class DFA341 extends DFA {

        public DFA341(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 341;
            this.eot = dfa_19;
            this.eof = dfa_218;
            this.min = dfa_219;
            this.max = dfa_220;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_223;
        }
        public String getDescription() {
            return "()* loopback of 8198:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA341_0 = input.LA(1);

                         
                        int index341_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA341_0==EOF||LA341_0==Instanceof||LA341_0==ExclamationMarkEqualsSignEqualsSign||(LA341_0>=LessThanSignLessThanSignEqualsSign && LA341_0<=EqualsSignEqualsSignEqualsSign)||(LA341_0>=ExclamationMarkEqualsSign && LA341_0<=AsteriskEqualsSign)||LA341_0==PlusSignEqualsSign||(LA341_0>=HyphenMinusEqualsSign && LA341_0<=SolidusEqualsSign)||(LA341_0>=LessThanSignEqualsSign && LA341_0<=EqualsSignEqualsSign)||LA341_0==GreaterThanSignEqualsSign||LA341_0==CircumflexAccentEqualsSign||(LA341_0>=In && LA341_0<=VerticalLineVerticalLine)||LA341_0==Ampersand||LA341_0==RightParenthesis||LA341_0==Comma||(LA341_0>=Colon && LA341_0<=EqualsSign)||LA341_0==QuestionMark||(LA341_0>=RightSquareBracket && LA341_0<=CircumflexAccent)||(LA341_0>=VerticalLine && LA341_0<=RightCurlyBracket)||LA341_0==RULE_ML_COMMENT||LA341_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA341_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA341_0==LessThanSignLessThanSign) && (synpred198_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index341_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA341_4 = input.LA(1);

                         
                        int index341_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA341_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA341_4>=4 && LA341_4<=149 && (s=T2S.M_27[LA341_4-(4)])>=0) && (synpred198_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index341_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 341, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_224s = "\104\uffff";
    static final String dfa_225s = "\1\1\103\uffff";
    static final String dfa_226s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_227s = "\1\157\1\uffff\1\u0095\101\uffff";
    static final String dfa_228s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_229s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_230s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final char[] dfa_226 = DFA.unpackEncodedStringToUnsignedChars(dfa_226s);
    static final char[] dfa_227 = DFA.unpackEncodedStringToUnsignedChars(dfa_227s);
    static final short[] dfa_228 = DFA.unpackEncodedString(dfa_228s);
    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[][] dfa_230 = unpackEncodedStringArray(dfa_230s);

    class DFA344 extends DFA {

        public DFA344(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 344;
            this.eot = dfa_224;
            this.eof = dfa_225;
            this.min = dfa_226;
            this.max = dfa_227;
            this.accept = dfa_228;
            this.special = dfa_229;
            this.transition = dfa_230;
        }
        public String getDescription() {
            return "()* loopback of 8264:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA344_2 = input.LA(1);

                         
                        int index344_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA344_2>=4 && LA344_2<=149 && (s=T2S.M_28[LA344_2-(4)])>=0) && (synpred199_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA344_2==GreaterThanSignEqualsSign||LA344_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index344_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA344_0 = input.LA(1);

                         
                        int index344_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA344_0==EOF||LA344_0==ExclamationMarkEqualsSignEqualsSign||(LA344_0>=LessThanSignLessThanSignEqualsSign && LA344_0<=EqualsSignEqualsSignEqualsSign)||(LA344_0>=ExclamationMarkEqualsSign && LA344_0<=AsteriskEqualsSign)||LA344_0==PlusSignEqualsSign||(LA344_0>=HyphenMinusEqualsSign && LA344_0<=SolidusEqualsSign)||LA344_0==EqualsSignEqualsSign||LA344_0==CircumflexAccentEqualsSign||(LA344_0>=In && LA344_0<=VerticalLineVerticalLine)||LA344_0==Ampersand||LA344_0==Comma||LA344_0==Semicolon||LA344_0==EqualsSign||LA344_0==QuestionMark||LA344_0==CircumflexAccent||LA344_0==VerticalLine) ) {s = 1;}

                        else if ( (LA344_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA344_0==LessThanSign) && (synpred199_InternalN4JSParser())) {s = 3;}

                        else if ( (LA344_0==LessThanSignEqualsSign) && (synpred199_InternalN4JSParser())) {s = 4;}

                        else if ( (LA344_0==GreaterThanSignEqualsSign) && (synpred199_InternalN4JSParser())) {s = 5;}

                        else if ( (LA344_0==Instanceof) && (synpred199_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index344_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 344, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_231s = "\105\uffff";
    static final String dfa_232s = "\1\1\104\uffff";
    static final String dfa_233s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_234s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_235s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_236s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_237s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final char[] dfa_233 = DFA.unpackEncodedStringToUnsignedChars(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[][] dfa_237 = unpackEncodedStringArray(dfa_237s);

    class DFA345 extends DFA {

        public DFA345(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 345;
            this.eot = dfa_231;
            this.eof = dfa_232;
            this.min = dfa_233;
            this.max = dfa_234;
            this.accept = dfa_235;
            this.special = dfa_236;
            this.transition = dfa_237;
        }
        public String getDescription() {
            return "()* loopback of 8449:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA345_0 = input.LA(1);

                         
                        int index345_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_0==EOF||LA345_0==ExclamationMarkEqualsSignEqualsSign||(LA345_0>=LessThanSignLessThanSignEqualsSign && LA345_0<=EqualsSignEqualsSignEqualsSign)||(LA345_0>=ExclamationMarkEqualsSign && LA345_0<=AsteriskEqualsSign)||LA345_0==PlusSignEqualsSign||(LA345_0>=HyphenMinusEqualsSign && LA345_0<=SolidusEqualsSign)||LA345_0==EqualsSignEqualsSign||LA345_0==CircumflexAccentEqualsSign||(LA345_0>=VerticalLineEqualsSign && LA345_0<=VerticalLineVerticalLine)||LA345_0==Ampersand||LA345_0==RightParenthesis||LA345_0==Comma||(LA345_0>=Colon && LA345_0<=Semicolon)||LA345_0==EqualsSign||LA345_0==QuestionMark||(LA345_0>=RightSquareBracket && LA345_0<=CircumflexAccent)||(LA345_0>=VerticalLine && LA345_0<=RightCurlyBracket)||LA345_0==RULE_ML_COMMENT||LA345_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA345_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA345_0==LessThanSign) && (synpred201_InternalN4JSParser())) {s = 3;}

                        else if ( (LA345_0==LessThanSignEqualsSign) && (synpred201_InternalN4JSParser())) {s = 4;}

                        else if ( (LA345_0==GreaterThanSignEqualsSign) && (synpred201_InternalN4JSParser())) {s = 5;}

                        else if ( (LA345_0==Instanceof) && (synpred201_InternalN4JSParser())) {s = 6;}

                        else if ( (LA345_0==In) && (synpred201_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index345_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA345_2 = input.LA(1);

                         
                        int index345_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA345_2>=4 && LA345_2<=149 && (s=T2S.M_29[LA345_2-(4)])>=0) && (synpred201_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA345_2==GreaterThanSignEqualsSign||LA345_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index345_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 345, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_238s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_239s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_240s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_241s = "\1\0\1\uffff\1\1\100\uffff}>";
    static final String[] dfa_242s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_238 = DFA.unpackEncodedStringToUnsignedChars(dfa_238s);
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[][] dfa_242 = unpackEncodedStringArray(dfa_242s);

    class DFA346 extends DFA {

        public DFA346(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 346;
            this.eot = dfa_121;
            this.eof = dfa_212;
            this.min = dfa_238;
            this.max = dfa_239;
            this.accept = dfa_240;
            this.special = dfa_241;
            this.transition = dfa_242;
        }
        public String getDescription() {
            return "()* loopback of 8634:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA346_0 = input.LA(1);

                         
                        int index346_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA346_0==EOF||LA346_0==ExclamationMarkEqualsSignEqualsSign||(LA346_0>=LessThanSignLessThanSignEqualsSign && LA346_0<=EqualsSignEqualsSignEqualsSign)||(LA346_0>=ExclamationMarkEqualsSign && LA346_0<=AsteriskEqualsSign)||LA346_0==PlusSignEqualsSign||(LA346_0>=HyphenMinusEqualsSign && LA346_0<=SolidusEqualsSign)||LA346_0==EqualsSignEqualsSign||LA346_0==CircumflexAccentEqualsSign||(LA346_0>=In && LA346_0<=VerticalLineVerticalLine)||LA346_0==Ampersand||LA346_0==Comma||LA346_0==Semicolon||LA346_0==EqualsSign||LA346_0==QuestionMark||LA346_0==CircumflexAccent||LA346_0==VerticalLine) ) {s = 1;}

                        else if ( (LA346_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA346_0==LessThanSign) && (synpred203_InternalN4JSParser())) {s = 3;}

                        else if ( (LA346_0==LessThanSignEqualsSign) && (synpred203_InternalN4JSParser())) {s = 4;}

                        else if ( (LA346_0==GreaterThanSignEqualsSign) && (synpred203_InternalN4JSParser())) {s = 5;}

                        else if ( (LA346_0==Instanceof) && (synpred203_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index346_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA346_2 = input.LA(1);

                         
                        int index346_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA346_2==GreaterThanSignEqualsSign||LA346_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA346_2==New) && (synpred203_InternalN4JSParser())) {s = 7;}

                        else if ( (LA346_2==This_1) && (synpred203_InternalN4JSParser())) {s = 8;}

                        else if ( (LA346_2==Super) && (synpred203_InternalN4JSParser())) {s = 9;}

                        else if ( (LA346_2==RULE_IDENTIFIER) && (synpred203_InternalN4JSParser())) {s = 10;}

                        else if ( (LA346_2==Get) && (synpred203_InternalN4JSParser())) {s = 11;}

                        else if ( (LA346_2==Set) && (synpred203_InternalN4JSParser())) {s = 12;}

                        else if ( (LA346_2==Let) && (synpred203_InternalN4JSParser())) {s = 13;}

                        else if ( (LA346_2==Project) && (synpred203_InternalN4JSParser())) {s = 14;}

                        else if ( (LA346_2==External) && (synpred203_InternalN4JSParser())) {s = 15;}

                        else if ( (LA346_2==Abstract) && (synpred203_InternalN4JSParser())) {s = 16;}

                        else if ( (LA346_2==Static) && (synpred203_InternalN4JSParser())) {s = 17;}

                        else if ( (LA346_2==As) && (synpred203_InternalN4JSParser())) {s = 18;}

                        else if ( (LA346_2==From) && (synpred203_InternalN4JSParser())) {s = 19;}

                        else if ( (LA346_2==Constructor) && (synpred203_InternalN4JSParser())) {s = 20;}

                        else if ( (LA346_2==Of) && (synpred203_InternalN4JSParser())) {s = 21;}

                        else if ( (LA346_2==Target) && (synpred203_InternalN4JSParser())) {s = 22;}

                        else if ( (LA346_2==Type) && (synpred203_InternalN4JSParser())) {s = 23;}

                        else if ( (LA346_2==Union) && (synpred203_InternalN4JSParser())) {s = 24;}

                        else if ( (LA346_2==Intersection) && (synpred203_InternalN4JSParser())) {s = 25;}

                        else if ( (LA346_2==This) && (synpred203_InternalN4JSParser())) {s = 26;}

                        else if ( (LA346_2==Promisify) && (synpred203_InternalN4JSParser())) {s = 27;}

                        else if ( (LA346_2==Await) && (synpred203_InternalN4JSParser())) {s = 28;}

                        else if ( (LA346_2==Async) && (synpred203_InternalN4JSParser())) {s = 29;}

                        else if ( (LA346_2==Implements) && (synpred203_InternalN4JSParser())) {s = 30;}

                        else if ( (LA346_2==Interface) && (synpred203_InternalN4JSParser())) {s = 31;}

                        else if ( (LA346_2==Private) && (synpred203_InternalN4JSParser())) {s = 32;}

                        else if ( (LA346_2==Protected) && (synpred203_InternalN4JSParser())) {s = 33;}

                        else if ( (LA346_2==Public) && (synpred203_InternalN4JSParser())) {s = 34;}

                        else if ( (LA346_2==Out) && (synpred203_InternalN4JSParser())) {s = 35;}

                        else if ( (LA346_2==LessThanSign) && (synpred203_InternalN4JSParser())) {s = 36;}

                        else if ( (LA346_2==RULE_DOUBLE) && (synpred203_InternalN4JSParser())) {s = 37;}

                        else if ( (LA346_2==RULE_INT) && (synpred203_InternalN4JSParser())) {s = 38;}

                        else if ( (LA346_2==RULE_BINARY_INT) && (synpred203_InternalN4JSParser())) {s = 39;}

                        else if ( (LA346_2==RULE_OCTAL_INT) && (synpred203_InternalN4JSParser())) {s = 40;}

                        else if ( (LA346_2==RULE_LEGACY_OCTAL_INT) && (synpred203_InternalN4JSParser())) {s = 41;}

                        else if ( (LA346_2==RULE_HEX_INT) && (synpred203_InternalN4JSParser())) {s = 42;}

                        else if ( (LA346_2==RULE_SCIENTIFIC_INT) && (synpred203_InternalN4JSParser())) {s = 43;}

                        else if ( (LA346_2==True) && (synpred203_InternalN4JSParser())) {s = 44;}

                        else if ( (LA346_2==False) && (synpred203_InternalN4JSParser())) {s = 45;}

                        else if ( (LA346_2==RULE_STRING) && (synpred203_InternalN4JSParser())) {s = 46;}

                        else if ( (LA346_2==Null) && (synpred203_InternalN4JSParser())) {s = 47;}

                        else if ( (LA346_2==Solidus) && (synpred203_InternalN4JSParser())) {s = 48;}

                        else if ( (LA346_2==SolidusEqualsSign) && (synpred203_InternalN4JSParser())) {s = 49;}

                        else if ( (LA346_2==LeftSquareBracket) && (synpred203_InternalN4JSParser())) {s = 50;}

                        else if ( (LA346_2==LeftCurlyBracket) && (synpred203_InternalN4JSParser())) {s = 51;}

                        else if ( (LA346_2==LeftParenthesis) && (synpred203_InternalN4JSParser())) {s = 52;}

                        else if ( (LA346_2==CommercialAt) && (synpred203_InternalN4JSParser())) {s = 53;}

                        else if ( (LA346_2==Function) && (synpred203_InternalN4JSParser())) {s = 54;}

                        else if ( (LA346_2==Class) && (synpred203_InternalN4JSParser())) {s = 55;}

                        else if ( (LA346_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred203_InternalN4JSParser())) {s = 56;}

                        else if ( (LA346_2==RULE_TEMPLATE_HEAD) && (synpred203_InternalN4JSParser())) {s = 57;}

                        else if ( (LA346_2==Delete) && (synpred203_InternalN4JSParser())) {s = 58;}

                        else if ( (LA346_2==Void) && (synpred203_InternalN4JSParser())) {s = 59;}

                        else if ( (LA346_2==Typeof) && (synpred203_InternalN4JSParser())) {s = 60;}

                        else if ( (LA346_2==PlusSignPlusSign) && (synpred203_InternalN4JSParser())) {s = 61;}

                        else if ( (LA346_2==HyphenMinusHyphenMinus) && (synpred203_InternalN4JSParser())) {s = 62;}

                        else if ( (LA346_2==PlusSign) && (synpred203_InternalN4JSParser())) {s = 63;}

                        else if ( (LA346_2==HyphenMinus) && (synpred203_InternalN4JSParser())) {s = 64;}

                        else if ( (LA346_2==Tilde) && (synpred203_InternalN4JSParser())) {s = 65;}

                        else if ( (LA346_2==ExclamationMark) && (synpred203_InternalN4JSParser())) {s = 66;}

                         
                        input.seek(index346_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 346, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_243s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String[] dfa_244s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_243 = DFA.unpackEncodedStringToUnsignedChars(dfa_243s);
    static final short[][] dfa_244 = unpackEncodedStringArray(dfa_244s);

    class DFA347 extends DFA {

        public DFA347(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 347;
            this.eot = dfa_224;
            this.eof = dfa_225;
            this.min = dfa_226;
            this.max = dfa_243;
            this.accept = dfa_228;
            this.special = dfa_229;
            this.transition = dfa_244;
        }
        public String getDescription() {
            return "()* loopback of 8816:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA347_2 = input.LA(1);

                         
                        int index347_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA347_2>=4 && LA347_2<=149 && (s=T2S.M_30[LA347_2-(4)])>=0) && (synpred205_InternalN4JSParser())) { /* 60 cases */ }
                        else if ( (LA347_2==GreaterThanSignEqualsSign||LA347_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index347_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA347_0 = input.LA(1);

                         
                        int index347_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA347_0==EOF||LA347_0==ExclamationMarkEqualsSignEqualsSign||(LA347_0>=LessThanSignLessThanSignEqualsSign && LA347_0<=EqualsSignEqualsSignEqualsSign)||(LA347_0>=ExclamationMarkEqualsSign && LA347_0<=AsteriskEqualsSign)||LA347_0==PlusSignEqualsSign||(LA347_0>=HyphenMinusEqualsSign && LA347_0<=SolidusEqualsSign)||LA347_0==EqualsSignEqualsSign||LA347_0==CircumflexAccentEqualsSign||(LA347_0>=VerticalLineEqualsSign && LA347_0<=VerticalLineVerticalLine)||LA347_0==Ampersand||LA347_0==RightParenthesis||LA347_0==Comma||(LA347_0>=Colon && LA347_0<=Semicolon)||LA347_0==EqualsSign||LA347_0==QuestionMark||(LA347_0>=RightSquareBracket && LA347_0<=CircumflexAccent)||(LA347_0>=VerticalLine && LA347_0<=RightCurlyBracket)||LA347_0==RULE_ML_COMMENT||LA347_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA347_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA347_0==LessThanSign) && (synpred205_InternalN4JSParser())) {s = 3;}

                        else if ( (LA347_0==LessThanSignEqualsSign) && (synpred205_InternalN4JSParser())) {s = 4;}

                        else if ( (LA347_0==GreaterThanSignEqualsSign) && (synpred205_InternalN4JSParser())) {s = 5;}

                        else if ( (LA347_0==Instanceof) && (synpred205_InternalN4JSParser())) {s = 6;}

                        else if ( (LA347_0==In) && (synpred205_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index347_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 347, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_245s = "\101\uffff";
    static final String dfa_246s = "\1\4\4\0\1\uffff\31\0\42\uffff";
    static final String dfa_247s = "\1\u0095\4\0\1\uffff\31\0\42\uffff";
    static final String dfa_248s = "\5\uffff\1\3\31\uffff\1\4\37\uffff\1\1\1\2";
    static final String dfa_249s = "\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\42\uffff}>";
    static final String[] dfa_250s = {
            "\1\26\1\21\1\31\1\uffff\1\30\1\32\1\34\1\15\2\uffff\1\14\1\37\3\uffff\1\33\1\13\1\37\2\uffff\1\35\1\uffff\1\16\1\uffff\1\23\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\3\37\1\24\1\37\6\uffff\1\10\1\12\1\37\1\36\1\11\7\uffff\1\37\1\uffff\1\37\1\uffff\1\37\7\uffff\1\17\3\uffff\1\22\2\uffff\1\37\2\uffff\1\3\1\uffff\1\5\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\3\uffff\1\37\1\uffff\4\37\1\uffff\1\37\1\uffff\1\6\2\uffff\1\37\11\uffff\2\37\10\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final char[] dfa_246 = DFA.unpackEncodedStringToUnsignedChars(dfa_246s);
    static final char[] dfa_247 = DFA.unpackEncodedStringToUnsignedChars(dfa_247s);
    static final short[] dfa_248 = DFA.unpackEncodedString(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[][] dfa_250 = unpackEncodedStringArray(dfa_250s);

    class DFA379 extends DFA {

        public DFA379(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 379;
            this.eot = dfa_245;
            this.eof = dfa_245;
            this.min = dfa_246;
            this.max = dfa_247;
            this.accept = dfa_248;
            this.special = dfa_249;
            this.transition = dfa_250;
        }
        public String getDescription() {
            return "9918:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA379_0 = input.LA(1);

                         
                        int index379_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA379_0==Await) ) {s = 1;}

                        else if ( (LA379_0==CommercialAt) ) {s = 2;}

                        else if ( (LA379_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA379_0==Async) ) {s = 4;}

                        else if ( (LA379_0==Asterisk) && (synpred240_InternalN4JSParser())) {s = 5;}

                        
                        else if ((LA379_0>=4 && LA379_0<=126 && (s=T2S.M_31[LA379_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA379_0==Function||LA379_0==Delete||LA379_0==Typeof||LA379_0==Class||(LA379_0>=False && LA379_0<=Super)||(LA379_0>=Null && LA379_0<=True)||LA379_0==Void||LA379_0==New||LA379_0==PlusSignPlusSign||LA379_0==HyphenMinusHyphenMinus||LA379_0==SolidusEqualsSign||LA379_0==ExclamationMark||LA379_0==PlusSign||LA379_0==HyphenMinus||LA379_0==Solidus||LA379_0==LessThanSign||LA379_0==LeftSquareBracket||LA379_0==LeftCurlyBracket||LA379_0==Tilde||LA379_0==RULE_DOUBLE||(LA379_0>=RULE_HEX_INT && LA379_0<=RULE_LEGACY_OCTAL_INT)||LA379_0==RULE_SCIENTIFIC_INT||LA379_0==RULE_STRING||(LA379_0>=RULE_TEMPLATE_HEAD && LA379_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA379_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index379_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA379_1 = input.LA(1);

                         
                        int index379_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA379_2 = input.LA(1);

                         
                        int index379_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA379_3 = input.LA(1);

                         
                        int index379_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA379_4 = input.LA(1);

                         
                        int index379_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA379_6 = input.LA(1);

                         
                        int index379_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA379_7 = input.LA(1);

                         
                        int index379_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA379_8 = input.LA(1);

                         
                        int index379_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA379_9 = input.LA(1);

                         
                        int index379_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA379_10 = input.LA(1);

                         
                        int index379_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA379_11 = input.LA(1);

                         
                        int index379_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA379_12 = input.LA(1);

                         
                        int index379_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA379_13 = input.LA(1);

                         
                        int index379_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA379_14 = input.LA(1);

                         
                        int index379_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA379_15 = input.LA(1);

                         
                        int index379_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA379_16 = input.LA(1);

                         
                        int index379_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA379_17 = input.LA(1);

                         
                        int index379_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA379_18 = input.LA(1);

                         
                        int index379_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA379_19 = input.LA(1);

                         
                        int index379_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA379_20 = input.LA(1);

                         
                        int index379_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA379_21 = input.LA(1);

                         
                        int index379_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA379_22 = input.LA(1);

                         
                        int index379_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA379_23 = input.LA(1);

                         
                        int index379_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA379_24 = input.LA(1);

                         
                        int index379_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA379_25 = input.LA(1);

                         
                        int index379_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA379_26 = input.LA(1);

                         
                        int index379_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA379_27 = input.LA(1);

                         
                        int index379_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA379_28 = input.LA(1);

                         
                        int index379_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA379_29 = input.LA(1);

                         
                        int index379_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA379_30 = input.LA(1);

                         
                        int index379_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index379_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 379, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_251s = "\1\14\15\uffff";
    static final String dfa_252s = "\1\67\13\0\2\uffff";
    static final String dfa_253s = "\1\150\13\0\2\uffff";
    static final String dfa_254s = "\14\uffff\1\2\1\1";
    static final String dfa_255s = "\1\uffff\1\6\1\0\1\7\1\1\1\10\1\2\1\11\1\5\1\3\1\12\1\4\2\uffff}>";
    static final String[] dfa_256s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_251 = DFA.unpackEncodedString(dfa_251s);
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[][] dfa_256 = unpackEncodedStringArray(dfa_256s);

    class DFA378 extends DFA {

        public DFA378(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 378;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_255;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "9999:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA378_2 = input.LA(1);

                         
                        int index378_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA378_4 = input.LA(1);

                         
                        int index378_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA378_6 = input.LA(1);

                         
                        int index378_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA378_9 = input.LA(1);

                         
                        int index378_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA378_11 = input.LA(1);

                         
                        int index378_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA378_8 = input.LA(1);

                         
                        int index378_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA378_1 = input.LA(1);

                         
                        int index378_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA378_3 = input.LA(1);

                         
                        int index378_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA378_5 = input.LA(1);

                         
                        int index378_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA378_7 = input.LA(1);

                         
                        int index378_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA378_10 = input.LA(1);

                         
                        int index378_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 378, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA381 extends DFA {

        public DFA381(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 381;
            this.eot = dfa_245;
            this.eof = dfa_245;
            this.min = dfa_246;
            this.max = dfa_247;
            this.accept = dfa_248;
            this.special = dfa_249;
            this.transition = dfa_250;
        }
        public String getDescription() {
            return "10023:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA381_0 = input.LA(1);

                         
                        int index381_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA381_0==Await) ) {s = 1;}

                        else if ( (LA381_0==CommercialAt) ) {s = 2;}

                        else if ( (LA381_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA381_0==Async) ) {s = 4;}

                        else if ( (LA381_0==Asterisk) && (synpred247_InternalN4JSParser())) {s = 5;}

                        
                        else if ((LA381_0>=4 && LA381_0<=126 && (s=T2S.M_31[LA381_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA381_0==Function||LA381_0==Delete||LA381_0==Typeof||LA381_0==Class||(LA381_0>=False && LA381_0<=Super)||(LA381_0>=Null && LA381_0<=True)||LA381_0==Void||LA381_0==New||LA381_0==PlusSignPlusSign||LA381_0==HyphenMinusHyphenMinus||LA381_0==SolidusEqualsSign||LA381_0==ExclamationMark||LA381_0==PlusSign||LA381_0==HyphenMinus||LA381_0==Solidus||LA381_0==LessThanSign||LA381_0==LeftSquareBracket||LA381_0==LeftCurlyBracket||LA381_0==Tilde||LA381_0==RULE_DOUBLE||(LA381_0>=RULE_HEX_INT && LA381_0<=RULE_LEGACY_OCTAL_INT)||LA381_0==RULE_SCIENTIFIC_INT||LA381_0==RULE_STRING||(LA381_0>=RULE_TEMPLATE_HEAD && LA381_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA381_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index381_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA381_1 = input.LA(1);

                         
                        int index381_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA381_2 = input.LA(1);

                         
                        int index381_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA381_3 = input.LA(1);

                         
                        int index381_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA381_4 = input.LA(1);

                         
                        int index381_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA381_6 = input.LA(1);

                         
                        int index381_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA381_7 = input.LA(1);

                         
                        int index381_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA381_8 = input.LA(1);

                         
                        int index381_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA381_9 = input.LA(1);

                         
                        int index381_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA381_10 = input.LA(1);

                         
                        int index381_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA381_11 = input.LA(1);

                         
                        int index381_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA381_12 = input.LA(1);

                         
                        int index381_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA381_13 = input.LA(1);

                         
                        int index381_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA381_14 = input.LA(1);

                         
                        int index381_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA381_15 = input.LA(1);

                         
                        int index381_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA381_16 = input.LA(1);

                         
                        int index381_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA381_17 = input.LA(1);

                         
                        int index381_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA381_18 = input.LA(1);

                         
                        int index381_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA381_19 = input.LA(1);

                         
                        int index381_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA381_20 = input.LA(1);

                         
                        int index381_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA381_21 = input.LA(1);

                         
                        int index381_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA381_22 = input.LA(1);

                         
                        int index381_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA381_23 = input.LA(1);

                         
                        int index381_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA381_24 = input.LA(1);

                         
                        int index381_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA381_25 = input.LA(1);

                         
                        int index381_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA381_26 = input.LA(1);

                         
                        int index381_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA381_27 = input.LA(1);

                         
                        int index381_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA381_28 = input.LA(1);

                         
                        int index381_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA381_29 = input.LA(1);

                         
                        int index381_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA381_30 = input.LA(1);

                         
                        int index381_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index381_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 381, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_257s = "\1\u0099\13\0\2\uffff";
    static final String dfa_258s = "\1\uffff\1\0\1\6\1\1\1\7\1\2\1\10\1\3\1\5\1\11\1\4\1\12\2\uffff}>";
    static final String[] dfa_259s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final short[] dfa_258 = DFA.unpackEncodedString(dfa_258s);
    static final short[][] dfa_259 = unpackEncodedStringArray(dfa_259s);

    class DFA380 extends DFA {

        public DFA380(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 380;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_257;
            this.accept = dfa_254;
            this.special = dfa_258;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "10104:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA380_1 = input.LA(1);

                         
                        int index380_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA380_3 = input.LA(1);

                         
                        int index380_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA380_5 = input.LA(1);

                         
                        int index380_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA380_7 = input.LA(1);

                         
                        int index380_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA380_10 = input.LA(1);

                         
                        int index380_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA380_8 = input.LA(1);

                         
                        int index380_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA380_2 = input.LA(1);

                         
                        int index380_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA380_4 = input.LA(1);

                         
                        int index380_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA380_6 = input.LA(1);

                         
                        int index380_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA380_9 = input.LA(1);

                         
                        int index380_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA380_11 = input.LA(1);

                         
                        int index380_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 380, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_260s = "\1\4\4\0\1\uffff\30\0\43\uffff";
    static final String dfa_261s = "\1\u0095\4\0\1\uffff\30\0\43\uffff";
    static final String dfa_262s = "\5\uffff\1\3\30\uffff\1\4\1\5\37\uffff\1\1\1\2";
    static final String dfa_263s = "\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_264s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\37\3\uffff\1\32\1\12\1\37\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\3\37\1\23\1\37\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\37\1\uffff\1\37\1\uffff\1\37\7\uffff\1\16\3\uffff\1\21\2\uffff\1\37\2\uffff\1\3\1\uffff\1\5\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\3\uffff\1\37\1\uffff\4\37\1\uffff\1\37\1\uffff\1\6\2\uffff\1\37\11\uffff\2\37\10\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_260 = DFA.unpackEncodedStringToUnsignedChars(dfa_260s);
    static final char[] dfa_261 = DFA.unpackEncodedStringToUnsignedChars(dfa_261s);
    static final short[] dfa_262 = DFA.unpackEncodedString(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[][] dfa_264 = unpackEncodedStringArray(dfa_264s);

    class DFA383 extends DFA {

        public DFA383(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 383;
            this.eot = dfa_245;
            this.eof = dfa_245;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "10128:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA383_0 = input.LA(1);

                         
                        int index383_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA383_0==Await) ) {s = 1;}

                        else if ( (LA383_0==CommercialAt) ) {s = 2;}

                        else if ( (LA383_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA383_0==Async) ) {s = 4;}

                        else if ( (LA383_0==Asterisk) && (synpred254_InternalN4JSParser())) {s = 5;}

                        
                        else if ((LA383_0>=4 && LA383_0<=126 && (s=T2S.M_33[LA383_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA383_0==Function||LA383_0==Delete||LA383_0==Typeof||LA383_0==Class||(LA383_0>=False && LA383_0<=Super)||(LA383_0>=Null && LA383_0<=True)||LA383_0==Void||LA383_0==New||LA383_0==PlusSignPlusSign||LA383_0==HyphenMinusHyphenMinus||LA383_0==SolidusEqualsSign||LA383_0==ExclamationMark||LA383_0==PlusSign||LA383_0==HyphenMinus||LA383_0==Solidus||LA383_0==LessThanSign||LA383_0==LeftSquareBracket||LA383_0==LeftCurlyBracket||LA383_0==Tilde||LA383_0==RULE_DOUBLE||(LA383_0>=RULE_HEX_INT && LA383_0<=RULE_LEGACY_OCTAL_INT)||LA383_0==RULE_SCIENTIFIC_INT||LA383_0==RULE_STRING||(LA383_0>=RULE_TEMPLATE_HEAD && LA383_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA383_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index383_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA383_1 = input.LA(1);

                         
                        int index383_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA383_2 = input.LA(1);

                         
                        int index383_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA383_3 = input.LA(1);

                         
                        int index383_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA383_4 = input.LA(1);

                         
                        int index383_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA383_6 = input.LA(1);

                         
                        int index383_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA383_7 = input.LA(1);

                         
                        int index383_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA383_8 = input.LA(1);

                         
                        int index383_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA383_9 = input.LA(1);

                         
                        int index383_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA383_10 = input.LA(1);

                         
                        int index383_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA383_11 = input.LA(1);

                         
                        int index383_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA383_12 = input.LA(1);

                         
                        int index383_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA383_13 = input.LA(1);

                         
                        int index383_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA383_14 = input.LA(1);

                         
                        int index383_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA383_15 = input.LA(1);

                         
                        int index383_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA383_16 = input.LA(1);

                         
                        int index383_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA383_17 = input.LA(1);

                         
                        int index383_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA383_18 = input.LA(1);

                         
                        int index383_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA383_19 = input.LA(1);

                         
                        int index383_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA383_20 = input.LA(1);

                         
                        int index383_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA383_21 = input.LA(1);

                         
                        int index383_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA383_22 = input.LA(1);

                         
                        int index383_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA383_23 = input.LA(1);

                         
                        int index383_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA383_24 = input.LA(1);

                         
                        int index383_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA383_25 = input.LA(1);

                         
                        int index383_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA383_26 = input.LA(1);

                         
                        int index383_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA383_27 = input.LA(1);

                         
                        int index383_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA383_28 = input.LA(1);

                         
                        int index383_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA383_29 = input.LA(1);

                         
                        int index383_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index383_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 383, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_265s = "\1\uffff\1\10\1\0\1\4\1\6\1\11\1\1\1\5\1\3\1\7\1\12\1\2\2\uffff}>";
    static final short[] dfa_265 = DFA.unpackEncodedString(dfa_265s);

    class DFA382 extends DFA {

        public DFA382(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 382;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_265;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "10211:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA382_2 = input.LA(1);

                         
                        int index382_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA382_6 = input.LA(1);

                         
                        int index382_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA382_11 = input.LA(1);

                         
                        int index382_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA382_8 = input.LA(1);

                         
                        int index382_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA382_3 = input.LA(1);

                         
                        int index382_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA382_7 = input.LA(1);

                         
                        int index382_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA382_4 = input.LA(1);

                         
                        int index382_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA382_9 = input.LA(1);

                         
                        int index382_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA382_1 = input.LA(1);

                         
                        int index382_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA382_5 = input.LA(1);

                         
                        int index382_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA382_10 = input.LA(1);

                         
                        int index382_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index382_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 382, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA385 extends DFA {

        public DFA385(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 385;
            this.eot = dfa_245;
            this.eof = dfa_245;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "10235:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( ( ( LeftParenthesis )=> LeftParenthesis ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Async )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( Asterisk )=> ( ( ( Asterisk ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA385_0 = input.LA(1);

                         
                        int index385_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA385_0==Await) ) {s = 1;}

                        else if ( (LA385_0==CommercialAt) ) {s = 2;}

                        else if ( (LA385_0==LeftParenthesis) ) {s = 3;}

                        else if ( (LA385_0==Async) ) {s = 4;}

                        else if ( (LA385_0==Asterisk) && (synpred261_InternalN4JSParser())) {s = 5;}

                        
                        else if ((LA385_0>=4 && LA385_0<=126 && (s=T2S.M_33[LA385_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA385_0==Function||LA385_0==Delete||LA385_0==Typeof||LA385_0==Class||(LA385_0>=False && LA385_0<=Super)||(LA385_0>=Null && LA385_0<=True)||LA385_0==Void||LA385_0==New||LA385_0==PlusSignPlusSign||LA385_0==HyphenMinusHyphenMinus||LA385_0==SolidusEqualsSign||LA385_0==ExclamationMark||LA385_0==PlusSign||LA385_0==HyphenMinus||LA385_0==Solidus||LA385_0==LessThanSign||LA385_0==LeftSquareBracket||LA385_0==LeftCurlyBracket||LA385_0==Tilde||LA385_0==RULE_DOUBLE||(LA385_0>=RULE_HEX_INT && LA385_0<=RULE_LEGACY_OCTAL_INT)||LA385_0==RULE_SCIENTIFIC_INT||LA385_0==RULE_STRING||(LA385_0>=RULE_TEMPLATE_HEAD && LA385_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA385_0==RULE_INT) ) {s = 31;}

                         
                        input.seek(index385_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA385_1 = input.LA(1);

                         
                        int index385_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA385_2 = input.LA(1);

                         
                        int index385_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA385_3 = input.LA(1);

                         
                        int index385_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA385_4 = input.LA(1);

                         
                        int index385_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA385_6 = input.LA(1);

                         
                        int index385_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA385_7 = input.LA(1);

                         
                        int index385_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA385_8 = input.LA(1);

                         
                        int index385_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA385_9 = input.LA(1);

                         
                        int index385_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA385_10 = input.LA(1);

                         
                        int index385_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA385_11 = input.LA(1);

                         
                        int index385_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA385_12 = input.LA(1);

                         
                        int index385_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA385_13 = input.LA(1);

                         
                        int index385_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA385_14 = input.LA(1);

                         
                        int index385_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA385_15 = input.LA(1);

                         
                        int index385_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA385_16 = input.LA(1);

                         
                        int index385_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA385_17 = input.LA(1);

                         
                        int index385_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA385_18 = input.LA(1);

                         
                        int index385_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA385_19 = input.LA(1);

                         
                        int index385_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA385_20 = input.LA(1);

                         
                        int index385_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA385_21 = input.LA(1);

                         
                        int index385_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA385_22 = input.LA(1);

                         
                        int index385_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA385_23 = input.LA(1);

                         
                        int index385_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA385_24 = input.LA(1);

                         
                        int index385_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA385_25 = input.LA(1);

                         
                        int index385_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA385_26 = input.LA(1);

                         
                        int index385_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA385_27 = input.LA(1);

                         
                        int index385_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA385_28 = input.LA(1);

                         
                        int index385_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA385_29 = input.LA(1);

                         
                        int index385_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 5;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index385_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 385, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_266s = "\1\uffff\1\5\1\10\1\0\1\3\1\6\1\11\1\1\1\2\1\4\1\7\1\12\2\uffff}>";
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);

    class DFA384 extends DFA {

        public DFA384(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 384;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_257;
            this.accept = dfa_254;
            this.special = dfa_266;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "10318:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA384_3 = input.LA(1);

                         
                        int index384_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA384_7 = input.LA(1);

                         
                        int index384_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA384_8 = input.LA(1);

                         
                        int index384_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA384_4 = input.LA(1);

                         
                        int index384_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA384_9 = input.LA(1);

                         
                        int index384_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA384_1 = input.LA(1);

                         
                        int index384_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA384_5 = input.LA(1);

                         
                        int index384_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA384_10 = input.LA(1);

                         
                        int index384_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA384_2 = input.LA(1);

                         
                        int index384_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA384_6 = input.LA(1);

                         
                        int index384_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA384_11 = input.LA(1);

                         
                        int index384_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index384_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 384, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_267s = "\116\uffff";
    static final String dfa_268s = "\1\2\115\uffff";
    static final String dfa_269s = "\1\4\1\0\114\uffff";
    static final String dfa_270s = "\1\u0095\1\0\114\uffff";
    static final String dfa_271s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_272s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_273s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\3\uffff\1\2\2\uffff\5\2\3\uffff\1\2\1\uffff\7\2\6\uffff\2\2\2\uffff\3\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\1\3\2\1\uffff\1\2\1\uffff\4\2\1\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[] dfa_268 = DFA.unpackEncodedString(dfa_268s);
    static final char[] dfa_269 = DFA.unpackEncodedStringToUnsignedChars(dfa_269s);
    static final char[] dfa_270 = DFA.unpackEncodedStringToUnsignedChars(dfa_270s);
    static final short[] dfa_271 = DFA.unpackEncodedString(dfa_271s);
    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final short[][] dfa_273 = unpackEncodedStringArray(dfa_273s);

    class DFA386 extends DFA {

        public DFA386(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 386;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_273;
        }
        public String getDescription() {
            return "10349:117: ( ( ( Asterisk ) )=> (ManyAsteriskKeyword_2_0= Asterisk ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA386_1 = input.LA(1);

                         
                        int index386_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index386_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 386, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_274s = "\1\77\114\uffff";
    static final String dfa_275s = "\1\4\20\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_276s = "\1\u0095\20\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_277s = "\1\uffff\20\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_278s = "\1\0\20\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_279s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\1\55\1\40\1\52\1\23\1\67\3\uffff\1\77\2\uffff\1\7\1\11\1\37\1\35\1\10\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\77\1\57\6\uffff\1\77\1\16\2\uffff\1\77\1\21\1\77\1\uffff\1\76\2\uffff\1\3\1\uffff\1\5\1\73\1\77\1\74\1\uffff\1\56\1\uffff\1\77\1\42\2\77\1\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[][] dfa_279 = unpackEncodedStringArray(dfa_279s);

    class DFA387 extends DFA {

        public DFA387(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 387;
            this.eot = dfa_177;
            this.eof = dfa_274;
            this.min = dfa_275;
            this.max = dfa_276;
            this.accept = dfa_277;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "10361:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA387_0 = input.LA(1);

                         
                        int index387_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA387_0>=5 && LA387_0<=126 && (s=T2S.M_35[LA387_0-(5)])>=0) && (synpred264_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA387_0==Of) ) {s = 17;}

                        
                        else if ((LA387_0>=4 && LA387_0<=149 && (s=T2S.M_36[LA387_0-(4)])>=0) && (synpred264_InternalN4JSParser())) { /* 30 cases */ }
                        else if ( (LA387_0==SolidusEqualsSign) ) {s = 47;}

                        
                        else if ((LA387_0>=15 && LA387_0<=140 && (s=T2S.M_37[LA387_0-(15)])>=0) && (synpred264_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA387_0==EOF||LA387_0==LessThanSignLessThanSignEqualsSign||LA387_0==PercentSignEqualsSign||(LA387_0>=AmpersandEqualsSign && LA387_0<=AsteriskEqualsSign)||LA387_0==PlusSignEqualsSign||LA387_0==HyphenMinusEqualsSign||LA387_0==CircumflexAccentEqualsSign||LA387_0==In||LA387_0==VerticalLineEqualsSign||LA387_0==Comma||LA387_0==Semicolon||(LA387_0>=EqualsSign && LA387_0<=GreaterThanSign)) ) {s = 63;}

                         
                        input.seek(index387_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA387_17 = input.LA(1);

                         
                        int index387_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index387_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA387_47 = input.LA(1);

                         
                        int index387_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index387_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 387, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_280s = "\123\uffff";
    static final String dfa_281s = "\1\2\122\uffff";
    static final String dfa_282s = "\1\4\1\0\121\uffff";
    static final String dfa_283s = "\1\u0099\1\0\121\uffff";
    static final String dfa_284s = "\2\uffff\1\2\117\uffff\1\1";
    static final String dfa_285s = "\1\uffff\1\0\121\uffff}>";
    static final String[] dfa_286s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\3\uffff\1\2\2\uffff\5\2\3\uffff\1\2\1\uffff\7\2\6\uffff\2\2\3\uffff\2\2\1\uffff\1\2\2\uffff\2\2\1\1\3\2\1\uffff\6\2\1\uffff\3\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final char[] dfa_283 = DFA.unpackEncodedStringToUnsignedChars(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final short[][] dfa_286 = unpackEncodedStringArray(dfa_286s);

    class DFA388 extends DFA {

        public DFA388(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 388;
            this.eot = dfa_280;
            this.eof = dfa_281;
            this.min = dfa_282;
            this.max = dfa_283;
            this.accept = dfa_284;
            this.special = dfa_285;
            this.transition = dfa_286;
        }
        public String getDescription() {
            return "10429:117: ( ( ( Asterisk ) )=> (ManyAsteriskKeyword_2_0= Asterisk ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA388_1 = input.LA(1);

                         
                        int index388_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index388_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 388, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_287s = "\122\uffff";
    static final String dfa_288s = "\1\77\121\uffff";
    static final String dfa_289s = "\1\4\56\uffff\1\0\42\uffff";
    static final String dfa_290s = "\1\u0099\56\uffff\1\0\42\uffff";
    static final String dfa_291s = "\1\uffff\56\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_292s = "\1\0\56\uffff\1\1\42\uffff}>";
    static final String[] dfa_293s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\41\1\uffff\1\24\1\uffff\1\36\1\26\3\uffff\1\17\1\55\1\40\1\52\1\23\1\67\3\uffff\1\77\2\uffff\1\7\1\11\1\37\1\35\1\10\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\77\1\57\6\uffff\1\77\1\16\3\uffff\1\21\1\77\1\uffff\1\76\2\uffff\1\3\1\77\1\5\1\73\1\77\1\74\1\uffff\1\56\2\77\1\42\2\77\1\uffff\1\2\1\60\1\77\1\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\65\1\64\10\uffff\1\44\1\uffff\1\77\1\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[][] dfa_293 = unpackEncodedStringArray(dfa_293s);

    class DFA389 extends DFA {

        public DFA389(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 389;
            this.eot = dfa_287;
            this.eof = dfa_288;
            this.min = dfa_289;
            this.max = dfa_290;
            this.accept = dfa_291;
            this.special = dfa_292;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "10441:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Asterisk | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA389_0 = input.LA(1);

                         
                        int index389_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA389_0>=4 && LA389_0<=149 && (s=T2S.M_38[LA389_0-(4)])>=0) && (synpred266_InternalN4JSParser())) { /* 46 cases */ }
                        else if ( (LA389_0==SolidusEqualsSign) ) {s = 47;}

                        
                        else if ((LA389_0>=15 && LA389_0<=140 && (s=T2S.M_37[LA389_0-(15)])>=0) && (synpred266_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA389_0==EOF||LA389_0==LessThanSignLessThanSignEqualsSign||LA389_0==PercentSignEqualsSign||(LA389_0>=AmpersandEqualsSign && LA389_0<=AsteriskEqualsSign)||LA389_0==PlusSignEqualsSign||LA389_0==HyphenMinusEqualsSign||LA389_0==CircumflexAccentEqualsSign||LA389_0==VerticalLineEqualsSign||LA389_0==RightParenthesis||LA389_0==Comma||(LA389_0>=Colon && LA389_0<=Semicolon)||(LA389_0>=EqualsSign && LA389_0<=GreaterThanSign)||LA389_0==RightSquareBracket||LA389_0==RightCurlyBracket||LA389_0==RULE_ML_COMMENT||LA389_0==RULE_EOL) ) {s = 63;}

                         
                        input.seek(index389_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA389_47 = input.LA(1);

                         
                        int index389_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index389_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 389, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_294s = "\136\uffff";
    static final String dfa_295s = "\1\2\135\uffff";
    static final String dfa_296s = "\1\4\1\0\134\uffff";
    static final String dfa_297s = "\1\u0095\1\0\134\uffff";
    static final String dfa_298s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_299s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_300s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_294 = DFA.unpackEncodedString(dfa_294s);
    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final char[] dfa_297 = DFA.unpackEncodedStringToUnsignedChars(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[][] dfa_300 = unpackEncodedStringArray(dfa_300s);

    class DFA420 extends DFA {

        public DFA420(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 420;
            this.eot = dfa_294;
            this.eof = dfa_295;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "11574:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA420_1 = input.LA(1);

                         
                        int index420_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index420_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 420, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_301s = "\1\4\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_302s = "\1\u0095\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_303s = "\1\uffff\1\1\30\uffff\2\4\55\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_304s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\4\uffff}>";
    static final String[] dfa_305s = {
            "\1\26\1\23\1\103\1\57\1\15\1\104\1\4\1\7\1\41\1\42\1\6\1\53\1\43\1\50\1\51\1\2\1\3\1\44\1\47\1\55\1\5\1\61\1\10\1\63\1\16\1\66\1\34\1\14\1\35\1\37\1\40\1\11\1\75\1\62\1\64\1\25\1\70\1\72\1\13\1\36\1\46\1\76\1\101\1\73\1\21\1\74\1\22\1\12\1\71\4\uffff\1\52\1\30\1\77\1\60\1\105\1\31\1\65\1\67\21\uffff\1\100\1\45\1\54\1\56\1\102\5\uffff\1\111\1\uffff\1\33\7\uffff\1\32\2\uffff\1\27\1\1\1\110\2\uffff\1\24\2\uffff\1\20\3\uffff\1\107\1\uffff\1\107\1\uffff\1\107\2\uffff\1\107\1\uffff\1\17\2\uffff\1\106\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final char[] dfa_302 = DFA.unpackEncodedStringToUnsignedChars(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[] dfa_304 = DFA.unpackEncodedString(dfa_304s);
    static final short[][] dfa_305 = unpackEncodedStringArray(dfa_305s);

    class DFA462 extends DFA {

        public DFA462(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 462;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_304;
            this.transition = dfa_305;
        }
        public String getDescription() {
            return "12202:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA462_0 = input.LA(1);

                         
                        int index462_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_0>=4 && LA462_0<=126 && (s=T2S.M_40[LA462_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA462_0==LessThanSign) && (synpred285_InternalN4JSParser())) {s = 26;}

                        else if ( (LA462_0==Asterisk) && (synpred285_InternalN4JSParser())) {s = 27;}

                        
                        else if ((LA462_0>=6 && LA462_0<=129 && (s=T2S.M_41[LA462_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA462_0==RULE_DOUBLE||LA462_0==RULE_HEX_INT||LA462_0==RULE_OCTAL_INT||LA462_0==RULE_SCIENTIFIC_INT||LA462_0==RULE_INT) ) {s = 71;}

                        else if ( (LA462_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA462_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index462_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA462_2 = input.LA(1);

                         
                        int index462_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA462_3 = input.LA(1);

                         
                        int index462_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA462_4 = input.LA(1);

                         
                        int index462_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA462_5 = input.LA(1);

                         
                        int index462_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA462_6 = input.LA(1);

                         
                        int index462_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA462_7 = input.LA(1);

                         
                        int index462_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA462_8 = input.LA(1);

                         
                        int index462_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA462_9 = input.LA(1);

                         
                        int index462_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA462_10 = input.LA(1);

                         
                        int index462_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA462_11 = input.LA(1);

                         
                        int index462_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA462_12 = input.LA(1);

                         
                        int index462_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA462_13 = input.LA(1);

                         
                        int index462_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA462_14 = input.LA(1);

                         
                        int index462_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA462_15 = input.LA(1);

                         
                        int index462_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA462_16 = input.LA(1);

                         
                        int index462_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA462_17 = input.LA(1);

                         
                        int index462_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA462_18 = input.LA(1);

                         
                        int index462_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA462_19 = input.LA(1);

                         
                        int index462_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA462_20 = input.LA(1);

                         
                        int index462_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA462_21 = input.LA(1);

                         
                        int index462_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA462_22 = input.LA(1);

                         
                        int index462_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA462_23 = input.LA(1);

                         
                        int index462_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA462_24 = input.LA(1);

                         
                        int index462_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA462_25 = input.LA(1);

                         
                        int index462_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA462_28 = input.LA(1);

                         
                        int index462_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA462_29 = input.LA(1);

                         
                        int index462_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA462_30 = input.LA(1);

                         
                        int index462_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA462_31 = input.LA(1);

                         
                        int index462_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA462_32 = input.LA(1);

                         
                        int index462_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA462_33 = input.LA(1);

                         
                        int index462_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA462_34 = input.LA(1);

                         
                        int index462_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA462_35 = input.LA(1);

                         
                        int index462_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA462_36 = input.LA(1);

                         
                        int index462_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA462_37 = input.LA(1);

                         
                        int index462_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA462_38 = input.LA(1);

                         
                        int index462_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA462_39 = input.LA(1);

                         
                        int index462_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA462_40 = input.LA(1);

                         
                        int index462_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA462_41 = input.LA(1);

                         
                        int index462_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA462_42 = input.LA(1);

                         
                        int index462_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA462_43 = input.LA(1);

                         
                        int index462_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA462_44 = input.LA(1);

                         
                        int index462_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA462_45 = input.LA(1);

                         
                        int index462_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA462_46 = input.LA(1);

                         
                        int index462_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA462_47 = input.LA(1);

                         
                        int index462_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA462_48 = input.LA(1);

                         
                        int index462_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA462_49 = input.LA(1);

                         
                        int index462_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA462_50 = input.LA(1);

                         
                        int index462_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA462_51 = input.LA(1);

                         
                        int index462_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA462_52 = input.LA(1);

                         
                        int index462_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA462_53 = input.LA(1);

                         
                        int index462_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA462_54 = input.LA(1);

                         
                        int index462_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA462_55 = input.LA(1);

                         
                        int index462_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA462_56 = input.LA(1);

                         
                        int index462_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA462_57 = input.LA(1);

                         
                        int index462_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA462_58 = input.LA(1);

                         
                        int index462_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA462_59 = input.LA(1);

                         
                        int index462_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA462_60 = input.LA(1);

                         
                        int index462_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA462_61 = input.LA(1);

                         
                        int index462_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA462_62 = input.LA(1);

                         
                        int index462_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA462_63 = input.LA(1);

                         
                        int index462_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA462_64 = input.LA(1);

                         
                        int index462_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA462_65 = input.LA(1);

                         
                        int index462_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA462_66 = input.LA(1);

                         
                        int index462_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA462_67 = input.LA(1);

                         
                        int index462_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA462_68 = input.LA(1);

                         
                        int index462_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA462_69 = input.LA(1);

                         
                        int index462_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA462_70 = input.LA(1);

                         
                        int index462_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA462_71 = input.LA(1);

                         
                        int index462_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA462_72 = input.LA(1);

                         
                        int index462_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index462_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 462, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA463 extends DFA {

        public DFA463(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 463;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_304;
            this.transition = dfa_305;
        }
        public String getDescription() {
            return "12387:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA463_0 = input.LA(1);

                         
                        int index463_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_0>=4 && LA463_0<=126 && (s=T2S.M_40[LA463_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA463_0==LessThanSign) && (synpred288_InternalN4JSParser())) {s = 26;}

                        else if ( (LA463_0==Asterisk) && (synpred288_InternalN4JSParser())) {s = 27;}

                        
                        else if ((LA463_0>=6 && LA463_0<=129 && (s=T2S.M_41[LA463_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA463_0==RULE_DOUBLE||LA463_0==RULE_HEX_INT||LA463_0==RULE_OCTAL_INT||LA463_0==RULE_SCIENTIFIC_INT||LA463_0==RULE_INT) ) {s = 71;}

                        else if ( (LA463_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA463_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index463_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA463_2 = input.LA(1);

                         
                        int index463_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA463_3 = input.LA(1);

                         
                        int index463_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA463_4 = input.LA(1);

                         
                        int index463_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA463_5 = input.LA(1);

                         
                        int index463_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA463_6 = input.LA(1);

                         
                        int index463_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA463_7 = input.LA(1);

                         
                        int index463_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA463_8 = input.LA(1);

                         
                        int index463_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA463_9 = input.LA(1);

                         
                        int index463_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA463_10 = input.LA(1);

                         
                        int index463_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA463_11 = input.LA(1);

                         
                        int index463_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA463_12 = input.LA(1);

                         
                        int index463_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA463_13 = input.LA(1);

                         
                        int index463_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA463_14 = input.LA(1);

                         
                        int index463_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA463_15 = input.LA(1);

                         
                        int index463_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA463_16 = input.LA(1);

                         
                        int index463_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA463_17 = input.LA(1);

                         
                        int index463_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA463_18 = input.LA(1);

                         
                        int index463_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA463_19 = input.LA(1);

                         
                        int index463_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA463_20 = input.LA(1);

                         
                        int index463_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA463_21 = input.LA(1);

                         
                        int index463_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA463_22 = input.LA(1);

                         
                        int index463_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA463_23 = input.LA(1);

                         
                        int index463_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA463_24 = input.LA(1);

                         
                        int index463_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA463_25 = input.LA(1);

                         
                        int index463_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA463_28 = input.LA(1);

                         
                        int index463_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA463_29 = input.LA(1);

                         
                        int index463_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA463_30 = input.LA(1);

                         
                        int index463_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA463_31 = input.LA(1);

                         
                        int index463_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA463_32 = input.LA(1);

                         
                        int index463_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA463_33 = input.LA(1);

                         
                        int index463_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA463_34 = input.LA(1);

                         
                        int index463_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA463_35 = input.LA(1);

                         
                        int index463_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA463_36 = input.LA(1);

                         
                        int index463_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA463_37 = input.LA(1);

                         
                        int index463_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA463_38 = input.LA(1);

                         
                        int index463_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA463_39 = input.LA(1);

                         
                        int index463_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA463_40 = input.LA(1);

                         
                        int index463_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA463_41 = input.LA(1);

                         
                        int index463_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA463_42 = input.LA(1);

                         
                        int index463_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA463_43 = input.LA(1);

                         
                        int index463_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA463_44 = input.LA(1);

                         
                        int index463_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA463_45 = input.LA(1);

                         
                        int index463_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA463_46 = input.LA(1);

                         
                        int index463_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA463_47 = input.LA(1);

                         
                        int index463_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA463_48 = input.LA(1);

                         
                        int index463_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA463_49 = input.LA(1);

                         
                        int index463_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA463_50 = input.LA(1);

                         
                        int index463_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA463_51 = input.LA(1);

                         
                        int index463_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA463_52 = input.LA(1);

                         
                        int index463_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA463_53 = input.LA(1);

                         
                        int index463_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA463_54 = input.LA(1);

                         
                        int index463_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA463_55 = input.LA(1);

                         
                        int index463_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA463_56 = input.LA(1);

                         
                        int index463_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA463_57 = input.LA(1);

                         
                        int index463_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA463_58 = input.LA(1);

                         
                        int index463_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA463_59 = input.LA(1);

                         
                        int index463_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA463_60 = input.LA(1);

                         
                        int index463_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA463_61 = input.LA(1);

                         
                        int index463_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA463_62 = input.LA(1);

                         
                        int index463_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA463_63 = input.LA(1);

                         
                        int index463_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA463_64 = input.LA(1);

                         
                        int index463_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA463_65 = input.LA(1);

                         
                        int index463_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA463_66 = input.LA(1);

                         
                        int index463_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA463_67 = input.LA(1);

                         
                        int index463_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA463_68 = input.LA(1);

                         
                        int index463_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA463_69 = input.LA(1);

                         
                        int index463_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA463_70 = input.LA(1);

                         
                        int index463_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA463_71 = input.LA(1);

                         
                        int index463_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA463_72 = input.LA(1);

                         
                        int index463_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index463_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 463, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_306s = "\113\uffff";
    static final String dfa_307s = "\1\4\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_308s = "\1\u0095\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_309s = "\31\uffff\2\3\55\uffff\1\1\1\2\1\4";
    static final String dfa_310s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\3\uffff}>";
    static final String[] dfa_311s = {
            "\1\25\1\22\1\102\1\56\1\14\1\103\1\3\1\6\1\40\1\41\1\5\1\52\1\42\1\47\1\50\1\1\1\2\1\43\1\46\1\54\1\4\1\60\1\7\1\62\1\15\1\65\1\33\1\13\1\34\1\36\1\37\1\10\1\74\1\61\1\63\1\24\1\67\1\71\1\12\1\35\1\45\1\75\1\100\1\72\1\20\1\73\1\21\1\11\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\7\uffff\1\32\7\uffff\1\31\2\uffff\1\26\1\uffff\1\107\2\uffff\1\23\2\uffff\1\17\3\uffff\1\106\1\uffff\1\106\1\uffff\1\106\2\uffff\1\106\1\uffff\1\16\2\uffff\1\105\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[][] dfa_311 = unpackEncodedStringArray(dfa_311s);

    class DFA475 extends DFA {

        public DFA475(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 475;
            this.eot = dfa_306;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "12579:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA475_0 = input.LA(1);

                         
                        int index475_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA475_0>=4 && LA475_0<=126 && (s=T2S.M_44[LA475_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA475_0==LessThanSign) && (synpred294_InternalN4JSParser())) {s = 25;}

                        else if ( (LA475_0==Asterisk) && (synpred294_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA475_0>=6 && LA475_0<=129 && (s=T2S.M_45[LA475_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA475_0==RULE_DOUBLE||LA475_0==RULE_HEX_INT||LA475_0==RULE_OCTAL_INT||LA475_0==RULE_SCIENTIFIC_INT||LA475_0==RULE_INT) ) {s = 70;}

                        else if ( (LA475_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index475_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA475_1 = input.LA(1);

                         
                        int index475_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA475_2 = input.LA(1);

                         
                        int index475_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA475_3 = input.LA(1);

                         
                        int index475_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA475_4 = input.LA(1);

                         
                        int index475_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA475_5 = input.LA(1);

                         
                        int index475_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA475_6 = input.LA(1);

                         
                        int index475_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA475_7 = input.LA(1);

                         
                        int index475_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA475_8 = input.LA(1);

                         
                        int index475_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA475_9 = input.LA(1);

                         
                        int index475_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA475_10 = input.LA(1);

                         
                        int index475_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA475_11 = input.LA(1);

                         
                        int index475_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA475_12 = input.LA(1);

                         
                        int index475_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA475_13 = input.LA(1);

                         
                        int index475_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA475_14 = input.LA(1);

                         
                        int index475_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA475_15 = input.LA(1);

                         
                        int index475_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA475_16 = input.LA(1);

                         
                        int index475_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA475_17 = input.LA(1);

                         
                        int index475_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA475_18 = input.LA(1);

                         
                        int index475_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA475_19 = input.LA(1);

                         
                        int index475_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA475_20 = input.LA(1);

                         
                        int index475_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA475_21 = input.LA(1);

                         
                        int index475_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA475_22 = input.LA(1);

                         
                        int index475_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA475_23 = input.LA(1);

                         
                        int index475_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA475_24 = input.LA(1);

                         
                        int index475_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA475_27 = input.LA(1);

                         
                        int index475_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA475_28 = input.LA(1);

                         
                        int index475_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA475_29 = input.LA(1);

                         
                        int index475_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA475_30 = input.LA(1);

                         
                        int index475_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA475_31 = input.LA(1);

                         
                        int index475_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA475_32 = input.LA(1);

                         
                        int index475_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA475_33 = input.LA(1);

                         
                        int index475_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA475_34 = input.LA(1);

                         
                        int index475_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA475_35 = input.LA(1);

                         
                        int index475_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA475_36 = input.LA(1);

                         
                        int index475_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA475_37 = input.LA(1);

                         
                        int index475_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA475_38 = input.LA(1);

                         
                        int index475_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA475_39 = input.LA(1);

                         
                        int index475_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA475_40 = input.LA(1);

                         
                        int index475_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA475_41 = input.LA(1);

                         
                        int index475_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA475_42 = input.LA(1);

                         
                        int index475_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA475_43 = input.LA(1);

                         
                        int index475_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA475_44 = input.LA(1);

                         
                        int index475_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA475_45 = input.LA(1);

                         
                        int index475_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA475_46 = input.LA(1);

                         
                        int index475_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA475_47 = input.LA(1);

                         
                        int index475_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA475_48 = input.LA(1);

                         
                        int index475_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA475_49 = input.LA(1);

                         
                        int index475_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA475_50 = input.LA(1);

                         
                        int index475_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA475_51 = input.LA(1);

                         
                        int index475_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA475_52 = input.LA(1);

                         
                        int index475_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA475_53 = input.LA(1);

                         
                        int index475_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA475_54 = input.LA(1);

                         
                        int index475_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA475_55 = input.LA(1);

                         
                        int index475_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA475_56 = input.LA(1);

                         
                        int index475_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA475_57 = input.LA(1);

                         
                        int index475_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA475_58 = input.LA(1);

                         
                        int index475_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA475_59 = input.LA(1);

                         
                        int index475_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA475_60 = input.LA(1);

                         
                        int index475_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA475_61 = input.LA(1);

                         
                        int index475_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA475_62 = input.LA(1);

                         
                        int index475_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA475_63 = input.LA(1);

                         
                        int index475_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA475_64 = input.LA(1);

                         
                        int index475_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA475_65 = input.LA(1);

                         
                        int index475_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA475_66 = input.LA(1);

                         
                        int index475_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA475_67 = input.LA(1);

                         
                        int index475_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA475_68 = input.LA(1);

                         
                        int index475_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA475_69 = input.LA(1);

                         
                        int index475_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA475_70 = input.LA(1);

                         
                        int index475_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA475_71 = input.LA(1);

                         
                        int index475_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index475_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 475, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_312s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_312 = unpackEncodedStringArray(dfa_312s);

    class DFA465 extends DFA {

        public DFA465(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 465;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "12588:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA465_1 = input.LA(1);

                         
                        int index465_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index465_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 465, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA468 extends DFA {

        public DFA468(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 468;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "12810:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA468_1 = input.LA(1);

                         
                        int index468_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index468_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 468, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_313s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_314s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_315s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_316s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final char[] dfa_314 = DFA.unpackEncodedStringToUnsignedChars(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 12838:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA472 extends DFA {

        public DFA472(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 472;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12843:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA487 extends DFA {

        public DFA487(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 487;
            this.eot = dfa_306;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "12880:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA487_0 = input.LA(1);

                         
                        int index487_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA487_0>=4 && LA487_0<=126 && (s=T2S.M_44[LA487_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA487_0==LessThanSign) && (synpred302_InternalN4JSParser())) {s = 25;}

                        else if ( (LA487_0==Asterisk) && (synpred302_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA487_0>=6 && LA487_0<=129 && (s=T2S.M_45[LA487_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA487_0==RULE_DOUBLE||LA487_0==RULE_HEX_INT||LA487_0==RULE_OCTAL_INT||LA487_0==RULE_SCIENTIFIC_INT||LA487_0==RULE_INT) ) {s = 70;}

                        else if ( (LA487_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index487_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA487_1 = input.LA(1);

                         
                        int index487_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA487_2 = input.LA(1);

                         
                        int index487_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA487_3 = input.LA(1);

                         
                        int index487_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA487_4 = input.LA(1);

                         
                        int index487_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA487_5 = input.LA(1);

                         
                        int index487_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA487_6 = input.LA(1);

                         
                        int index487_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA487_7 = input.LA(1);

                         
                        int index487_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA487_8 = input.LA(1);

                         
                        int index487_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA487_9 = input.LA(1);

                         
                        int index487_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA487_10 = input.LA(1);

                         
                        int index487_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA487_11 = input.LA(1);

                         
                        int index487_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA487_12 = input.LA(1);

                         
                        int index487_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA487_13 = input.LA(1);

                         
                        int index487_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA487_14 = input.LA(1);

                         
                        int index487_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA487_15 = input.LA(1);

                         
                        int index487_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA487_16 = input.LA(1);

                         
                        int index487_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA487_17 = input.LA(1);

                         
                        int index487_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA487_18 = input.LA(1);

                         
                        int index487_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA487_19 = input.LA(1);

                         
                        int index487_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA487_20 = input.LA(1);

                         
                        int index487_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA487_21 = input.LA(1);

                         
                        int index487_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA487_22 = input.LA(1);

                         
                        int index487_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA487_23 = input.LA(1);

                         
                        int index487_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA487_24 = input.LA(1);

                         
                        int index487_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA487_27 = input.LA(1);

                         
                        int index487_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA487_28 = input.LA(1);

                         
                        int index487_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA487_29 = input.LA(1);

                         
                        int index487_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA487_30 = input.LA(1);

                         
                        int index487_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA487_31 = input.LA(1);

                         
                        int index487_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA487_32 = input.LA(1);

                         
                        int index487_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA487_33 = input.LA(1);

                         
                        int index487_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA487_34 = input.LA(1);

                         
                        int index487_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA487_35 = input.LA(1);

                         
                        int index487_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA487_36 = input.LA(1);

                         
                        int index487_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA487_37 = input.LA(1);

                         
                        int index487_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA487_38 = input.LA(1);

                         
                        int index487_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA487_39 = input.LA(1);

                         
                        int index487_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA487_40 = input.LA(1);

                         
                        int index487_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA487_41 = input.LA(1);

                         
                        int index487_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA487_42 = input.LA(1);

                         
                        int index487_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA487_43 = input.LA(1);

                         
                        int index487_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA487_44 = input.LA(1);

                         
                        int index487_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA487_45 = input.LA(1);

                         
                        int index487_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA487_46 = input.LA(1);

                         
                        int index487_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA487_47 = input.LA(1);

                         
                        int index487_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA487_48 = input.LA(1);

                         
                        int index487_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA487_49 = input.LA(1);

                         
                        int index487_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA487_50 = input.LA(1);

                         
                        int index487_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA487_51 = input.LA(1);

                         
                        int index487_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA487_52 = input.LA(1);

                         
                        int index487_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA487_53 = input.LA(1);

                         
                        int index487_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA487_54 = input.LA(1);

                         
                        int index487_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA487_55 = input.LA(1);

                         
                        int index487_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA487_56 = input.LA(1);

                         
                        int index487_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA487_57 = input.LA(1);

                         
                        int index487_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA487_58 = input.LA(1);

                         
                        int index487_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA487_59 = input.LA(1);

                         
                        int index487_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA487_60 = input.LA(1);

                         
                        int index487_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA487_61 = input.LA(1);

                         
                        int index487_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA487_62 = input.LA(1);

                         
                        int index487_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA487_63 = input.LA(1);

                         
                        int index487_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA487_64 = input.LA(1);

                         
                        int index487_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA487_65 = input.LA(1);

                         
                        int index487_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA487_66 = input.LA(1);

                         
                        int index487_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA487_67 = input.LA(1);

                         
                        int index487_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA487_68 = input.LA(1);

                         
                        int index487_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA487_69 = input.LA(1);

                         
                        int index487_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA487_70 = input.LA(1);

                         
                        int index487_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA487_71 = input.LA(1);

                         
                        int index487_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index487_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 487, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\1\4\1\0\113\uffff";
    static final String dfa_318s = "\1\u0095\1\0\113\uffff";
    static final String dfa_319s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_320s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_321s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_317 = DFA.unpackEncodedStringToUnsignedChars(dfa_317s);
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final short[] dfa_320 = DFA.unpackEncodedString(dfa_320s);
    static final short[][] dfa_321 = unpackEncodedStringArray(dfa_321s);

    class DFA477 extends DFA {

        public DFA477(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 477;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "12889:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA477_1 = input.LA(1);

                         
                        int index477_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index477_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 477, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA480 extends DFA {

        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "13111:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA480_1 = input.LA(1);

                         
                        int index480_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index480_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 480, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA482 extends DFA {

        public DFA482(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 482;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 13139:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA484 extends DFA {

        public DFA484(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 484;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13144:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_322s = "\2\uffff\10\1\1\uffff";
    static final String dfa_323s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_324s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\22\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final short[][] dfa_324 = unpackEncodedStringArray(dfa_324s);

    class DFA488 extends DFA {

        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_13;
            this.eof = dfa_322;
            this.min = dfa_313;
            this.max = dfa_323;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_324;
        }
        public String getDescription() {
            return "()* loopback of 13180:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_325s = "\1\uffff\6\15\1\uffff\5\15\1\uffff";
    static final String dfa_326s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff";
    static final String[] dfa_327s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            ""
    };
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final char[] dfa_326 = DFA.unpackEncodedStringToUnsignedChars(dfa_326s);
    static final short[][] dfa_327 = unpackEncodedStringArray(dfa_327s);

    class DFA489 extends DFA {

        public DFA489(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 489;
            this.eot = dfa_189;
            this.eof = dfa_325;
            this.min = dfa_190;
            this.max = dfa_326;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_327;
        }
        public String getDescription() {
            return "13184:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA492 extends DFA {

        public DFA492(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 492;
            this.eot = dfa_13;
            this.eof = dfa_322;
            this.min = dfa_313;
            this.max = dfa_323;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_324;
        }
        public String getDescription() {
            return "()* loopback of 13208:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA493 extends DFA {

        public DFA493(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 493;
            this.eot = dfa_189;
            this.eof = dfa_325;
            this.min = dfa_190;
            this.max = dfa_326;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_327;
        }
        public String getDescription() {
            return "13212:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA496 extends DFA {

        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 13295:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA498 extends DFA {

        public DFA498(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 498;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13300:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA501 extends DFA {

        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 13355:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA503 extends DFA {

        public DFA503(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 503;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13360:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA511 extends DFA {

        public DFA511(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 511;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "13470:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA511_1 = input.LA(1);

                         
                        int index511_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index511_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 511, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA513 extends DFA {

        public DFA513(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 513;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "13493:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA513_1 = input.LA(1);

                         
                        int index513_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index513_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 513, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA515 extends DFA {

        public DFA515(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 515;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "13525:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA515_1 = input.LA(1);

                         
                        int index515_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index515_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 515, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA518 extends DFA {

        public DFA518(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 518;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "13552:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA518_1 = input.LA(1);

                         
                        int index518_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index518_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 518, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA525 extends DFA {

        public DFA525(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 525;
            this.eot = dfa_267;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "13959:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA525_1 = input.LA(1);

                         
                        int index525_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index525_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 525, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA528 extends DFA {

        public DFA528(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 528;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "14192:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA528_1 = input.LA(1);

                         
                        int index528_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index528_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 528, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_328s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_329s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_328 = DFA.unpackEncodedStringToUnsignedChars(dfa_328s);
    static final short[][] dfa_329 = unpackEncodedStringArray(dfa_329s);

    class DFA538 extends DFA {

        public DFA538(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 538;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_328;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 14313:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_330s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_330 = unpackEncodedStringArray(dfa_330s);

    class DFA544 extends DFA {

        public DFA544(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 544;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_328;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 14349:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_331s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_332s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_333s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_334s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_335s = "\1\3\1\25\40\uffff\1\16\4\uffff\1\7\1\13\1\17\1\22\1\26\1\31\1\0\1\4\1\10\1\14\1\20\1\23\1\27\1\32\1\1\1\5\1\11\1\15\1\21\1\24\1\30\1\33\1\2\1\6\1\12\5\uffff}>";
    static final String[] dfa_336s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_331 = DFA.unpackEncodedString(dfa_331s);
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final char[] dfa_333 = DFA.unpackEncodedStringToUnsignedChars(dfa_333s);
    static final short[] dfa_334 = DFA.unpackEncodedString(dfa_334s);
    static final short[] dfa_335 = DFA.unpackEncodedString(dfa_335s);
    static final short[][] dfa_336 = unpackEncodedStringArray(dfa_336s);

    class DFA548 extends DFA {

        public DFA548(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 548;
            this.eot = dfa_231;
            this.eof = dfa_331;
            this.min = dfa_332;
            this.max = dfa_333;
            this.accept = dfa_334;
            this.special = dfa_335;
            this.transition = dfa_336;
        }
        public String getDescription() {
            return "14382:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA548_45 = input.LA(1);

                         
                        int index548_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_45==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_45==EOF||LA548_45==Comma||LA548_45==EqualsSign||LA548_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_45);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA548_53 = input.LA(1);

                         
                        int index548_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_53==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_53==EOF||LA548_53==Comma||LA548_53==EqualsSign||LA548_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_53);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA548_61 = input.LA(1);

                         
                        int index548_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_61==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_61==EOF||LA548_61==Comma||LA548_61==EqualsSign||LA548_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA548_0 = input.LA(1);

                         
                        int index548_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA548_0>=7 && LA548_0<=126 && (s=T2S.M_48[LA548_0-(7)])>=0) && (synpred327_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA548_0==Yield) ) {s = 34;}

                        else if ( (LA548_0==Null) && (synpred327_InternalN4JSParser())) {s = 35;}

                        else if ( (LA548_0==True) && (synpred327_InternalN4JSParser())) {s = 36;}

                        else if ( (LA548_0==False) && (synpred327_InternalN4JSParser())) {s = 37;}

                        else if ( (LA548_0==Enum) && (synpred327_InternalN4JSParser())) {s = 38;}

                        
                        else if ((LA548_0>=4 && LA548_0<=86 && (s=T2S.M_49[LA548_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA548_0==RULE_STRING) && (synpred327_InternalN4JSParser())) {s = 64;}

                        else if ( (LA548_0==RULE_DOUBLE||LA548_0==RULE_HEX_INT||LA548_0==RULE_OCTAL_INT||LA548_0==RULE_SCIENTIFIC_INT||LA548_0==RULE_INT) && (synpred327_InternalN4JSParser())) {s = 65;}

                        else if ( (LA548_0==LeftSquareBracket) && (synpred327_InternalN4JSParser())) {s = 66;}

                        else if ( (LA548_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index548_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA548_46 = input.LA(1);

                         
                        int index548_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_46==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_46==EOF||LA548_46==Comma||LA548_46==EqualsSign||LA548_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_46);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA548_54 = input.LA(1);

                         
                        int index548_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_54==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_54==EOF||LA548_54==Comma||LA548_54==EqualsSign||LA548_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_54);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA548_62 = input.LA(1);

                         
                        int index548_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_62==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_62==EOF||LA548_62==Comma||LA548_62==EqualsSign||LA548_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_62);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA548_39 = input.LA(1);

                         
                        int index548_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_39==EOF||LA548_39==Comma||LA548_39==EqualsSign||LA548_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_39==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA548_47 = input.LA(1);

                         
                        int index548_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_47==EOF||LA548_47==Comma||LA548_47==EqualsSign||LA548_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_47==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA548_55 = input.LA(1);

                         
                        int index548_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_55==EOF||LA548_55==Comma||LA548_55==EqualsSign||LA548_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_55==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_55);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA548_63 = input.LA(1);

                         
                        int index548_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_63==EOF||LA548_63==Comma||LA548_63==EqualsSign||LA548_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_63==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_63);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA548_40 = input.LA(1);

                         
                        int index548_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_40==EOF||LA548_40==Comma||LA548_40==EqualsSign||LA548_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_40==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_40);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA548_48 = input.LA(1);

                         
                        int index548_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_48==EOF||LA548_48==Comma||LA548_48==EqualsSign||LA548_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_48==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_48);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA548_56 = input.LA(1);

                         
                        int index548_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_56==EOF||LA548_56==Comma||LA548_56==EqualsSign||LA548_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_56==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA548_34 = input.LA(1);

                         
                        int index548_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_34==EOF||LA548_34==Comma||LA548_34==EqualsSign||LA548_34==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_34==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_34);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA548_41 = input.LA(1);

                         
                        int index548_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_41==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_41==EOF||LA548_41==Comma||LA548_41==EqualsSign||LA548_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_41);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA548_49 = input.LA(1);

                         
                        int index548_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_49==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_49==EOF||LA548_49==Comma||LA548_49==EqualsSign||LA548_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA548_57 = input.LA(1);

                         
                        int index548_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_57==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_57==EOF||LA548_57==Comma||LA548_57==EqualsSign||LA548_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_57);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA548_42 = input.LA(1);

                         
                        int index548_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_42==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_42==EOF||LA548_42==Comma||LA548_42==EqualsSign||LA548_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_42);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA548_50 = input.LA(1);

                         
                        int index548_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_50==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_50==EOF||LA548_50==Comma||LA548_50==EqualsSign||LA548_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_50);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA548_58 = input.LA(1);

                         
                        int index548_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_58==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_58==EOF||LA548_58==Comma||LA548_58==EqualsSign||LA548_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA548_1 = input.LA(1);

                         
                        int index548_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_1==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                        else if ( (LA548_1==EOF||LA548_1==Comma||LA548_1==EqualsSign||LA548_1==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index548_1);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA548_43 = input.LA(1);

                         
                        int index548_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_43==EOF||LA548_43==Comma||LA548_43==EqualsSign||LA548_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_43==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_43);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA548_51 = input.LA(1);

                         
                        int index548_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_51==EOF||LA548_51==Comma||LA548_51==EqualsSign||LA548_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_51==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_51);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA548_59 = input.LA(1);

                         
                        int index548_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_59==EOF||LA548_59==Comma||LA548_59==EqualsSign||LA548_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_59==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_59);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA548_44 = input.LA(1);

                         
                        int index548_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_44==EOF||LA548_44==Comma||LA548_44==EqualsSign||LA548_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_44==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA548_52 = input.LA(1);

                         
                        int index548_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_52==EOF||LA548_52==Comma||LA548_52==EqualsSign||LA548_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_52==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA548_60 = input.LA(1);

                         
                        int index548_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA548_60==EOF||LA548_60==Comma||LA548_60==EqualsSign||LA548_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA548_60==Colon) && (synpred327_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index548_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 548, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_337s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_338s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_339s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_340s = "\1\0\1\12\45\uffff\1\27\1\1\1\4\1\7\1\13\1\16\1\21\1\24\1\30\1\2\1\5\1\10\1\14\1\17\1\22\1\25\1\31\1\3\1\6\1\11\1\15\1\20\1\23\1\26\1\32\5\uffff}>";
    static final String[] dfa_341s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_337 = DFA.unpackEncodedStringToUnsignedChars(dfa_337s);
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[][] dfa_341 = unpackEncodedStringArray(dfa_341s);

    class DFA549 extends DFA {

        public DFA549(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 549;
            this.eot = dfa_231;
            this.eof = dfa_231;
            this.min = dfa_337;
            this.max = dfa_338;
            this.accept = dfa_339;
            this.special = dfa_340;
            this.transition = dfa_341;
        }
        public String getDescription() {
            return "14413:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA549_0 = input.LA(1);

                         
                        int index549_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA549_0>=7 && LA549_0<=126 && (s=T2S.M_50[LA549_0-(7)])>=0) && (synpred328_InternalN4JSParser())) { /* 38 cases */ }
                        
                        else if ((LA549_0>=4 && LA549_0<=86 && (s=T2S.M_49[LA549_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA549_0==RULE_STRING) && (synpred328_InternalN4JSParser())) {s = 64;}

                        else if ( (LA549_0==RULE_DOUBLE||LA549_0==RULE_HEX_INT||LA549_0==RULE_OCTAL_INT||LA549_0==RULE_SCIENTIFIC_INT||LA549_0==RULE_INT) && (synpred328_InternalN4JSParser())) {s = 65;}

                        else if ( (LA549_0==LeftSquareBracket) && (synpred328_InternalN4JSParser())) {s = 66;}

                        else if ( (LA549_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index549_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA549_40 = input.LA(1);

                         
                        int index549_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_40==Comma||LA549_40==EqualsSign||LA549_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_40==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA549_48 = input.LA(1);

                         
                        int index549_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_48==Comma||LA549_48==EqualsSign||LA549_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_48==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_48);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA549_56 = input.LA(1);

                         
                        int index549_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_56==Comma||LA549_56==EqualsSign||LA549_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_56==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_56);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA549_41 = input.LA(1);

                         
                        int index549_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_41==Comma||LA549_41==EqualsSign||LA549_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_41==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_41);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA549_49 = input.LA(1);

                         
                        int index549_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_49==Comma||LA549_49==EqualsSign||LA549_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_49==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_49);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA549_57 = input.LA(1);

                         
                        int index549_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_57==Comma||LA549_57==EqualsSign||LA549_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_57==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_57);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA549_42 = input.LA(1);

                         
                        int index549_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_42==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                        else if ( (LA549_42==Comma||LA549_42==EqualsSign||LA549_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index549_42);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA549_50 = input.LA(1);

                         
                        int index549_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_50==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                        else if ( (LA549_50==Comma||LA549_50==EqualsSign||LA549_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index549_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA549_58 = input.LA(1);

                         
                        int index549_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_58==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                        else if ( (LA549_58==Comma||LA549_58==EqualsSign||LA549_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index549_58);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA549_1 = input.LA(1);

                         
                        int index549_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_1==Comma||LA549_1==EqualsSign||LA549_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_1==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_1);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA549_43 = input.LA(1);

                         
                        int index549_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_43==Comma||LA549_43==EqualsSign||LA549_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_43==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_43);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA549_51 = input.LA(1);

                         
                        int index549_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_51==Comma||LA549_51==EqualsSign||LA549_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_51==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA549_59 = input.LA(1);

                         
                        int index549_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_59==Comma||LA549_59==EqualsSign||LA549_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_59==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_59);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA549_44 = input.LA(1);

                         
                        int index549_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_44==Comma||LA549_44==EqualsSign||LA549_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_44==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_44);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA549_52 = input.LA(1);

                         
                        int index549_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_52==Comma||LA549_52==EqualsSign||LA549_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_52==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA549_60 = input.LA(1);

                         
                        int index549_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_60==Comma||LA549_60==EqualsSign||LA549_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_60==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_60);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA549_45 = input.LA(1);

                         
                        int index549_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_45==Comma||LA549_45==EqualsSign||LA549_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_45==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_45);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA549_53 = input.LA(1);

                         
                        int index549_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_53==Comma||LA549_53==EqualsSign||LA549_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_53==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_53);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA549_61 = input.LA(1);

                         
                        int index549_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_61==Comma||LA549_61==EqualsSign||LA549_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_61==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_61);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA549_46 = input.LA(1);

                         
                        int index549_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_46==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                        else if ( (LA549_46==Comma||LA549_46==EqualsSign||LA549_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index549_46);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA549_54 = input.LA(1);

                         
                        int index549_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_54==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                        else if ( (LA549_54==Comma||LA549_54==EqualsSign||LA549_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index549_54);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA549_62 = input.LA(1);

                         
                        int index549_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_62==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                        else if ( (LA549_62==Comma||LA549_62==EqualsSign||LA549_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index549_62);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA549_39 = input.LA(1);

                         
                        int index549_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_39==Comma||LA549_39==EqualsSign||LA549_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_39==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_39);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA549_47 = input.LA(1);

                         
                        int index549_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_47==Comma||LA549_47==EqualsSign||LA549_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_47==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_47);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA549_55 = input.LA(1);

                         
                        int index549_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_55==Comma||LA549_55==EqualsSign||LA549_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_55==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_55);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA549_63 = input.LA(1);

                         
                        int index549_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA549_63==Comma||LA549_63==EqualsSign||LA549_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA549_63==Colon) && (synpred328_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index549_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 549, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_342s = "\23\uffff";
    static final String dfa_343s = "\1\4\1\0\21\uffff";
    static final String dfa_344s = "\1\176\1\0\21\uffff";
    static final String dfa_345s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_346s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_347s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\14\uffff\1\3\1\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_342 = DFA.unpackEncodedString(dfa_342s);
    static final char[] dfa_343 = DFA.unpackEncodedStringToUnsignedChars(dfa_343s);
    static final char[] dfa_344 = DFA.unpackEncodedStringToUnsignedChars(dfa_344s);
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final short[][] dfa_347 = unpackEncodedStringArray(dfa_347s);

    class DFA566 extends DFA {

        public DFA566(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 566;
            this.eot = dfa_342;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "14828:1: ( ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=> (LeftParenthesisKeyword_0_0_0_1= LeftParenthesis TAnonymousFormalParameterListParserRuleCall_0_0_0_2= ruleTAnonymousFormalParameterList RightParenthesisKeyword_0_0_0_3= RightParenthesis EqualsSignGreaterThanSignKeyword_0_0_0_4= EqualsSignGreaterThanSign ) ) ( (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0= rulePrimaryTypeExpression ) ) ) | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA566_1 = input.LA(1);

                         
                        int index566_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_InternalN4JSParser()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index566_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 566, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_348s = "\174\uffff";
    static final String dfa_349s = "\1\2\173\uffff";
    static final String dfa_350s = "\1\4\1\0\172\uffff";
    static final String dfa_351s = "\1\u0099\1\0\172\uffff";
    static final String dfa_352s = "\2\uffff\1\2\170\uffff\1\1";
    static final String dfa_353s = "\1\uffff\1\0\172\uffff}>";
    static final String[] dfa_354s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_348 = DFA.unpackEncodedString(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final char[] dfa_350 = DFA.unpackEncodedStringToUnsignedChars(dfa_350s);
    static final char[] dfa_351 = DFA.unpackEncodedStringToUnsignedChars(dfa_351s);
    static final short[] dfa_352 = DFA.unpackEncodedString(dfa_352s);
    static final short[] dfa_353 = DFA.unpackEncodedString(dfa_353s);
    static final short[][] dfa_354 = unpackEncodedStringArray(dfa_354s);

    class DFA570 extends DFA {

        public DFA570(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 570;
            this.eot = dfa_348;
            this.eof = dfa_349;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_353;
            this.transition = dfa_354;
        }
        public String getDescription() {
            return "14919:2: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA570_1 = input.LA(1);

                         
                        int index570_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_InternalN4JSParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index570_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 570, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_355s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_356s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_357s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String[] dfa_358s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\7\16\uffff\1\3\2\uffff\1\6\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_355 = DFA.unpackEncodedStringToUnsignedChars(dfa_355s);
    static final char[] dfa_356 = DFA.unpackEncodedStringToUnsignedChars(dfa_356s);
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[][] dfa_358 = unpackEncodedStringArray(dfa_358s);

    class DFA573 extends DFA {

        public DFA573(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 573;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_355;
            this.max = dfa_356;
            this.accept = dfa_357;
            this.special = dfa_44;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "14984:1: (ParameterizedTypeRefParserRuleCall_0= ruleParameterizedTypeRef | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | ThisTypeRefParserRuleCall_2= ruleThisTypeRef | TypeTypeRefParserRuleCall_3= ruleTypeTypeRef | FunctionTypeExpressionOLDParserRuleCall_4= ruleFunctionTypeExpressionOLD | ArrowFunctionTypeExpressionParserRuleCall_5= ruleArrowFunctionTypeExpression | UnionTypeExpressionOLDParserRuleCall_6= ruleUnionTypeExpressionOLD | IntersectionTypeExpressionOLDParserRuleCall_7= ruleIntersectionTypeExpressionOLD )";
        }
    }
    static final String dfa_359s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_360s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_361s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_362s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_363s = "\1\3\1\6\12\uffff\1\2\1\uffff\1\1\1\4\1\0\1\5\1\11\1\7\1\10\11\uffff}>";
    static final String[] dfa_364s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_359 = DFA.unpackEncodedString(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final char[] dfa_361 = DFA.unpackEncodedStringToUnsignedChars(dfa_361s);
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final short[] dfa_363 = DFA.unpackEncodedString(dfa_363s);
    static final short[][] dfa_364 = unpackEncodedStringArray(dfa_364s);

    class DFA584 extends DFA {

        public DFA584(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 584;
            this.eot = dfa_46;
            this.eof = dfa_359;
            this.min = dfa_360;
            this.max = dfa_361;
            this.accept = dfa_362;
            this.special = dfa_363;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "15207:3: ( ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_0_0= ruleBindingIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA584_16 = input.LA(1);

                         
                        int index584_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_16==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                        else if ( (LA584_16==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index584_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA584_14 = input.LA(1);

                         
                        int index584_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_14==EOF||LA584_14==Ampersand||LA584_14==RightParenthesis||(LA584_14>=PlusSign && LA584_14<=Comma)||LA584_14==LessThanSign||LA584_14==QuestionMark||LA584_14==VerticalLine) ) {s = 28;}

                        else if ( (LA584_14==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index584_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA584_12 = input.LA(1);

                         
                        int index584_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA584_12==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index584_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA584_0 = input.LA(1);

                         
                        int index584_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA584_0>=11 && LA584_0<=126 && (s=T2S.M_52[LA584_0-(11)])>=0) && (synpred337_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA584_0==Constructor) ) {s = 12;}

                        else if ( (LA584_0==Of) && (synpred337_InternalN4JSParser())) {s = 13;}

                        else if ( (LA584_0==Target) ) {s = 14;}

                        else if ( (LA584_0==Type) ) {s = 15;}

                        else if ( (LA584_0==Union) ) {s = 16;}

                        else if ( (LA584_0==Intersection) ) {s = 17;}

                        else if ( (LA584_0==This) ) {s = 18;}

                        else if ( (LA584_0==Promisify) ) {s = 19;}

                        else if ( (LA584_0==Await) ) {s = 20;}

                        else if ( (LA584_0==Async) && (synpred337_InternalN4JSParser())) {s = 21;}

                        else if ( (LA584_0==Implements) && (synpred337_InternalN4JSParser())) {s = 22;}

                        else if ( (LA584_0==Interface) && (synpred337_InternalN4JSParser())) {s = 23;}

                        else if ( (LA584_0==Private) && (synpred337_InternalN4JSParser())) {s = 24;}

                        else if ( (LA584_0==Protected) && (synpred337_InternalN4JSParser())) {s = 25;}

                        else if ( (LA584_0==Public) && (synpred337_InternalN4JSParser())) {s = 26;}

                        else if ( (LA584_0==Out) && (synpred337_InternalN4JSParser())) {s = 27;}

                        else if ( (LA584_0==This_1||LA584_0==Void||LA584_0==LeftParenthesis||LA584_0==QuestionMark||LA584_0==LeftSquareBracket||LA584_0==LeftCurlyBracket||LA584_0==Tilde) ) {s = 28;}

                         
                        input.seek(index584_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA584_15 = input.LA(1);

                         
                        int index584_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_15==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA584_15==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index584_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA584_17 = input.LA(1);

                         
                        int index584_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_17==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA584_17==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index584_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA584_1 = input.LA(1);

                         
                        int index584_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_1==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                        else if ( (LA584_1==EOF||LA584_1==Ampersand||LA584_1==RightParenthesis||(LA584_1>=PlusSign && LA584_1<=Comma)||LA584_1==FullStop||LA584_1==LessThanSign||LA584_1==QuestionMark||LA584_1==VerticalLine) ) {s = 28;}

                         
                        input.seek(index584_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA584_19 = input.LA(1);

                         
                        int index584_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_19==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                        else if ( (LA584_19==EOF||LA584_19==Ampersand||LA584_19==RightParenthesis||(LA584_19>=PlusSign && LA584_19<=Comma)||LA584_19==LessThanSign||LA584_19==QuestionMark||LA584_19==VerticalLine) ) {s = 28;}

                         
                        input.seek(index584_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA584_20 = input.LA(1);

                         
                        int index584_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_20==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                        else if ( (LA584_20==EOF||LA584_20==Ampersand||LA584_20==RightParenthesis||(LA584_20>=PlusSign && LA584_20<=Comma)||LA584_20==LessThanSign||LA584_20==QuestionMark||LA584_20==VerticalLine) ) {s = 28;}

                         
                        input.seek(index584_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA584_18 = input.LA(1);

                         
                        int index584_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA584_18==EOF||LA584_18==Ampersand||LA584_18==RightParenthesis||(LA584_18>=PlusSign && LA584_18<=Comma)||LA584_18==LessThanSign||LA584_18==QuestionMark||LA584_18==VerticalLine) ) {s = 28;}

                        else if ( (LA584_18==Colon) && (synpred337_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index584_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 584, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_365s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_365 = unpackEncodedStringArray(dfa_365s);

    class DFA589 extends DFA {

        public DFA589(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 589;
            this.eot = dfa_348;
            this.eof = dfa_349;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_353;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "15326:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA589_1 = input.LA(1);

                         
                        int index589_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_InternalN4JSParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index589_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 589, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA591 extends DFA {

        public DFA591(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 591;
            this.eot = dfa_348;
            this.eof = dfa_349;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_353;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "15394:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA591_1 = input.LA(1);

                         
                        int index591_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_InternalN4JSParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index591_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 591, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_366s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_367s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_368s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_369s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_370s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_366 = DFA.unpackEncodedStringToUnsignedChars(dfa_366s);
    static final char[] dfa_367 = DFA.unpackEncodedStringToUnsignedChars(dfa_367s);
    static final short[] dfa_368 = DFA.unpackEncodedString(dfa_368s);
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final short[][] dfa_370 = unpackEncodedStringArray(dfa_370s);

    class DFA595 extends DFA {

        public DFA595(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 595;
            this.eot = dfa_224;
            this.eof = dfa_224;
            this.min = dfa_366;
            this.max = dfa_367;
            this.accept = dfa_368;
            this.special = dfa_369;
            this.transition = dfa_370;
        }
        public String getDescription() {
            return "15447:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA595_0 = input.LA(1);

                         
                        int index595_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA595_0==Get) ) {s = 1;}

                        else if ( (LA595_0==Set) ) {s = 2;}

                        else if ( (LA595_0==LessThanSign) && (synpred342_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA595_0>=4 && LA595_0<=126 && (s=T2S.M_53[LA595_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index595_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA595_1 = input.LA(1);

                         
                        int index595_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_InternalN4JSParser()) ) {s = 65;}

                        else if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA595_2 = input.LA(1);

                         
                        int index595_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 67;}

                        else if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA595_4 = input.LA(1);

                         
                        int index595_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA595_5 = input.LA(1);

                         
                        int index595_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA595_6 = input.LA(1);

                         
                        int index595_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA595_7 = input.LA(1);

                         
                        int index595_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA595_8 = input.LA(1);

                         
                        int index595_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA595_9 = input.LA(1);

                         
                        int index595_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA595_10 = input.LA(1);

                         
                        int index595_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA595_11 = input.LA(1);

                         
                        int index595_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA595_12 = input.LA(1);

                         
                        int index595_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA595_13 = input.LA(1);

                         
                        int index595_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA595_14 = input.LA(1);

                         
                        int index595_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA595_15 = input.LA(1);

                         
                        int index595_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA595_16 = input.LA(1);

                         
                        int index595_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA595_17 = input.LA(1);

                         
                        int index595_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA595_18 = input.LA(1);

                         
                        int index595_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA595_19 = input.LA(1);

                         
                        int index595_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA595_20 = input.LA(1);

                         
                        int index595_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA595_21 = input.LA(1);

                         
                        int index595_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA595_22 = input.LA(1);

                         
                        int index595_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA595_23 = input.LA(1);

                         
                        int index595_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA595_24 = input.LA(1);

                         
                        int index595_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA595_25 = input.LA(1);

                         
                        int index595_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA595_26 = input.LA(1);

                         
                        int index595_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA595_27 = input.LA(1);

                         
                        int index595_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA595_28 = input.LA(1);

                         
                        int index595_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA595_29 = input.LA(1);

                         
                        int index595_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA595_30 = input.LA(1);

                         
                        int index595_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA595_31 = input.LA(1);

                         
                        int index595_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA595_32 = input.LA(1);

                         
                        int index595_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA595_33 = input.LA(1);

                         
                        int index595_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA595_34 = input.LA(1);

                         
                        int index595_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA595_35 = input.LA(1);

                         
                        int index595_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA595_36 = input.LA(1);

                         
                        int index595_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA595_37 = input.LA(1);

                         
                        int index595_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA595_38 = input.LA(1);

                         
                        int index595_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA595_39 = input.LA(1);

                         
                        int index595_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA595_40 = input.LA(1);

                         
                        int index595_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA595_41 = input.LA(1);

                         
                        int index595_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA595_42 = input.LA(1);

                         
                        int index595_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA595_43 = input.LA(1);

                         
                        int index595_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA595_44 = input.LA(1);

                         
                        int index595_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA595_45 = input.LA(1);

                         
                        int index595_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA595_46 = input.LA(1);

                         
                        int index595_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA595_47 = input.LA(1);

                         
                        int index595_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA595_48 = input.LA(1);

                         
                        int index595_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA595_49 = input.LA(1);

                         
                        int index595_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA595_50 = input.LA(1);

                         
                        int index595_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA595_51 = input.LA(1);

                         
                        int index595_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA595_52 = input.LA(1);

                         
                        int index595_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA595_53 = input.LA(1);

                         
                        int index595_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA595_54 = input.LA(1);

                         
                        int index595_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA595_55 = input.LA(1);

                         
                        int index595_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA595_56 = input.LA(1);

                         
                        int index595_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA595_57 = input.LA(1);

                         
                        int index595_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA595_58 = input.LA(1);

                         
                        int index595_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA595_59 = input.LA(1);

                         
                        int index595_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA595_60 = input.LA(1);

                         
                        int index595_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA595_61 = input.LA(1);

                         
                        int index595_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA595_62 = input.LA(1);

                         
                        int index595_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA595_63 = input.LA(1);

                         
                        int index595_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA595_64 = input.LA(1);

                         
                        int index595_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index595_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 595, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA688 extends DFA {

        public DFA688(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 688;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "5703:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA690 extends DFA {

        public DFA690(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 690;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "5851:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA692 extends DFA {

        public DFA692(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 692;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "5889:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA694 extends DFA {

        public DFA694(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 694;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6037:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA696 extends DFA {

        public DFA696(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 696;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6080:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA698 extends DFA {

        public DFA698(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 698;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6323:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA700 extends DFA {

        public DFA700(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 700;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6396:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA702 extends DFA {

        public DFA702(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 702;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6639:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA762 extends DFA {

        public DFA762(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 762;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 12349:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA764 extends DFA {

        public DFA764(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 764;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12353:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA768 extends DFA {

        public DFA768(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 768;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 12534:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA770 extends DFA {

        public DFA770(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 770;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12538:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA774 extends DFA {

        public DFA774(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 774;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 12817:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA776 extends DFA {

        public DFA776(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 776;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12821:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA780 extends DFA {

        public DFA780(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 780;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_313;
            this.max = dfa_314;
            this.accept = dfa_315;
            this.special = dfa_17;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 13118:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA782 extends DFA {

        public DFA782(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 782;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13122:24: ( ruleBogusTypeRefFragment )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6AD25D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6AD25C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4AD2440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x000D048090000130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0020440000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0000440000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6AD25C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002460000440000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_20;
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6AD25C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6AD2440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AF2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6AD2440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0000440000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4BD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4BD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x7C07C6B4D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AF2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x040D048895184D30L,0x4002420000000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x000D048090000132L,0x4002420000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 7, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 80, 87, 13, 24, 90, -1, -1, 9, 10, 67, 21, 20, 12, 82, 15, 84, 36, 69, 23, 42, 81, -1, 17, 16, 59, 49, 85, 38, 78, 29, 40, 91, 89, 19, 33, 61, 48, 58, 37, 68, 83, -1, -1, -1, -1, 79, 30, 26, 47, 44, 31, 86, 25, -1, -1, -1, -1, -1, 70, -1, 71, -1, 63, -1, -1, -1, -1, -1, -1, -1, 32, 77, 76, -1, 35, -1, -1, 75, -1, -1, 45, -1, 46, 72, -1, 73, -1, 62, -1, 27, 50, -1, -1, -1, 8, 64, -1, -1, 22, -1, 88, 74, -1, -1, -1, 51, -1, 56, 53, 54, 55, -1, 57, -1, 28, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, -1, -1, -1, -1, -1, -1, -1, -1, 52};
	final static int[] M_3 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_4 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_6 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_9 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_16 = { 22, 17, 25, -1, 24, 26, 28, 13, -1, -1, 12, 50, -1, -1, -1, 27, 11, 54, -1, -1, 29, -1, 14, -1, 19, 56, 4, 1, -1, -1, 51, -1, 43, 33, -1, 21, -1, 7, 23, -1, -1, -1, 16, 45, 32, 42, 20, 55, -1, -1, -1, -1, -1, -1, 8, 10, 31, 30, 9, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, -1, 47, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 62, -1, -1, 3, -1, 5, 59, -1, 60, -1, 46, -1, -1, 34, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_17 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 50, -1, -1, -1, 26, 10, 54, -1, -1, 28, -1, 13, -1, 18, 56, 4, 1, -1, -1, 51, -1, 43, 33, -1, 20, -1, 30, 22, -1, -1, -1, 15, 45, 32, 42, 19, 55, -1, -1, -1, -1, -1, -1, 7, 9, 31, 29, 8, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, -1, 47, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 62, -1, -1, 3, -1, 5, 59, -1, 60, -1, 46, -1, -1, 34, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_18 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_19 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 14, 11, 62, 35, 5, 63, 65, 56, 21, 22, 55, 31, 23, 28, 29, 64, 54, 24, 27, 33, 66, 37, 57, 39, 6, 42, 61, 4, 16, 18, 19, 20, 49, 38, 40, 13, 44, 46, 3, 17, 26, 50, 59, 47, 9, 48, 10, 2, 45, -1, -1, -1, -1, 30, 51, 53, 36, 67, 52, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 25, 32, 34, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 68};
	final static int[] M_22 = { 13, 10, 61, 34, 4, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 5, 41, 60, 3, 15, 17, 18, 19, 48, 37, 39, 12, 43, 45, 2, 16, 25, 49, 58, 46, 8, 47, 9, 1, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 67};
	final static int[] M_24 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 52, -1, -1, -1, 30, 12, -1, -1, -1, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_25 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_26 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_27 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, 1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_28 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 48, 8, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_29 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 56, -1, -1, -1, 34, 16, 60, -1, -1, 36, -1, 19, -1, 24, 62, 31, 30, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_30 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 48, 9, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 11, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_31 = { 22, 17, 25, -1, 24, 26, 28, 13, -1, -1, 12, -1, -1, -1, -1, 27, 11, -1, -1, -1, 29, -1, 14, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, 7, 23, -1, -1, -1, 16, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, -1, 30, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6};
	final static int[] M_33 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, -1, -1, -1, -1, 26, 10, -1, -1, -1, 28, -1, 13, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, 30, 22, -1, -1, -1, 15, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 7, 9, -1, 29, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6};
	final static int[] M_35 = { 16, -1, -1, -1, -1, -1, 12, -1, -1, 11, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 13, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 9, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6};
	final static int[] M_36 = { 21, -1, 24, -1, 23, 25, 27, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 28, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 43, 33, -1, 20, -1, 30, 22, -1, -1, -1, -1, 45, 32, 42, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_37 = { 50, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, 59, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52};
	final static int[] M_38 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, -1, -1, -1, -1, 26, 10, -1, -1, -1, 28, -1, 13, -1, 18, -1, 4, 1, -1, -1, -1, -1, 43, 33, -1, 20, -1, 30, 22, -1, -1, -1, 15, 45, 32, 42, 19, -1, -1, -1, -1, -1, -1, -1, 7, 9, 31, 29, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, -1, -1, -1, 3, -1, 5, -1, -1, -1, -1, 46, -1, -1, 34, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_40 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_41 = { 67, 47, -1, 68, -1, -1, 33, 34, -1, 43, 35, 40, 41, -1, -1, 36, 39, 45, -1, 49, -1, 51, -1, 54, 28, -1, 29, 31, 32, -1, 61, 50, 52, -1, 56, 58, -1, 30, 38, 62, 65, 59, -1, 60, -1, -1, 57, -1, -1, -1, -1, 42, -1, 63, 48, 69, -1, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 37, 44, 46, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_44 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_45 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_48 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_49 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_50 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_52 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_53 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}