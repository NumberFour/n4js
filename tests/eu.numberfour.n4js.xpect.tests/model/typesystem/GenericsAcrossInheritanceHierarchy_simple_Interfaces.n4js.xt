/* XPECT_SETUP eu.numberfour.n4js.tests.N4JSXpectTest END_SETUP  */


class A {}
class B extends A {}
class C extends B {}

class D {}


interface X<T> {
	f : T;
	m(param : T) : void
}

interface Y1 extends X<B> {}			// set invariantly

interface Y2<T,U,V> extends X<U> {}		// forward


// direct use of parameterized class
// (covered in all other test cases already; here only for completeness)
var x : X<B>;
// XPECT errors --> "A is not a subtype of B." at "new A()"
x.f = new A();
x.f = new B();
x.f = new C();
// XPECT errors --> "D is not a subtype of B." at "new D()"
x.f = new D();
// XPECT errors --> "A is not a subtype of B." at "new A()"
x.m(new A());
x.m(new B());
x.m(new C());
// XPECT errors --> "D is not a subtype of B." at "new D()"
x.m(new D());


// indirect uses

var y1 : Y1;
// XPECT errors --> "A is not a subtype of B." at "new A()"
y1.f = new A();
y1.f = new B();
y1.f = new C();
// XPECT errors --> "D is not a subtype of B." at "new D()"
y1.f = new D();
// XPECT errors --> "A is not a subtype of B." at "new A()"
y1.m(new A());
y1.m(new B());
y1.m(new C());
// XPECT errors --> "D is not a subtype of B." at "new D()"
y1.m(new D());


var y2 : Y2<string,B,D>;
// XPECT errors --> "A is not a subtype of B." at "new A()"
y2.f = new A();
y2.f = new B();
y2.f = new C();
// XPECT errors --> "D is not a subtype of B." at "new D()"
y2.f = new D();
// XPECT errors --> "A is not a subtype of B." at "new A()"
y2.m(new A());
y2.m(new B());
y2.m(new C());
// XPECT errors --> "D is not a subtype of B." at "new D()"
y2.m(new D());

