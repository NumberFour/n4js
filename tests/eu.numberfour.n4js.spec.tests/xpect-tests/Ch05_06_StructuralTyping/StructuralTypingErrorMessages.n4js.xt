/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */

//
// error messages generated by StructuralTypingComputer used to get lost
// on their way through nested xsemantics type inference invocations
//
// in this file we assert that this no longer happens with some typical use cases
//


class A {
	public name : string;
	public age : number;
	
	constructor(@Spec spec : ~i~this) {}
}
class B {
	public name : string;
}

var a : A;
var b : B;



// XPECT errors --> "A is not a structural subtype of ~Object with { name: string; age: string; address: string }: missing structural field address; age failed: number is not equal to string." at "a"
var o : ~Object with {name : string; age : string; address : string;} = a;



// XPECT errors --> "~Object with { name: string } is not a structural subtype of ~i~A: missing field age; age failed: non-optional writable field requires a readable field or a getter in subtype." at "{name: "Hello"}"
new A({name: "Hello"});



function fun(param : ~~A) {}

// XPECT errors --> "B is not a structural subtype of ~~A: missing field age." at "b"
fun(b);

// XPECT errors --> "B is not a structural subtype of ~~A: missing field age." at "new B()"
fun(new B());



class G<T> {}
var gsa : G<~~A>;
var gb : G<B>;
// XPECT errors --> "G<B> is not a subtype of G<~~A> due to incompatible type arguments: B is not a structural subtype of ~~A: missing field age." at "gb"
gsa = gb;



function f(cb : {function(B)}){}
// XPECT errors --> "{function(~~A):void} is not a subtype of {function(B)}." at "function(b : ~~A){}"
f(function(b : ~~A){});

